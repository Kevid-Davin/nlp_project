[{"author": "Bogdanp", "repo": "Bogdanp/awesome-advent-of-code", "language": "Python", "language_all": {"Python": 950}, "readme_contents": "# Awesome Advent of Code\n\nThis is a collection of awesome resources related to the yearly\n[Advent of Code] challenge.\n\n[Advent of Code]: https://adventofcode.com/\n\n* [The Official AoC Website](https://adventofcode.com/)\n* [The AoC Subreddit](https://www.reddit.com/r/adventofcode/)\n* [Project Templates](#project-templates)\n* [Tools and Utilities](#tools-and-utilities)\n* [Other Advent Calendars](#other-advent-calendars)\n* [2018](/2018.md)\n* [2019](#2019)\n  * [Solutions](#solutions)\n    * [AWK](#awk)\n    * [Ada](#ada)\n    * [Bash](#Bash)\n    * [C](#c)\n    * [C#](#c-1)\n    * [C++](#c-2)\n    * [Clojure](#clojure)\n    * [Common Lisp](#common-lisp)\n    * [Crystal](#crystal)\n    * [D](#d)\n    * [Dart](#dart)\n    * [Elixir](#elixir)\n    * [Elm](#elm)\n    * [Erlang](#erlang)\n    * [F#](#f)\n    * [Go](#go)\n    * [Groovy](#groovy)\n    * [Haskell](#haskell)\n    * [Idris](#idris)\n    * [J](#J)\n    * [Java](#java)\n    * [JavaScript](#javascript)\n    * [Julia](#julia)\n    * [Kotlin](#kotlin)\n    * [LDPL](#ldpl)\n    * [Nim](#nim)\n    * [OCaml](#ocaml)\n    * [PHP](#php)\n    * [Perl](#perl)\n    * [Pony](#pony)\n    * [PowerShell](#powershell)\n    * [Python](#python)\n    * [R](#r)\n    * [Racket](#racket)\n    * [ReasonML](#reasonml)\n    * [Red](#red)\n    * [Ruby](#ruby)\n    * [Rust](#rust)\n    * [Smalltalk](#smalltalk)\n    * [Scala](#scala)\n    * [Scheme](#scheme)\n    * [Swift](#swift)\n    * [TypeScript](#typescript)\n    * [Zig](#zig)\n  * [Live Streams](#live-streams)\n\n---\n\n## Project Templates\n\n*Templates, cookiecutters and skeletons for quickly setting up projects\nin your favourite language.*\n\n* [dave-burke/advent-of-code-java-starter](https://github.com/dave-burke/advent-of-code-java-starter) *(Java)*\n* [gobanos/cargo-aoc](https://github.com/gobanos/cargo-aoc) *(Rust)*\n* [hughjdavey/aoc-kotlin-starter](https://github.com/hughjdavey/aoc-kotlin-starter) *(Kotlin)*\n* [kindermoumoute/adventofcode](https://github.com/kindermoumoute/adventofcode/tree/master/template) *(Go)*\n* [staylorwr/elixir_aoc](https://github.com/staylorwr/elixir_aoc) *(Elixir)*\n* [mhanberg/advent-of-code-elixir-starter](https://github.com/mhanberg/advent-of-code-elixir-starter) *(Elixir)*\n* [AlexeSimon/adventofcode](https://github.com/AlexeSimon/adventofcode) *(Python)*\n* [sindrekjr/AdventOfCodeBase](https://github.com/sindrekjr/AdventOfCodeBase) *(C#)*\n* [mhanberg/advent-of-code-clojure-starter](https://github.com/mhanberg/advent-of-code-clojure-starter) *(Clojure)*\n* [caderek/aoc-starter-js](https://github.com/caderek/aoc-starter-js) *(JavaScript)*\n* [caderek/aoc-starter-ts](https://github.com/caderek/aoc-starter-ts) *(TypeScript)*\n\n## Tools and Utilities\n\n* [Alfie](https://alfie.prodo.ai/) -- Online JS editor that helps users solve AoC problems.\n* [Chrome extension](https://chrome.google.com/webstore/detail/advent-of-code-ranking/jbnlafikncgjjhdkmfhokcplgahebmjl) -- Browser extension for private leaderboard visualization\n* [Firefox extension](https://addons.mozilla.org/en-US/firefox/addon/aoc-ranking/) -- Browser extension for private leaderboard visualization\n* [Globals medals overview](http://www.maurits.vdschee.nl/scatterplot/medals.html) -- Alternative global leaderboard showing first, second and third places as gold, silver and bronze medals.\n* [Scatterplot of first 100](http://www.maurits.vdschee.nl/scatterplot/) -- Scatterplot of the time taken to solve the parts of each puzzle by the first 100 people that solved it.\n* [aocdl](https://github.com/GreenLightning/advent-of-code-downloader) -- Command-line utility that automatically downloads your personal input file while you read the puzzle description *(Go)*.\n* [aoc-cli](https://github.com/keirua/aoc-cli) -- Command-line utility that helps solve problems in ruby: it downloads your personal input file, creates the sample source files and benchmarks your solutions *(Ruby)*.\n* [AoCHelper](https://github.com/eduherminio/AoCHelper) -- NuGet library that simplifies puzzle solving and provides benchmarking *(.NET)*.\n\n## Other Advent Calendars\n\n*24 days of cool stuff regarding <insert-technology-here>.*\n\n* [Perl6 Advent Calendar](https://perl6advent.wordpress.com/)\n* [QEMU Advent Calendar](https://www.qemu-advent-calendar.org/)\n\n## 2019\n\n**WARNING:** All of these likely contain spoilers.\n\nRead [CONTRIBUTING.md](/CONTRIBUTING.md) to learn how to add your own repos.\n\n### Solutions\n\n#### AWK\n\n*Solutions to AoC in AWK.*\n\n#### Ada\n\n*Solutions to AoC in Ada.*\n\n* [jamestomasino/advent-of-code-2019](https://github.com/jamestomasino/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jamestomasino/advent-of-code-2019.svg)\n\n#### Bash\n\n*Solutions to AoC in Bash.*\n\n#### C\n\n*Solutions to AoC in C.*\n\n* [coder5506/advent-of-code-2019](https://github.com/coder5506/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/coder5506/advent-of-code-2019.svg)\n\n#### C#\n\n*Solutions to AoC in C#.*\n\n* [AnkurSheel/AdventOfCode2019](https://github.com/AnkurSheel/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AnkurSheel/AdventOfCode2019.svg)\n* [alexchro93/AdventOfCode](https://github.com/alexchro93/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/alexchro93/AdventOfCode.svg)\n* [eduherminio/AoC2019](https://github.com/eduherminio/AoC2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/eduherminio/AoC2019.svg)\n* [encse/adventofcode](https://github.com/encse/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/encse/adventofcode.svg)\n* [sanraith/aoc2019](https://github.com/sanraith/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sanraith/aoc2019.svg)\n* [sindrekjr/AdventOfCode](https://github.com/sindrekjr/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sindrekjr/AdventOfCode.svg)\n* [viceroypenguin/adventofcode](https://github.com/viceroypenguin/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/viceroypenguin/adventofcode.svg)\n\n#### C++\n\n*Solutions to AoC in C++.*\n\n* [TheRealMolen/adventofcode2019](https://github.com/TheRealMolen/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/TheRealMolen/adventofcode2019.svg)\n* [voivoid/advent-of-code](https://github.com/voivoid/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/voivoid/advent-of-code.svg)\n\n#### Clojure\n\n*Solutions to AoC in Clojure.*\n\n\n* [agrison/advent-of-code-2019](https://github.com/agrison/advent-of-code-2019/) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/agrison/advent-of-code-2019.svg)\n* [alexparlett/advent-of-code-2019](https://github.com/alexparlett/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/alexparlett/advent-of-code-2019.svg)\n* [erdos/advent-of-code-2019](https://github.com/erdos/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/erdos/advent-of-code-2019.svg)\n* [fctorial/adventofcode2019-clojure](https://github.com/fctorial/adventofcode2019-clojure) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fctorial/adventofcode2019-clojure.svg)\n* [fdlk/advent-2019](https://github.com/fdlk/advent-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fdlk/advent-2019.svg)\n* [felipecortez/advent-of-code](https://github.com/felipecortez/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/felipecortez/advent-of-code.svg)\n* [jdlambert/advent-of-code-2019](https://github.com/jdlambert/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jdlambert/advent-of-code-2019.svg)\n* [mastercake10/AdventOfCode2019](https://github.com/mastercake10/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mastercake10/AdventOfCode2019.svg)\n\n#### Common Lisp\n\n*Solutions to AoC in Common Lisp.*\n\n* [topikettunen/advent-of-code-2019](https://github.com/topikettunen/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/topikettunen/advent-of-code-2019.svg)\n\n#### Crystal\n\n*Solutions to AoC in Crystal.*\n\n* [PenguinOwl/advent2019](https://github.com/PenguinOwl/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/PenguinOwl/advent2019.svg)\n* [salival1/advent-2019](https://github.com/salival1/advent-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/salival1/advent-2019.svg)\n\n#### D\n\n*Solutions to AoC in D.*\n\n* [jrfondren/adventofcode](https://github.com/jrfondren/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jrfondren/adventofcode.svg)\n* [m3m0ry/2019-advent](https://github.com/m3m0ry/2019-advent) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/m3m0ry/2019-advent.svg)\n\n#### Dart\n\n*Solutions to AoC in Dart.*\n\n* [Awjin/advent-of-code](https://github.com/Awjin/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Awjin/advent-of-code.svg)\n* [julemand101/AdventOfCode2019](https://github.com/julemand101/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/julemand101/AdventOfCode2019.svg)\n\n#### Elixir\n\n*Solutions to AoC in Elixir.*\n\n* [Firebain/adventofcode](https://github.com/Firebain/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Firebain/adventofcode.svg)\n* [dunyakirkali/aoc](https://github.com/dunyakirkali/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dunyakirkali/aoc.svg)\n* [es1o/adventofcode](https://github.com/es1o/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/es1o/adventofcode.svg)\n* [jwarwick/aoc_2019](https://github.com/jwarwick/aoc_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jwarwick/aoc_2019.svg)\n* [manniL/aoc-2019-elixir](https://github.com/manniL/aoc-2019-elixir) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/manniL/aoc-2019-elixir.svg)\n\n#### Elm\n\n*Solutions to AoC in Elm and Literate Elm.*\n\n#### Erlang\n\n*Solutions to AoC in Erlang.*\n\n* [rhbvkleef/aoc2019](https://github.com/rhbvkleef/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/rhbvkleef/aoc2019.svg)\n\n#### F#\n\n*Solutions to AoC in F#.*\n\n* [CameronAavik/AdventOfCode](https://github.com/CameronAavik/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/CameronAavik/AdventOfCode.svg)\n* [ChrisPritchard/AdventOfCode](https://github.com/ChrisPritchard/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ChrisPritchard/AdventOfCode.svg)\n\n#### Go\n\n*Solutions to AoC in Go.*\n\n* [GreenLightning/aoc19](https://github.com/GreenLightning/aoc19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/GreenLightning/aoc19.svg)\n* [Ullaakut/aoc19](https://github.com/Ullaakut/aoc19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Ullaakut/aoc19.svg)\n* [chigley/advent2019](https://github.com/chigley/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/chigley/advent2019.svg)\n* [davidaayers/advent-of-code-2019](https://github.com/davidaayers/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davidaayers/advent-of-code-2019.svg)\n* [devries/advent_of_code_2019](https://github.com/devries/advent_of_code_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/devries/advent_of_code_2019.svg)\n* [gliderGeek/adventofcode19](https://github.com/gliderGeek/adventofcode19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gliderGeek/adventofcode19.svg)\n* [hierynomus/2019-adventofcode.com](https://github.com/hierynomus/code-challenges/tree/master/2019-adventofcode.com) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hierynomus/code-challenges.svg)\n* [howden/advent19](https://github.com/howden/advent19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/howden/advent19.svg)\n* [kissgyorgy/adventofcode2019](https://github.com/kissgyorgy/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/kissgyorgy/adventofcode2019.svg)\n* [lynerist/Advent-of-code-2019-golang](https://github.com/lynerist/Advent-of-code-2019-golang) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/lynerist/Advent-of-code-2019-golang.svg)\n* [sasom/adventofcode19](https://gitlab.com/sasom/adventofcode19)\n* [thlacroix/goadvent](https://github.com/thlacroix/goadvent) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/thlacroix/goadvent.svg)\n* [williamfhe/advent-of-code-2019](https://github.com/williamfhe/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/williamfhe/advent-of-code-2019.svg)\n* [sevaorlov/adventofcode2019](https://github.com/sevaorlov/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sevaorlov/adventofcode2019.svg)\n\n#### Groovy\n\n*Solutions to AoC in Groovy.*\n\n#### Haskell\n\n*Solutions to AoC in Haskell.*\n\n* [bzuilhof/AdventOfCode](https://github.com/bzuilhof/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/bzuilhof/AdventOfCode.svg)\n* [ephemient/aoc2019#hs](https://github.com/ephemient/aoc2019/tree/hs) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ephemient/aoc2019/hs.svg)\n* [glguy/advent2019](https://github.com/glguy/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/glguy/advent2019.svg)\n* [hashedone/advent-of-code-2019-hask](https://github.com/hashedone/advent-of-code-2019-hask) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hashedone/advent-of-code-2019-hask.svg)\n* [nrdmn/adventofcode2019](https://github.com/nrdmn/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/nrdmn/adventofcode2019.svg)\n* [webbiscuit/adventofcode](https://github.com/webbiscuit/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/webbiscuit/adventofcode.svg)\n\n#### Idris\n\n*Solutions to AoC in Idris.*\n\n#### J\n\n*Solutions to AoC in J.*\n\n* [jitwit/aoc](https://github.com/jitwit/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jitwit/aoc.svg)\n\n#### Java\n\n*Solutions to AoC in Java.*\n\n* [SimonBaars/adventOfCode-2019](https://github.com/SimonBaars/adventOfCode-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/SimonBaars/adventOfCode-2019.svg)\n* [SizableShrimp/AdventOfCode2019](https://github.com/SizableShrimp/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/SizableShrimp/AdventOfCode2019.svg)\n* [agrison/advent-of-code-2019](https://github.com/agrison/advent-of-code-2019/) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/agrison/advent-of-code-2019.svg)\n* [giganova/advent-of-code-2019-java](https://github.com/giganova/advent-of-code-2019-java) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/giganova/advent-of-code-2019-java.svg)\n\n#### JavaScript\n\n*Solutions to AoC in JavaScript.*\n\n* [GigaNova/advent-of-code-2019](https://github.com/GigaNova/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/GigaNova/advent-of-code-2019.svg)\n* [Jedi-Fullstack-Avengers/AdventOfCode](https://github.com/Jedi-Fullstack-Avengers/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Jedi-Fullstack-Avengers/AdventOfCode.svg)\n* [MaxArt2501/advent-of-code-2019](https://github.com/MaxArt2501/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/MaxArt2501/advent-of-code-2019.svg)\n* [RaedsLab/advent-of-code](https://github.com/RaedsLab/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/RaedsLab/advent-of-code.svg)\n* [arnauddrain/advent-of-code-2019](https://github.com/arnauddrain/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/arnauddrain/advent-of-code-2019.svg)\n* [atme/advent-of-code](https://github.com/atme/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/atme/advent-of-code.svg)\n* [bureson/advent-of-code-2019](https://github.com/bureson/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/bureson/advent-of-code-2019.svg)\n* [chinesedfan/adventofcode](https://github.com/chinesedfan/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/chinesedfan/adventofcode.svg)\n* [countzero/advent_of_code](https://github.com/countzero/advent_of_code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/countzero/advent_of_code.svg)\n* [danieltrost/adventofcode-2019-solutions-js](https://github.com/danieltrost/adventofcode-2019-solutions-js) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/danieltrost/adventofcode-2019-solutions-js.svg)\n* [davidmargolin/Advent-Of-Code-2019](https://github.com/davidmargolin/Advent-Of-Code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davidmargolin/Advent-Of-Code-2019.svg)\n* [entibo/advent-of-code-golf-2019](https://github.com/entibo/advent-of-code-golf-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/entibo/advent-of-code-golf-2019.svg)\n* [gamma032steam/Advent-of-code](https://github.com/gamma032steam/Advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gamma032steam/Advent-of-code.svg)\n* [gavinhenderson/advent-of-code](https://github.com/gavinhenderson/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gavinhenderson/advent-of-code.svg)\n* [imsalahdev/adventofcode-2019](https://github.com/imsalahdev/adventofcode-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/imsalahdev/adventofcode-2019.svg)\n* [jackcutting/aoc2019](https://github.com/jackcutting/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jackcutting/aoc2019.svg)\n* [mdelerue/AdventOfCode](https://github.com/mdelerue/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mdelerue/AdventOfCode.svg)\n* [und3f/advent-of-code-2019](https://github.com/und3f/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/und3f/advent-of-code-2019.svg)\n* [vguerrerobosch/advent-of-code-2019](https://github.com/vguerrerobosch/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vguerrerobosch/advent-of-code-2019.svg)\n* [vuryss/aoc-2019](https://github.com/vuryss/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vuryss/aoc-2019.svg)\n\n#### Julia\n\n*Solutions to AoC in Julia.*\n\n* [gsoleilhac/aoc19.jl](https://github.com/gsoleilhac/aoc19.jl) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gsoleilhac/aoc19.jl.svg)\n* [kamilbeker/aoc2019.jl](https://github.com/kamilbeker/aoc2019.jl) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/kamilbeker/aoc2019.jl.svg)\n* [racinmat/advent_of_code_2019](https://github.com/racinmat/advent_of_code_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/racinmat/advent_of_code_2019.svg)\n\n#### Kotlin\n\n*Solutions to AoC in Kotlin.*\n\n* [0legg/adventofcode](https://github.com/0legg/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/0legg/adventofcode.svg)\n* [daafith/advent-of-code-2019](https://github.com/daafith/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/daafith/advent-of-code-2019.svg)\n* [ephemient/aoc2019#kt](https://github.com/ephemient/aoc2019/tree/kt) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ephemient/aoc2019/kt.svg)\n* [hughjdavey/aoc-2019](https://github.com/hughjdavey/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hughjdavey/aoc-2019.svg)\n* [jgoerner/aoc-2019](https://github.com/jgoerner/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jgoerner/aoc-2019.svg)\n* [jorispz/aoc-2019](https://github.com/jorispz/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jorispz/aoc-2019.svg)\n* [mew/aoc-2019](https://github.com/mew/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mew/aoc-2019.svg)\n\n#### LDPL\n\n*Solutions to AoC in LDPL.*\n\n* [Lartu/adventOfCode2019](https://github.com/Lartu/adventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Lartu/adventOfCode2019.svg)\n* [dgarroDC/advent-of-code-2019-ldpl](https://github.com/dgarroDC/advent-of-code-2019-ldpl) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dgarroDC/advent-of-code-2019-ldpl.svg)\n\n#### Nim\n\n*Solutions to AoC in Nim.*\n\n#### OCaml\n\n*Solutions to AoC in OCaml.*\n\n* [georgek42/AOC2019](https://github.com/georgek42/AOC2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/georgek42/AOC2019.svg)\n\n#### PHP\n\n*Solutions to AoC in PHP.*\n\n* [aran112000/Advent-of-Code-2019-PHP](https://github.com/aran112000/Advent-of-Code-2019-PHP) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/aran112000/Advent-of-Code-2019-PHP.svg)\n* [cbzink/advent-of-code-2019](https://github.com/cbzink/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/cbzink/advent-of-code-2019.svg)\n* [vuryss/aoc-2019](https://github.com/vuryss/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vuryss/aoc-2019.svg)\n\n#### Perl\n\n*Solutions to AoC in Perl.*\n\n* [kcaran/adventofcode2019](https://github.com/kcaran/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/kcaran/adventofcode2019.svg)\n* [lskatz/advent-of-code](https://github.com/lskatz/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/lskatz/advent-of-code.svg)\n\n#### Pony\n\n*Solutions to AoC in Pony.*\n\n#### PowerShell\n\n*Solutions to AoC in PowerShell.*\n\n* [Crucerio/adventofcode](https://github.com/Crucerio/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Crucerio/adventofcode.svg)\n* [martinkonopka/AdventOfCode2019](https://github.com/martinkonopka/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/martinkonopka/AdventOfCode2019.svg)\n\n#### Python\n\n*Solutions to AoC in Python.*\n\n* [0x8b/advent-of-code-2019](https://github.com/0x8b/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/0x8b/advent-of-code-2019.svg)\n* [Akumatic/Advent-of-Code](https://github.com/Akumatic/Advent-of-Code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Akumatic/Advent-of-Code.svg)\n* [BogDAAAMN/advent-of-code](https://github.com/BogDAAAMN/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/BogDAAAMN/advent-of-code.svg)\n* [Dementophobia/advent-of-code-2019](https://github.com/Dementophobia/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Dementophobia/advent-of-code-2019.svg)\n* [IFinners/advent-of-code](https://github.com/IFinners/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/IFinners/advent-of-code.svg)\n* [JasonCannon/advent-of-code-2019](https://github.com/JasonCannon/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/JasonCannon/advent-of-code-2019.svg)\n* [JesperDramsch/advent-of-code](https://github.com/JesperDramsch/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/JesperDramsch/advent-of-code.svg)\n* [Kurocon/AdventOfCode2019](https://github.com/Kurocon/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Kurocon/AdventOfCode2019.svg)\n* [Levivig/AdventOfCode2019](https://github.com/Levivig/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Levivig/AdventOfCode2019.svg)\n* [Miccowhy/adventofcode2019](https://github.com/Miccowhy/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Miccowhy/adventofcode2019.svg)\n* [PatMyron/advent-of-code](https://github.com/PatMyron/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/PatMyron/advent-of-code.svg)\n* [TristoKrempita/advent-of-code](https://github.com/TristoKrempita/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/TristoKrempita/advent-of-code.svg)\n* [a-red-christmas/aoc2019-ae](https://github.com/a-red-christmas/aoc2019-ae) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/a-red-christmas/aoc2019-ae.svg)\n* [elvinyhlee/advent-of-code-2019-python](https://github.com/elvinyhlee/advent-of-code-2019-python) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/elvinyhlee/advent-of-code-2019-python.svg)\n* [ephemient/aoc2019#py](https://github.com/ephemient/aoc2019/tree/py) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ephemient/aoc2019/py.svg)\n* [gbusch/AdventOfCode](https://github.com/gbusch/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gbusch/AdventOfCode.svg)\n* [juffalow/advent-of-code](https://github.com/juffalow/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/juffalow/advent-of-code.svg)\n* [mebeim/aoc](https://github.com/mebeim/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mebeim/aoc.svg)\n* [metzbernhard/aoc2019](https://github.com/metzbernhard/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/metzbernhard/aoc2019.svg)\n* [mevdschee/AdventOfCode2019](https://github.com/mevdschee/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mevdschee/AdventOfCode2019.svg)\n* [mpindaro/advent-of-code-2019](https://bitbucket.org/mpindaro/advent-of-code-2019/src/master/)\n* [polhec42/AOC](https://github.com/polhec42/AOC) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/polhec42/AOC.svg)\n* [r0f1/adventofcode2019](https://github.com/r0f1/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/r0f1/adventofcode2019.svg)\n* [ste001/advent-of-code-2019](https://github.com/ste001/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ste001/advent-of-code-2019.svg)\n* [vincent-vega/adventofcode](https://github.com/vincent-vega/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vincent-vega/adventofcode.svg)\n* [visini/aoc2019](https://github.com/visini/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/visini/aoc2019.svg)\n* [zenieldanaku/AdventOfCode](https://github.com/zenieldanaku/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/zenieldanaku/AdventOfCode.svg)\n* [dmies/adventOfCode](https://github.com/dmies/adventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dmies/adventOfCode.svg)\n\n#### R\n\n*Solutions to AoC in R.*\n\n* [Cattiva/adventofcode](https://github.com/Cattiva/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Cattiva/adventofcode.svg)\n* [EdwinTh/AoC_2019](https://github.com/EdwinTh/AoC_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/EdwinTh/AoC_2019.svg)\n* [Morawski21/Advent-of-Code-2019-in-R](https://github.com/Morawski21/Advent-of-Code-2019-in-R) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Morawski21/Advent-of-Code-2019-in-R.svg)\n* [adam-gruer/aoc2019](https://github.com/adam-gruer/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/adam-gruer/aoc2019.svg)\n* [akulumbeg/adventofcode](https://github.com/akulumbeg/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/akulumbeg/adventofcode.svg)\n* [davidmasp/adventofcode-dmp](https://github.com/davidmasp/adventofcode-dmp) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davidmasp/adventofcode-dmp.svg)\n* [mpjdem/adventofcode2019](https://github.com/mpjdem/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mpjdem/adventofcode2019.svg)\n* [riinuots/advent2019](https://github.com/riinuots/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/riinuots/advent2019.svg)\n* [plannapus/AdventOfCode2019](https://github.com/plannapus/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/plannapus/AdventOfCode2019.svg)\n\n#### Racket\n\n*Solutions to AoC in Racket.*\n\n* [samdphillips/aoc-2019](https://github.com/samdphillips/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/samdphillips/aoc-2019.svg)\n\n#### ReasonML\n\n*Solutions to AoC in ReasonML.*\n\n* [believer/advent-of-code](https://github.com/believer/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/believer/advent-of-code.svg)\n\n#### Red\n\n*Solutions to AoC in Red.*\n\n#### Ruby\n\n*Solutions to AoC in Ruby.*\n\n* [Kazhuu/advent-of-code-2019](https://github.com/Kazhuu/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Kazhuu/advent-of-code-2019.svg)\n* [Keirua/adventofcode-rb](https://github.com/Keirua/adventofcode-rb) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Keirua/adventofcode-rb.svg)\n* [Pungsnigel/advent_of_code_2019](https://github.com/Pungsnigel/advent_of_code_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Pungsnigel/advent_of_code_2019.svg)\n\n#### Rust\n\n*Solutions to AoC in Rust.*\n\n* [AlexAegis/advent-of-code](https://github.com/AlexAegis/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AlexAegis/advent-of-code.svg)\n* [AmauryCarrade/AdventOfCode2019](https://github.com/AmauryCarrade/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AmauryCarrade/AdventOfCode2019.svg)\n* [DarthGandalf/advent-of-code](https://github.com/DarthGandalf/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/DarthGandalf/advent-of-code.svg)\n* [alyti/aoc-2019](https://github.com/alyti/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/alyti/aoc-2019.svg)\n* [dashed/advent-of-code](https://github.com/dashed/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dashed/advent-of-code.svg)\n* [fornwall/advent-of-code-2019-rs](https://github.com/fornwall/advent-of-code-2019-rs) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fornwall/advent-of-code-2019-rs.svg)\n* [hashedone/advent-of-code-2019-rust](https://github.com/hashedone/advent-of-code-2019-rust) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hashedone/advent-of-code-2019-rust.svg)\n* [jdlambert/advent-of-code-2019](https://github.com/jdlambert/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jdlambert/advent-of-code-2019.svg)\n* [meyerphi/advent-of-code](https://github.com/meyerphi/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/meyerphi/advent-of-code.svg)\n* [notviri/aoc2019](https://github.com/notviri/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/notviri/aoc2019.svg)\n* [timvisee/advent-of-code-2019](https://github.com/timvisee/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/timvisee/advent-of-code-2019.svg)\n\n#### Smalltalk\n\n*Solutions to AoC in Smalltalk.*\n\n* [thiagoslino/Advent-of-Code-2019](https://github.com/thiagoslino/Advent-of-Code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/thiagoslino/Advent-of-Code-2019.svg)\n\n#### Scala\n\n*Solutions to AoC in Scala.*\n\n* [FlorianCassayre/AdventOfCode-2019](https://github.com/FlorianCassayre/AdventOfCode-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/FlorianCassayre/AdventOfCode-2019.svg)\n* [lupari/aoc](https://github.com/lupari/aoc2019/) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/lupari/aoc2019.svg)\n* [matelaszlo/advent-of-code-scala](https://github.com/matelaszlo/advent-of-code-scala) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/matelaszlo/advent-of-code-scala.svg)\n* [sim642/adventofcode](https://github.com/sim642/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sim642/adventofcode.svg)\n\n#### Scheme\n\n*Solutions to AoC in Scheme.*\n\n* [jitwit/aoc](https://github.com/jitwit/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jitwit/aoc.svg)\n* [nenadom/AdventOfCode](https://github.com/nenadom/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/nenadom/AdventOfCode.svg)\n\n#### Swift\n\n*Solutions to AoC in Swift.*\n\n* [davedelong/AOC](https://github.com/davedelong/AOC) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davedelong/AOC.svg)\n* [evilmint/AdventOfCode](https://github.com/evilmint/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/evilmint/AdventOfCode.svg)\n* [fguchelaar/AdventOfCode2019](https://github.com/fguchelaar/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fguchelaar/AdventOfCode2019.svg)\n* [gernb/AdventOfCode2019](https://github.com/gernb/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gernb/AdventOfCode2019.svg)\n\n#### TypeScript\n\n*Solutions to AoC in TypeScript.*\n\n* [AlexAegis/advent-of-code](https://github.com/AlexAegis/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AlexAegis/advent-of-code.svg)\n* [caderek/aoc2019](https://github.com/caderek/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/caderek/aoc2019.svg)\n* [florianfreier/AdventOfCode2019](https://github.com/florianfreier/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/florianfreier/AdventOfCode2019.svg)\n* [izexi/adventofcode2019](https://github.com/izexi/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/izexi/adventofcode2019.svg)\n\n#### Zig\n\n*Solutions to AoC in Zig.*\n\n### Live Streams\n\n*Folks who are live streaming their process.*\n"}, {"author": "BurntSushi", "repo": "BurntSushi/advent-of-code", "language": "Rust", "language_all": {"Rust": 150154, "Shell": 278}, "readme_contents": "BurntSushi's 2018 Advent of Code solutions\n==========================================\n\nI chose to write this year's solutions in Rust. I don't have any particularly\nambitious goals, but I am trying to write the solutions using idiomatic code.\nIn particular, it should not be possible for any input to cause one of the\nsolutions to panic.\n\nI have not spent any time benchmarking the code.\n\nTo run a solution, `cd` into its directory and invoke the program with Cargo:\n\n```\n$ cd aoc01\n$ cargo run --release < input/input.txt\n```\n\nIf you have questions about the code, please open an issue and ask away!\nBeginner questions are very much welcome.\n"}, {"author": "Lysxia", "repo": "Lysxia/advent-of-coq-2018", "language": "Coq", "language_all": {"Coq": 116725, "Makefile": 2089}, "readme_contents": "Advent of Code 2018 in Coq\n==========================\n\nThis repository contains solutions for the Advent of Code 2018\n(https://adventofcode.com/2018). Some of them are formally verified.\nThis is an example of applying verification to small programming\nchallenges of that kind.\n(If you're aiming for prizes, this is probably not the way to go.)\n\nContributions welcome\n---------------------\n\nIt will probably take much longer than the actual span of the AoC to\ncomplete this project, so any help implementing, specifying, or verifying\nsolutions is welcome. If you have any questions, open an issue or send\nme an email (lysxia@gmail.com).\n\n### Suggested tasks\n\n- `day02_2.v`, `day03_2.v` are bare of any verification effort.\n\n- Implement Day 6 (Manhattan geometry).\n\nProject status\n--------------\n\nAs of December 2, the two solutions of Day 1's challenge are\nverified (significant caveats apply).\n\nRead more about my approach in [`SUMMARY.md`](./SUMMARY.md).\n\nDependencies\n------------\n\n- [coq-simple-io](https://github.com/Lysxia/coq-simple-io), master\n\n    This project serves to test coq-simple-io and see what is missing to\n    make it practical to write executable programs in Coq.\n\n- [coq-ext-lib](https://github.com/coq-ext-lib/coq-ext-lib), 0.10\n\n- [Coq](https://coq.inria.fr/), 8.8.2\n\n- [OCaml](https://ocaml.org), 4.07.0\n\nOlder versions of these are likely to work.\n\n### Optional dependency\n\n- [coq-itree](https://github.com/DeepSpec/InteractionTrees), master.\n  A library of free monads and algebraic effects (WIP).\n\nExperimental proofs using `itree` instead of `io_rel` can be found in\nfiles `sol/day*_*_extra.v`.\n\nTo install coq-itree with opam and make it known to advent-of-coq:\n\n```sh\ngit clone https://github.com/DeepSpec/InteractionTrees\nopam pin add coq-itree ./InteractionTrees\n\n# Inside advent-of-coq-2018, create a symbolic link _CoqConfig.append\n# to _CoqConfig.extras\n# The -f option overwrites any existing _CoqConfig.append\nln -sf _CoqConfig.extras _CoqConfig.append\n\n# (Re)generate _CoqProject and compile lib.itree\nmake lib\n```\n\nInstall the development version of coq-simple-io with opam\n----------------------------------------------------------\n\n```sh\n# Get the source\ngit clone https://github.com/Lysxia/coq-simple-io\n\n# Register the local version of coq-simple-io with opam\nopam pin add -k git coq-simple-io ./coq-simple-io\n\n# When coq-simple-io is updated\ncd coq-simple-io && git pull coq-simple-io\nopam reinstall coq-simple-io\n```\n\nBuild\n-----\n\nTo compile and run `day01_1.v` for example:\n\n```sh\nmake exe/day01_1\n./exe/day01_1 < txt/day01\n```\n"}, {"author": "fogleman", "repo": "fogleman/AdventOfCode2018", "language": "Python", "language_all": {"Python": 34960, "Go": 2071}, "readme_contents": "# Advent of Code 2018\n\nMy solutions to the Advent of Code 2018 problems.\n\nCheck out the blog post, which explains how the solutions work and includes more comments in the code:\n\nhttps://www.michaelfogleman.com/aoc18/\n\nRun the solutions like so:\n\n    $ python 1.py 1.txt\n"}, {"author": "mstksg", "repo": "mstksg/advent-of-code-2018", "language": "Haskell", "language_all": {"Haskell": 169724}, "readme_contents": "Advent of Code 2018\n===================\n\n*[2016][]* / *[2017][]* / *2018* / *[2019][]*\n\n[2016]: https://github.com/mstksg/advent-of-code-2016\n[2017]: https://github.com/mstksg/advent-of-code-2017\n[2019]: https://github.com/mstksg/advent-of-code-2019\n\nIt's the most wonderful time of the year!\n\nMy [Advent of Code 2018][aoc2018] Haskell solutions here, along with an automated\nfetching, testing, running environment (powered by the\n*[advent-of-code-api][]* library).  The interactive development environment and\nrunner/bench marker/viewer/tester has been pulled out [here][dev], so this is\nimplemented as \"fork\" of it with my own solutions and reflections.\n\nCheck out reflections and commentary at the [package haddocks][haddock]!\n(individual links down below)\n\n[aoc2018]: https://adventofcode.com/2018\n[haddock]: https://mstksg.github.io/advent-of-code-2018/\n[advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api\n[dev]: https://github.com/mstksg/advent-of-code-dev\n\n[Reflections and Benchmarks][reflections]\n-----------------------------------------\n\n*   **[Day 1 Reflections][d01r]** *[code][d01g]* / *[rendered][d01h]* / *[benchmarks][d01b]*\n*   **[Day 2 Reflections][d02r]** *[code][d02g]* / *[rendered][d02h]* / *[benchmarks][d02b]*\n*   **[Day 3 Reflections][d03r]** *[code][d03g]* / *[rendered][d03h]* / *[benchmarks][d03b]*\n*   **[Day 4 Reflections][d04r]** *[code][d04g]* / *[rendered][d04h]* / *[benchmarks][d04b]*\n*   **[Day 5 Reflections][d05r]** *[code][d05g]* / *[rendered][d05h]* / *[benchmarks][d05b]*\n*   **[Day 6 Reflections][d06r]** *[code][d06g]* / *[rendered][d06h]* / *[benchmarks][d06b]*\n*   **[Day 7 Reflections][d07r]** *[code][d07g]* / *[rendered][d07h]* / *[benchmarks][d07b]*\n*   **[Day 8 Reflections][d08r]** *[code][d08g]* / *[rendered][d08h]* / *[benchmarks][d08b]*\n*   **[Day 9 Reflections][d09r]** *[code][d09g]* / *[rendered][d09h]* / *[benchmarks][d09b]*\n*   **[Day 10 Reflections][d10r]** *[code][d10g]* / *[rendered][d10h]* / *[benchmarks][d10b]*\n*   **[Day 11 Reflections][d11r]** *[code][d11g]* / *[rendered][d11h]* / *[benchmarks][d11b]*\n*   **[Day 12 Reflections][d12r]** *[code][d12g]* / *[rendered][d12h]* / *[benchmarks][d12b]*\n*   **[Day 13 Reflections][d13r]** *[code][d13g]* / *[rendered][d13h]* / *[benchmarks][d13b]*\n*   **[Day 14 Reflections][d14r]** *[code][d14g]* / *[rendered][d14h]*\n*   **Day 15 Reflections** *[code][d15g]* / *[rendered][d15h]*\n*   **[Day 16 Reflections][d16r]** *[code][d16g]* / *[rendered][d16h]* / *[benchmarks][d16b]*\n*   **Day 17 Reflections** *[code][d17g]* / *[rendered][d17h]*\n*   **Day 18 Reflections** *[code][d18g]* / *[rendered][d18h]*\n*   **Day 19 Reflections** *[code][d19g]* / *[rendered][d19h]*\n*   **[Day 20 Reflections][d20r]** *[code][d20g]* / *[rendered][d20h]* / *[benchmarks][d20b]*\n*   **Day 21 Reflections** *[code][d21g]* / *[rendered][d21h]*\n*   **Day 22 Reflections** *[code][d22g]* / *[rendered][d22h]*\n*   **Day 23 Reflections** *[code][d23g]* / *[rendered][d23h]*\n*   **Day 24 Reflections** *[code][d24g]* / *[rendered][d24h]*\n\n\"Rendered\" links go to haddock source renders for code, with reflections in the\ndocumentation.  Haddock source renders have hyperlinked identifiers,\nso you can follow any unrecognized identifiers to see where I have defined them\nin the library.\n\n[reflections]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md\n\n### `:~>` type\n\nIf you're looking at my actual github solutions, you'll notice thattThis year\nI'm implementing my solutions in terms of a `:~>` record type:\n\n```haskell\ndata a :~> b = MkSol\n    { sParse :: String -> Maybe a    -- ^ parse input into an `a`\n    , sSolve :: a      -> Maybe b    -- ^ solve an `a` input to a `b` solution\n    , sShow  :: b      -> String     -- ^ print out the `b` solution for submission\n    }\n```\n\nAn `a :~> b` is a solution to a challenge expecting input of type `a` and\nproducing answers of type `b`.  It also packs in functions to parse a `String`\ninto an `a`, and functions to show a `b` as a `String` to submit as an answer.\n\nThis helps me mentally separate out parsing, solving, and showing, allowing for\nsome cleaner code and an easier time planning my solution.\n\nSuch a challenge can be \"run\" on string inputs by feeding the string into\n`sParse`, then `sSolve`, then `sShow`:\n\n```haskell\n-- | Run a ':~>' on some input, retuning 'Maybe'\nrunSolution :: Challenge -> String -> Maybe String\nrunSolution MkSol{..} s = do\n    x <- sParse s\n    y <- sSolve x\n    pure $ sShow y\n```\n\nIn the actual library, I have `runSolution` return an `Either` so I can debug\nwhich stage the error happened in.\n\nYou might also notice the function `dyno_`, used like `dyno_ \"limit\" 10000`.  This\nis how I implement parameters in problems that vary between test data and\nactual input.  For example, Day 6 involved finding points that had a total\ndistance of less than 10000, but for the test input, we found the points that\nhad a total distance of less than 32.  So, I have a system that lets me write\n`dyno_ \"limit\" 10000` in my code instead of hard-coding in `10000`.  This\n`10000` would be replaced by `32` when running with test data (which is parsed\nfrom [this file][7btest])\n\n[7btest]: https://github.com/mstksg/advent-of-code-2018/blob/master/test-data/06b.txt\n\nInteractive\n-----------\n\nThe *[AOC2018.Run.Interactive][interactive]* module has code (powered by\n*[advent-of-code-api][]*) for testing your solutions and submitting within\nGHCI, so you don't have to re-compile. If you edit your solution programs, they\nare automatically updated when you hit `:r` in ghci.\n\n[interactive]: https://mstksg.github.io/advent-of-code-2018/AOC2018-Run-Interactive.html\n\n```haskell\nghci> execSolution_   $ mkCS 2 'a'  -- get answer for challenge based on solution\nghci> testSolution_   $ mkCS 2 'a'  -- run solution against test suite\nghci> viewPrompt_     $ mkCS 2 'a'  -- view the prompt for a part\nghci> waitForPrompt_  $ mkCS 2 'a'  -- count down to the prompt for a part\nghci> submitSolution_ $ mkCS 2 'a'  -- submit a solution\n```\n\nThese are loaded with session key stored in the configuration file (see next\nsection).\n\nExecutable\n----------\n\nComes with test examples given in problems.\n\nYou can install using `stack`:\n\n```bash\n$ git clone https://github.com/mstksg/advent-of-code-2018\n$ cd advent-of-code-2018\n$ stack setup\n$ stack install\n```\n\nThe executable `aoc2018` includes a testing and benchmark suite, as well as a\nway to view prompts within the command line:\n\n```\n$ aoc2018 --help\naoc2018 - Advent of Code 2018 challenge runner\n\nUsage: aoc2018 [-c|--config PATH] COMMAND\n  Run challenges from Advent of Code 2018. Available days: 1, 2, 3 (..)\n\nAvailable options:\n  -c,--config PATH         Path to configuration file (default: aoc-conf.yaml)\n  -h,--help                Show this help text\n\nAvailable commands:\n  run                      Run, test, and benchmark challenges\n  view                     View a prompt for a given challenge\n  submit                   Test and submit answers for challenges\n  test                     Alias for run --test\n  bench                    Alias for run --bench\n  countdown                Alias for view --countdown\n\n$ aoc2018 run 3 b\n>> Day 03b\n>> [\u2713] 243\n```\n\nYou can supply input via stdin with `--stdin`:\n\n```\n$ aoc2018 run 1 --stdin\n>> Day 01a\n+1\n+2\n+1\n-3\n<Ctrl+D>\n[?] 1\n>> Day 01b\n[?] 1\n```\n\nBenchmarking is implemented using *criterion*\n\n```\n$ aoc2018 bench 2\n>> Day 02a\nbenchmarking...\ntime                 1.317 ms   (1.271 ms .. 1.392 ms)\n                     0.982 R\u00b2   (0.966 R\u00b2 .. 0.999 R\u00b2)\nmean                 1.324 ms   (1.298 ms .. 1.373 ms)\nstd dev              115.5 \u03bcs   (77.34 \u03bcs .. 189.0 \u03bcs)\nvariance introduced by outliers: 65% (severely inflated)\n\n>> Day 02b\nbenchmarking...\ntime                 69.61 ms   (68.29 ms .. 72.09 ms)\n                     0.998 R\u00b2   (0.996 R\u00b2 .. 1.000 R\u00b2)\nmean                 69.08 ms   (68.47 ms .. 69.99 ms)\nstd dev              1.327 ms   (840.8 \u03bcs .. 1.835 ms)\n```\n\nTest suites run the example problems given in the puzzle description, and\noutputs are colorized in ANSI terminals.\n\n```\n$ aoc2018 test 1\n>> Day 01a\n[\u2713] (3)\n[\u2713] (3)\n[\u2713] (0)\n[\u2713] (-6)\n[\u2713] Passed 4 out of 4 test(s)\n[\u2713] 416\n>> Day 01b\n[\u2713] (2)\n[\u2713] (0)\n[\u2713] (10)\n[\u2713] (5)\n[\u2713] (14)\n[\u2713] Passed 5 out of 5 test(s)\n[\u2713] 56752\n```\n\nThis should only work if you're running `aoc2018` in the project directory.\n\n**To run on actual inputs**, the executable expects inputs to be found in the\nfolder `data/XX.txt` in the directory you are running in.  That is, the input\nfor Day 7 will be expected at `data/07.txt`.\n\n*aoc2018 will download missing input files*, but requires a session token.\nThis can be provided in `aoc-conf.yaml`:\n\n```yaml\nsession:  [[ session token goes here ]]\n```\n\nSession keys are also required to download \"Part 2\" prompts for each challenge.\n\nYou can \"lock in\" your current answers (telling the executable that those are\nthe correct answers) by passing in `--lock`.  This will lock in any final\npuzzle solutions encountered as the verified official answers.  Later, if you\nedit or modify your solutions, they will be checked on the locked-in answers.\n\nThese are stored in `data/ans/XXpart.txt`.  That is, the target output for Day 7\n(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually\nedit these files.\n\nYou can view prompts: (use `--countdown` to count down until a prompt is\nreleased, and display immediately)\n\n```\n$ aoc2018 view 3 b\n>> Day 03b\n--- Part Two ---\n----------------\n\nAmidst the chaos, you notice that exactly one claim doesn't overlap by\neven a single square inch of fabric with any other claim. If you can\nsomehow draw attention to it, maybe the Elves will be able to make\nSanta's suit after all!\n\nFor example, in the claims above, only claim `3` is intact after all\nclaims are made.\n\n*What is the ID of the only claim that doesn't overlap?*\n```\n\nYou can also submit answers:\n\n```\n$ aoc2018 submit 1 a\n```\n\nSubmissions will automatically run the test suite.  If any tests fail, you will\nbe asked to confirm submission or else abort.  The submit command will output\nthe result of your submission: The message from the AoC website, and whether or\nnot your answer was correct (or invalid or ignored).  Answers that are\nconfirmed correct will be locked in and saved for future testing against, in\ncase you change your solution.\n\nAll networking features are powered by *[advent-of-code-api][]*.\n\n[d01g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day01.hs\n[d01h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day01.html\n[d01r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-1\n[d01b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-1-benchmarks\n\n[d02g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day02.hs\n[d02h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day02.html\n[d02r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-2\n[d02b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-2-benchmarks\n\n[d03g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day03.hs\n[d03h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day03.html\n[d03r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-3\n[d03b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-3-benchmarks\n\n[d04g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day04.hs\n[d04h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day04.html\n[d04r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-4\n[d04b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-4-benchmarks\n\n[d05g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day05.hs\n[d05h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day05.html\n[d05r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-5\n[d05b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-5-benchmarks\n\n[d06g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day06.hs\n[d06h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day06.html\n[d06r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-6\n[d06b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-6-benchmarks\n\n[d07g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day07.hs\n[d07h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day07.html\n[d07r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-7\n[d07b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-7-benchmarks\n\n[d08g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day08.hs\n[d08h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day08.html\n[d08r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-8\n[d08b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-8-benchmarks\n\n[d09g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day09.hs\n[d09h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day09.html\n[d09r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-9\n[d09b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-9-benchmarks\n\n[d10g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day10.hs\n[d10h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day10.html\n[d10r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-10\n[d10b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-10-benchmarks\n\n[d11g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day11.hs\n[d11h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day11.html\n[d11r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-11\n[d11b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-11-benchmarks\n\n[d12g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day12.hs\n[d12h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day12.html\n[d12r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-12\n[d12b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-12-benchmarks\n\n[d13g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day13.hs\n[d13h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day13.html\n[d13r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-13\n[d13b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-13-benchmarks\n\n[d14g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day14.hs\n[d14h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day14.html\n[d14r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-14\n\n[d15g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day15.hs\n[d15h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day15.html\n\n[d16g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day16.hs\n[d16h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day16.html\n[d16r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-16\n[d16b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-16-benchmarks\n\n[d17g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day17.hs\n[d17h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day17.html\n\n[d18g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day18.hs\n[d18h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day18.html\n\n[d19g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day19.hs\n[d19h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day19.html\n\n[d20g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day20.hs\n[d20h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day20.html\n[d20r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-20\n[d20b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-20-benchmarks\n\n[d21g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day21.hs\n[d21h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day21.html\n\n[d22g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day22.hs\n[d22h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day22.html\n\n[d23g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day23.hs\n[d23h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day23.html\n\n[d24g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day24.hs\n[d24h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day24.html\n"}, {"author": "Voltara", "repo": "Voltara/advent2018-fast", "language": "C++", "language_all": {"C++": 82428, "CMake": 751}, "readme_contents": "# advent2018-fast\n\n[Advent of Code 2018](http://adventofcode.com/2018/) optimized C++ solutions.\n\nHere are the timings from an example run on an i7-7700K CPU overclocked at 4.60 GHz.  The total is greater than the sum of the individual days because of rounding.\n\n    Day  1       72 \u03bcs\n    Day  2       27 \u03bcs\n    Day  3      205 \u03bcs\n    Day  4       82 \u03bcs\n    Day  5      414 \u03bcs\n    Day  6    1,346 \u03bcs\n    Day  7        3 \u03bcs\n    Day  8       62 \u03bcs\n    Day  9    4,385 \u03bcs\n    Day 10       21 \u03bcs\n    Day 11      485 \u03bcs\n    Day 12       61 \u03bcs\n    Day 13      642 \u03bcs\n    Day 14   19,067 \u03bcs\n    Day 15    2,132 \u03bcs\n    Day 16       80 \u03bcs\n    Day 17      544 \u03bcs\n    Day 18      307 \u03bcs\n    Day 19        2 \u03bcs\n    Day 20       92 \u03bcs\n    Day 21      101 \u03bcs\n    Day 22    3,546 \u03bcs\n    Day 23      383 \u03bcs\n    Day 24    6,711 \u03bcs\n    Day 25      177 \u03bcs\n    ------------------\n    Total    40,959 \u03bcs\n\nSolutions should work with any puzzle input, provided it is byte-for-byte an exact copy of the file downloaded from Advent of Code.  When an input is given as a number inline with the puzzle text (days 11 and 14), the input file should contain only the number itself followed by a single line feed character (ASCII 12).\n\nThis code makes extensive use of SIMD techniques and requires a CPU that supports the AVX2 instruction set.\n\n# Summary of solutions\n\nHere are a few brief notes about each solution.\n\n## Day 1\n\nSee [this post](https://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukxu5) on the subreddit.\n\n## Day 2\n\nEach 26-character word fits in a 32-byte AVX2 register, which allows for very fast comparisons.  Exploits regularities in the input to eliminate many candidate words from consideration.\n\n## Day 3\n\nRepresents a row of fabric as a 1024-bit mask (16 64-bit integers.)  Scans the fabric vertically one row at a time using a sweep-line algorithm, considering only those claims which intersect the current row, 20-25 claims on average.\n\n## Day 4\n\nSIMD solution that stores the 60 minutes of the hour in two 32x8 bit AVX2 vectors.\n\n## Day 5\n\nStraightforward stack-based solution.  Tried various ways to prune the Part 2 search, but the added bookkeeping outweighed the time saved.\n\n## Day 6\n\nPart 1 is a basic flood fill; part 2 is a sweep-line algorithm that traces the outline of the \"safe\" region.\n\n## Day 7\n\nA SIMD take on topological sorting.  The letters A-Z fit nicely within a 32x8 AVX2 vector.\n\n## Day 8\n\nStraightforward recursive solution.\n\n## Day 9\n\nA shuffle/permute heavy SIMD implementation of the marble game's rules, in 23-turn increments.  Only needs to fully simulate ~43% of the game; the score for the remainder of the game can be found by tallying up every 16th marble in the array.\n\n## Day 10\n\nCalculates Part 2 based on the fastest-moving particles in the y-direction.  The final position of each star is added to a bitmap of eight 64-bit integers (each letter is 6x10.)  The resulting values are converted to letters by hashtable lookup.\n\n## Day 11\n\nBuilds an integral image (summed area table) of the 300x300 area, and does so in a way that the compiler can vectorize.  Searching for the solutions is done via explicit SIMD.  Stops the search at \"6 sigmas\" of confidence.\n\n## Day 12\n\nLive/dead cells are stored as a bool vector, which C++ implements as a bitset.  Comparing the previous and current states is very fast; my input stabilizes at a vector length of 190, which is only 3 64-bit integers.  The rules are stored as a single 32-bit integer, and are evaluated by iterating over the current state with a 5-bit rolling window, which is used to index individual bits in the rules integer.\n\n## Day 13\n\nFairly straightforward simulation of the minecarts.\n\n## Day 14\n\nThis was the hardest puzzle to optimize.  The irregular write pattern limits the ability to vectorize the loop.  See [this post](https://www.reddit.com/r/adventofcode/comments/a6wpwa/2018_day_14_breaking_the_1_billion_recipes_per/) for a detailed description.\n\n## Day 15\n\nThe 32x32 map fits in four 256-bit AVX2 registers when treated as a bitmap.  This makes for quick pathfinding by bitwise flood fill.  The map is split into three 1024-bit overlays: open space, elves, and goblins.\n\n## Day 16\n\nMostly straightforward, using bit fields to keep track of which opcodes are valid for which instructions.\n\n## Day 17\n\nRecursively traces where the water flows.  I didn't spend much time trying to optimizing this; it is mostly just a copy/paste from my original solution repository.\n\n## Day 18\n\nA SIMD bonanza, even when \"parsing\" the input (which just does a SIMD bitwise AND with `0x11` on 32 input characters at a time to produce `0x00` for open space, `0x10` for trees, and `0x01` for lumberyards.)  This is actually a SIMD/SWAR hybrid, because the trees and lumberyards each occupy 4-bit fields within each 8-bit field of the 32-byte AVX2 register.\n\n## Day 19\n\nExecutes instructions until it reaches the main loop.  Uses wheel factorization to find the prime factors, which are used to compute the divisor sum.\n\n## Day 20\n\nExploits how the input was generated to solve both parts using a small stack of coordinate/distance and an even smaller cache of recently visited coordinates.\n\n## Day 21\n\nReads only one number from the input (the only one that matters), and uses it as input to an optimized SIMD version of the generator.  Uses Brent's cycle-detection algorithm to solve Part 2.\n\n## Day 22\n\nVery minimalistic A\\* using a 17-bucket priority queue.  Tool switching is done by bitwise arithmetic between tool and terrain.\n\n## Day 23\n\nSee [this discussion](https://www.reddit.com/r/adventofcode/comments/a9co1u/day_23_part_2_adversarial_input_for_recursive/ecmpxad) on the subreddit.\n\n## Day 24\n\nPredetermines which groups are valid targets of each other, keeping a separate list of targets that are weak to the attack type.  These lists are stored as bitmasks.  Avoids sorting the array of attackers each round; instead, when a group is damaged, it bubbles down the target-selection list (they rarely move more than 1-2 slots at a time, if any.)  Otherwise, this is just a straight simulation of the battles.\n\n## Day 25\n\nUnion-find algorithm, in cooperation with SIMD pairwise comparisons between each of the points.\n"}, {"author": "wimglenn", "repo": "wimglenn/advent-of-code-data", "language": "Python", "language_all": {"Python": 72056}, "readme_contents": "Advent of Code data\n===================\n\n|pyversions|_ |pypi|_ |womm|_ |travis|_ |coveralls|_\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/advent-of-code-data.svg\n.. _pyversions: \n\n.. |pypi| image:: https://img.shields.io/pypi/v/advent-of-code-data.svg\n.. _pypi: https://pypi.org/project/advent-of-code-data/\n\n.. |womm| image:: https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg\n.. _womm: https://github.com/nikku/works-on-my-machine\n\n.. |travis| image:: https://img.shields.io/travis/wimglenn/advent-of-code-data.svg?branch=master\n.. _travis: https://travis-ci.com/wimglenn/advent-of-code-data\n\n.. |coveralls| image:: https://coveralls.io/repos/github/wimglenn/advent-of-code-data/badge.svg?branch=master\n.. _coveralls: https://coveralls.io/github/wimglenn/advent-of-code-data?branch=master\n\n\nGet your puzzle data with a single import statement:\n\n.. code-block:: python\n\n   from aocd import data\n\nMight be useful for lazy Pythonistas and speedhackers.  \n\n**Note:  Please use version 0.3+ of this library.**  It memoizes successful\nrequests client side and rate-limits the get_data function, as\n`requested by the AoC author <https://www.reddit.com/r/adventofcode/comments/3v64sb/aoc_is_fragile_please_be_gentle/>`_.\nThanks!\n\n\nQuickstart\n----------\n\nInstall with pip\n\n.. code-block:: bash\n\n   pip install advent-of-code-data\n\n**Puzzle inputs differ by user.**   So export your session ID, for example:\n\n.. code-block:: bash\n\n   export AOC_SESSION=cafef00db01dfaceba5eba11deadbeef\n\nThis is a cookie which is set when you login to AoC.  You can find it with\nyour browser inspector.  If you're hacking on AoC at all you probably already\nknow these kind of tricks, but if you need help with that part then you can\n`look here <https://github.com/wimglenn/advent-of-code/issues/1>`_.\n\n*Note:* If you don't like the env var, you could also put into a text file\nin your home directory (use the filename ``~/.config/aocd/token``).\n\n\nAutomated submission\n--------------------\n\n*New in version 0.4.0.* Basic use:\n\n.. code-block:: python\n\n   from aocd import submit\n   submit(my_answer, part=\"a\", day=25, year=2017)\n\nNote that the same filename introspection of year/day also works for automated\nsubmission. There's also introspection of the \"level\", i.e. part a or part b,\naocd can automatically determine if you have already completed part a or not\nand submit your answer for the correct part accordingly. In this case, just use:\n\n.. code-block:: python\n\n   from aocd import submit\n   submit(my_answer)\n\nThe response message from AoC will be printed in the terminal. If you gave\nthe right answer, then the puzzle will be refreshed in your web browser\n(so you can read the instructions for the next part, for example).\n**Proceed with caution!** If you submit wrong guesses, your user **WILL**\nget rate-limited by Eric, so don't call submit until you're fairly confident\nyou have a correct answer!\n\n\nOOP-style interfaces\n--------------------\n\n*New in version 0.8.0.*\n\nInput data is via regular attribute access. Example usage:\n\n.. code-block:: python\n\n    >>> from aocd.models import Puzzle\n    >>> puzzle = Puzzle(year=2017, day=20)\n    >>> puzzle\n    <Puzzle(2017, 20) at 0x107322978 - Particle Swarm>\n    >>> puzzle.input_data\n    'p=<-1027,-979,-188>, v=<7,60,66>, a=<9,1,-7>\\np=<-1846,-1539,-1147>, v=<88,145,67>, a=<6,-5,2> ...\n\nSubmitting answers is also by regular attribute access. Any incorrect answers you submitted are remembered, and aocd will prevent you from attempting to submit the same incorrect value twice:\n\n.. code-block:: python\n\n    >>> puzzle.answer_a = 299\n    That's not the right answer; your answer is too high. If you're stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]\n    >>> puzzle.answer_a = 299\n    aocd will not submit that answer again. You've previously guessed 299 and the server responded:\n    That's not the right answer; your answer is too high. If you're stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]\n\nSolutions can be executed using `setuptools style plugins <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ for your code, i.e. the ``pkg_resources`` \"entry-points\". My entry-point name is \"wim\" so an example for running `my code <https://github.com/wimglenn/advent-of-code-wim/blob/master/setup.py#L30>`_ (after ``pip install advent-of-code-wim``) would be:\n\n.. code-block:: python\n\n    >>> puzzle = Puzzle(year=2018, day=10)\n    >>> puzzle.solve_for(\"wim\")\n    ('XLZAKBGZ', '10656')\n\n\nVerify your code against multiple different inputs\n--------------------------------------------------\n\n*New in version 0.8.0.*\n\nEver tried running your code against other people's inputs? AoC is full of tricky edge cases. You may find that sometimes you're only getting the right answer by luck, and your code will fail on some other dataset. Using aocd, you can collect a few different auth tokens for each of your accounts (github/google/reddit/twitter) and verify your answers across multiple datasets.\n\nTo see an example of how to setup the entry-point for your code, look at `advent-of-code-sample <https://github.com/wimglenn/advent-of-code-sample>`_ for some inspiration. After dumping a bunch of session tokens into ``~/.config/aocd/tokens.json`` you could do something like this by running the ``aoc`` console script:\n\n.. image:: https://user-images.githubusercontent.com/6615374/52138567-26e09f80-2613-11e9-8eaf-c42757bc9b86.png\n\nAs you can see above, I actually had incorrect code for `2017 Day 20: Particle Swarm <https://adventofcode.com/2017/day/20>`_, but that `bug <https://github.com/wimglenn/advent-of-code-wim/commit/31e454270001c6d06b46014fe5dafd03e29507b8>`_ only showed up for the google token's dataset. Whoops. Also, it looks like my algorithm for `2017 Day 13: Packet Scanners <https://adventofcode.com/2017/day/13>`_ was kinda garbage. Too slow. According to `AoC FAQ <https://adventofcode.com/about>`_:\n\n  *every problem has a solution that completes in at most 15 seconds on ten-year-old hardware*\n\nBy the way, the ``aoc`` runner will kill your code if it takes more than 60 seconds, you can increase/decrease this by passing a command-line option, e.g. ``--timeout=120``.\n\n\nHow does this library work?\n---------------------------\n\nIt will automatically get today's data at import time, if used within the \ninteractive interpreter.  Otherwise, the date is found by introspection of the\npath and file name from which ``aocd`` module was imported.  \n\nThis means your filenames should be something sensible. The examples below\nshould all parse correctly, because they have digits in the path that are\nunambiguously recognisable as AoC years (2015+) or days (1-25).\n\n.. code-block::\n\n   q03.py \n   xmas_problem_2016_25b_dawg.py\n   ~/src/aoc/2015/p8.py\n\nA filename like ``problem_one.py`` will not work, so don't do that.  If\nyou don't like weird frame hacks, just use the ``aocd.get_data()`` function \ninstead and have a nice day!\n\n.. code-block:: python\n\n   >>> from aocd import get_data\n   >>> get_data(day=2)\n   'UULDRRRDDLRLURUUURUURDRUURRDRRURUD...\n   >>> get_data(day=24, year=2015)\n   '1\\n2\\n3\\n7\\n11\\n13\\n17\\n19\\n23\\n31...\n\n\nCache invalidation?\n-------------------\n\n``aocd`` saves puzzle inputs, answers, names, and your bad guesses to avoid hitting\nthe AoC servers any more often than strictly necessary (this also speeds things up).\nAll data is persisted in plain text files under ``~/.config/aocd``. To remove any\ncaches, you may simply delete whatever files you want under that directory tree.\nIf you'd prefer to use a different path, then export an ``AOCD_DIR`` environment\nvariable with the desired location.\n"}, {"author": "ChrisPenner", "repo": "ChrisPenner/Advent-Of-Code-Polyglot", "language": "Python", "language_all": {"Python": 92590, "PHP": 54200, "C": 49087, "Erlang": 47206, "Perl": 42895, "Java": 41786, "Haskell": 41327, "Groovy": 29161, "C++": 25773, "Scala": 16815, "C#": 15792, "Rust": 14898, "Elixir": 12633, "Go": 10628, "Ruby": 5023, "Kotlin": 3291, "Awk": 1622}, "readme_contents": "Advent of Code\n==============\n\nThis is a collection of [Advent of Code](http://adventofcode.com/) solutions in\nmany different programming languages.\n\nFor the uninitiated, [Advent of Code](http://adventofcode.com/) is a series of\nprogramming challenges, a new one is released each day until Dec. 25th.\n\nEach challenge requires thinking in a different way to solve it, and for this\nreason it provides an interesting look at how programming languages approach\neach problem.\n\nYou'll notice that in any given situation, the idiomatic Python way of solving\nsomething will be very different from the Haskell or Lisp way of doing things.\n\nGuidelines\n----------\n\n-   Create a Pull Request for any contributions.\n-   Feel free to put your name or website in a comment at the top of your\n    solution if you like.\n-   I won't merge any solutions until a few days after each problem is released\n    to allow the dust to settle, don't rush in making your PR's, it's not first\n    come first merged.\n-   The goal of the project is to see the most idiomatic way to solve each\n    problem in a given language, for this reason I will keep only the solution\n    which I feel best encapsulates 'idiomatic' code of that language. (Or will\n    defer to the community in cases where it is unclear)\n-   Please don't include your problem's 'input.txt' or solution, as these are\n    different for each person.\n-   Please put each solution (part 1 and part 2) into separate files (even if\n    there's a bit of code duplication) it makes it easier to figure out what's\n    going on.\n-   Solutions should be easy to read (even for people who don't know the\n    programming language), so include comments explaining your solution and any\n    interesting\n-   programming language tricks/idioms you're using.\n-   In pull requests please follow the established pattern:\n-   `year/language-name/day-num/part#.extension`\n\nDon't get too competitive about it, someone else's solution may be accepted instead\nof yours, keep working at it and try to be as elegant and idiomatic as possible!\n\nRemember to have fun!!\n"}, {"author": "jaksi", "repo": "jaksi/advent-of-other-peoples-code", "language": "Python", "language_all": {"Python": 2040}, "readme_contents": "# Advent of Other People's Code\nFetches random solutions to a specified [Advent of Code](https://adventofcode.com/) puzzle from GitHub and runs them against your input\n![Grinch](grinch.png)\n## Usage\nLet me rephrase. This is going to get some random code from GitHub and run it on your machine. Don't use it.\n\n## Really tho\n### Create a virtualenv\n```sh\npython3 -m venv env\nsource env/bin/activate\n```\n\n### Install requirements\n```sh\npip install -r requirements.txt\n```\n\n### Genrate a GitHub personal access token\n[Right here](https://github.com/settings/tokens/new), with the `public_repo` scope.\n\n### Run it\nPlease, don't!\n\n### I said run it!\n```shellsession\n$ python advent.py --token $GITHUB_TOKEN --year 2018 --day 3 --input input.txt\nPatching open() to always return your input file\nSearching for repositories\nSearching for a solution in Karlovsky120/AdventOfCode2018\nSearching for a solution in grey-area/advent-of-code-2018\nSearching for a solution in stefsiekman/aoc2018\nSearching for a solution in BenSchomp/adventofcode2018\nSearching for a solution in speedyswimmer1000/AoC2018\nAbout to blindly run https://github.com/speedyswimmer1000/AoC2018/blob/master/day3.py.\nType yes if you think that's a good idea.\nHint: it's not.\nyes\nRunning it, stand back.\nIt raised an exception.\nSearching for a solution in zinh/advent-of-code-2018\nSearching for a solution in aaralh/AdventOfCode\nSearching for a solution in athas/advent_of_code_2018\nSearching for a solution in hawkjo/advent_of_code_2018\nSearching for a solution in Landmaj/AoC_2018\nSearching for a solution in paiv/aoc2018\nSearching for a solution in helenacruz/adventofcode2018\nSearching for a solution in StevTheDev/AoC2018\nSearching for a solution in zoeimogen/AoC2018\nSearching for a solution in awyd234/adventofcode\nSearching for a solution in muffinsofgreg/adventcode2018\nSearching for a solution in asberk/aoc18\nAbout to blindly run https://github.com/asberk/aoc18/blob/master/03.py.\nType yes if you think that's a good idea.\nHint: it's not.\nyes\nRunning it, stand back.\nIt raised an exception.\nSearching for a solution in coandco/advent2018\nSearching for a solution in ChrisDoubleEwe/AdventOfCode2018\nSearching for a solution in veeraita/advent_of_code_2018\nSearching for a solution in protocol7/advent-of-code-2018\nSearching for a solution in SpionSkummis/Advent-of-Code-2018\nAbout to blindly run https://github.com/SpionSkummis/Advent-of-Code-2018/blob/master/Erik/Day3.py.\nType yes if you think that's a good idea.\nHint: it's not.\nyes\nRunning it, stand back.\nThe number of squares cut more than once is: 119551\nThe non-overlapping square was found at nr 1124\nWas that the right answer?\nyes\n```\n"}, {"author": "molyswu", "repo": "molyswu/hand_detection", "language": "Python", "language_all": {"Python": 34169}, "readme_contents": "using Neural Networks (SSD) on Tensorflow.\n\nThis repo documents steps and scripts used to train a hand detector using Tensorflow (Object Detection API). As with any DNN based task, the most expensive (and riskiest) part of the process has to do with finding or creating the right (annotated) dataset. I was interested mainly in detecting hands on a table (egocentric view point). I experimented first with the [Oxford Hands Dataset](http://www.robots.ox.ac.uk/~vgg/data/hands/) (the results were not good). I then tried the [Egohands Dataset](http://vision.soic.indiana.edu/projects/egohands/) which was a much better fit to my requirements.\n\nThe goal of this repo/post is to demonstrate how neural networks can be applied to the (hard) problem of tracking hands (egocentric and other views). Better still, provide code that can be adapted to other uses cases.\n\nIf you use this tutorial or models in your research or project, please cite [this](#citing-this-tutorial).\n\nHere is the detector in action.\n\n<img src=\"images/hand1.gif\" width=\"33.3%\"><img src=\"images/hand2.gif\" width=\"33.3%\"><img src=\"images/hand3.gif\" width=\"33.3%\">\nRealtime detection on video stream from a webcam .\n\n<img src=\"images/chess1.gif\" width=\"33.3%\"><img src=\"images/chess2.gif\" width=\"33.3%\"><img src=\"images/chess3.gif\" width=\"33.3%\">\nDetection on a Youtube video.\n\nBoth examples above were run on a macbook pro **CPU** (i7, 2.5GHz, 16GB). Some fps numbers are:\n\n\n| FPS  | Image Size | Device| Comments|\n| ------------- | ------------- | ------------- | ------------- |\n| 21  | 320 * 240  | Macbook pro (i7, 2.5GHz, 16GB) | Run without visualizing results|\n| 16  | 320 * 240  | Macbook pro (i7, 2.5GHz, 16GB) | Run while visualizing results (image above) |\n| 11  | 640 * 480  | Macbook pro (i7, 2.5GHz, 16GB) | Run while visualizing results (image above) |\n\n> Note: The code in this repo is written and tested with Tensorflow `1.4.0-rc0`. Using a different version may result in [some errors](https://github.com/tensorflow/models/issues/1581).\nYou may need to [generate your own frozen model](https://pythonprogramming.net/testing-custom-object-detector-tensorflow-object-detection-api-tutorial/?completed=/training-custom-objects-tensorflow-object-detection-api-tutorial/) graph using the [model checkpoints](model-checkpoint) in the repo to fit your TF version.\n\n\n\n**Content of this document**\n- Motivation - Why Track/Detect hands with Neural Networks\n- Data preparation and network training in Tensorflow (Dataset, Import, Training)\n- Training the hand detection Model\n- Using the Detector to Detect/Track hands\n- Thoughts on Optimizations.\n\n> P.S if you are using or have used the models provided here, feel free to reach out on twitter ([@vykthur](https://twitter.com/vykthur)) and share your work!\n\n## Motivation - Why Track/Detect hands with Neural Networks?\n\nThere are several existing approaches to tracking hands in the computer vision domain. Incidentally, many of these approaches are rule based (e.g extracting background based on texture and boundary features, distinguishing between hands and background using color histograms and HOG classifiers,) making them not very robust. For example, these algorithms might get confused if the background is unusual or in situations where sharp changes in lighting conditions cause sharp changes in skin color or the tracked object becomes occluded.(see [here for a review](https://www.cse.unr.edu/~bebis/handposerev.pdf) paper on hand pose estimation from the HCI perspective)\n\nWith sufficiently large datasets, neural networks provide opportunity to train models that perform well and address challenges of existing object tracking/detection algorithms - varied/poor lighting, noisy environments, diverse viewpoints and even occlusion. The main drawbacks to usage for real-time tracking/detection is that they can be complex, are relatively slow compared to tracking-only algorithms and it can be quite expensive to assemble a good dataset. But things are changing with advances in fast neural networks.\n\nFurthermore, this entire area of work has been made more approachable by deep learning frameworks (such as the tensorflow object detection api) that simplify the process of training a model for custom object detection. More importantly, the advent of fast neural network models like ssd, faster r-cnn, rfcn (see [here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models-coco-models) ) etc make neural networks an attractive candidate for real-time detection (and tracking) applications. Hopefully, this repo demonstrates this.\n\n> If you are not interested in the process of training the detector, you can skip straight to applying the [pretrained model I provide in detecting hands](#detecting-hands).\n\nTraining a model is a multi-stage process (assembling dataset, cleaning, splitting into training/test partitions and generating an inference graph). While I lightly touch on the details of these parts, there are a few other tutorials cover training a custom object detector using the tensorflow object detection api in more detail[ see [here](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) and [here](https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9) ]. I recommend you walk through those if interested in training a custom object detector from scratch.\n\n## Data preparation and network training in Tensorflow (Dataset, Import, Training)\n\n**The Egohands Dataset**\n\nThe hand detector model is built using data from the [Egohands Dataset](http://vision.soic.indiana.edu/projects/egohands/) dataset. This dataset works well for several reasons. It contains high quality, pixel level annotations (>15000 ground truth labels) where hands are located across 4800 images. All images are captured from an egocentric view (Google glass) across 48 different environments (indoor, outdoor) and activities (playing cards, chess, jenga, solving puzzles etc).\n\n<img src=\"images/egohandstrain.jpg\" width=\"100%\">\n\nIf you will be using the Egohands dataset, you can cite them as follows:\n\n> Bambach, Sven, et al. \"Lending a hand: Detecting hands and recognizing activities in complex egocentric interactions.\" Proceedings of the IEEE International Conference on Computer Vision. 2015.\n\nThe Egohands dataset (zip file with labelled data) contains 48 folders of locations where video data was collected (100 images per folder).\n```\n-- LOCATION_X\n  -- frame_1.jpg\n  -- frame_2.jpg\n  ...\n  -- frame_100.jpg\n  -- polygons.mat  // contains annotations for all 100 images in current folder\n-- LOCATION_Y\n  -- frame_1.jpg\n  -- frame_2.jpg\n  ...\n  -- frame_100.jpg\n  -- polygons.mat  // contains annotations for all 100 images in current folder\n  ```\n\n**Converting data to Tensorflow Format**\n\nSome initial work needs to be done to the Egohands dataset to transform it into the format (`tfrecord`) which Tensorflow needs to train a model. This repo contains `egohands_dataset_clean.py` a script that will help you generate these csv files.\n\n- Downloads the egohands datasets\n- Renames all files to include their directory names to ensure each filename is unique\n- Splits the dataset into train (80%), test (10%) and eval (10%) folders.\n- Reads in `polygons.mat` for each folder, generates bounding boxes and visualizes them to ensure correctness (see image above).\n- Once the script is done running, you should have an images folder containing three folders - train, test and eval. Each of these folders should also contain a csv label document each - `train_labels.csv`, `test_labels.csv`  that can be used to generate `tfrecords`\n\nNote: While the egohands dataset provides four separate labels for hands (own left, own right, other left, and other right), for my purpose, I am only interested in the general `hand` class and label all training data as `hand`. You can modify the data prep script to generate `tfrecords` that support 4 labels.\n\nNext: convert your dataset + csv files to tfrecords. A helpful guide on this can be found [here](https://pythonprogramming.net/creating-tfrecord-files-tensorflow-object-detection-api-tutorial/).For each folder, you should be able to generate  `train.record`, `test.record` required in the training process.\n\n\n## Training the hand detection Model\n\nNow that the dataset has been assembled (and your tfrecords), the next task is to train a model based on this. With neural networks, it is possible to use a process called [transfer learning](https://www.tensorflow.org/tutorials/image_retraining) to shorten the amount of time needed to train the entire model. This means we can take an existing model (that has been trained well on a related domain (here image classification) and retrain its final layer(s) to detect hands for us. Sweet!. Given that neural networks sometimes have thousands or millions of parameters that can take weeks or months to train, transfer learning helps shorten training time to possibly hours. Tensorflow does offer a few models (in the tensorflow [model zoo](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models-coco-models)) and I chose to use the `ssd_mobilenet_v1_coco` model as my start point given it is currently (one of) the fastest models (read the SSD research [paper here](https://arxiv.org/pdf/1512.02325.pdf)). The training process can be done locally on your CPU machine which may take a while or better on a (cloud) GPU machine (which is what I did). For reference, training on my macbook pro (tensorflow compiled from source to take advantage of the mac's cpu architecture) the maximum speed I got was 5 seconds per step as opposed to the ~0.5 seconds per step I got with a GPU. For reference it would take about 12 days to run 200k steps on my mac (i7, 2.5GHz, 16GB) compared to ~5hrs on a GPU.\n\n> **Training on your own images**: Please use the [guide provided by Harrison from pythonprogramming](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) on how to generate tfrecords given your label csv files and your images. The guide also covers how to start the training process if training locally. [see [here] (https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/)]. If training in the cloud using a service like GCP, see the [guide here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_on_cloud.md).\n\nAs the training process progresses, the expectation is that total loss (errors) gets reduced to its possible minimum (about a value of 1 or thereabout). By observing the tensorboard graphs for total loss(see image below), it should be possible to get an idea of when the training process is complete (total loss does not decrease with further iterations/steps). I ran my training job for 200k steps (took about 5 hours) and stopped at a total Loss (errors) value of 2.575.(In retrospect, I could have stopped the training at about 50k steps and gotten a similar total loss value). With tensorflow, you can also run an evaluation concurrently that assesses your model to see how well it performs on the test data. A commonly used metric for performance is mean average precision (mAP) which is single number used to summarize the area under the precision-recall curve.  mAP is a measure of how well the model generates a bounding box that has at least a 50% overlap with the ground truth bounding box in our test dataset. For the hand detector trained here, the mAP value was **0.9686@0.5IOU**. mAP values range from 0-1, the higher the better.  \n\n\n<img src=\"images/accuracy.jpg\" width=\"100%\">\n\nOnce training is completed, the trained inference graph (`frozen_inference_graph.pb`) is then exported (see the earlier referenced guides for how to do this) and saved in the `hand_inference_graph` folder. Now its time to do some interesting detection.\n\n## Using the Detector to Detect/Track hands\n\n\nIf you have not done this yet, please following the guide on installing [Tensorflow and the Tensorflow object detection api](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md). This will walk you through setting up the tensorflow framework, cloning the tensorflow github repo and a guide on  \n\n- Load the `frozen_inference_graph.pb` trained on the hands dataset as well as the corresponding label map. In this repo, this is done in the `utils/detector_utils.py` script by the `load_inference_graph` method.\n  ```python\n  detection_graph = tf.Graph()\n    with detection_graph.as_default():\n        od_graph_def = tf.GraphDef()\n        with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:\n            serialized_graph = fid.read()\n            od_graph_def.ParseFromString(serialized_graph)\n            tf.import_graph_def(od_graph_def, name='')\n        sess = tf.Session(graph=detection_graph)\n    print(\">  ====== Hand Inference graph loaded.\")\n  ```\n- Detect hands. In this repo, this is done in the `utils/detector_utils.py` script by the `detect_objects` method.\n  ```python\n  (boxes, scores, classes, num) = sess.run(\n        [detection_boxes, detection_scores,\n            detection_classes, num_detections],\n        feed_dict={image_tensor: image_np_expanded})\n  ```\n- Visualize detected bounding detection_boxes. In this repo, this is done in the `utils/detector_utils.py` script by the `draw_box_on_image` method.\n\n\nThis repo contains two scripts that tie all these steps together.\n\n- detect_multi_threaded.py : A threaded implementation for reading camera video input detection and detecting. Takes a set of command line flags to set parameters such as `--display` (visualize detections), image parameters `--width` and `--height`, videe `--source` (0 for camera) etc.\n- detect_single_threaded.py : Same as above, but single threaded. This script works for video files by setting the video source parameter videe `--source` (path to a video file).\n\n\n```cmd\n  # load and run detection on video at path \"videos/chess.mov\"\n  python detect_single_threaded.py --source videos/chess.mov\n```\n\n> Update: If you do have errors loading the frozen inference graph in this repo, feel free to generate a new graph that fits your TF version from the model-checkpoint in this repo.\nUse the [export_inference_graph.py](https://github.com/tensorflow/models/blob/master/research/object_detection/export_inference_graph.py) script provided in the tensorflow object detection api repo.\nMore guidance on this [here](https://pythonprogramming.net/testing-custom-object-detector-tensorflow-object-detection-api-tutorial/?completed=/training-custom-objects-tensorflow-object-detection-api-tutorial/).\n\n## Thoughts on Optimization.\nA few things that led to noticeable performance increases.\n\n- Threading: Turns out that reading images from a webcam is a heavy I/O event and if run on the main application thread can slow down the program. I implemented some good ideas from [Adrian Rosebuck](https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/) on parrallelizing image capture across multiple worker threads. This mostly led to an FPS increase of about 5 points.\n- For those new to Opencv, images from the `cv2.read()` method return images in [BGR format](https://www.learnopencv.com/why-does-opencv-use-bgr-color-format/). Ensure you convert to RGB before detection (accuracy will be much reduced if you dont).\n```python\ncv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)\n```\n- Keeping your input image small will increase fps without any significant accuracy drop.(I used about 320 x 240 compared to the 1280 x 720 which my webcam provides).\n\n- Model Quantization. Moving from the current 32 bit to 8 bit can achieve up to 4x reduction in memory required to load and store models. One way to further speed up this model is to explore the use of [8-bit fixed point quantization](https://heartbeat.fritz.ai/8-bit-quantization-and-tensorflow-lite-speeding-up-mobile-inference-with-low-precision-a882dfcafbbd).\n\nPerformance can also be increased by a clever combination of tracking algorithms with the already decent detection and this is something I am still experimenting with. Have ideas for optimizing better, please share!\n\n<img src=\"images/general.jpg\" width=\"100%\">\nNote: The detector does reflect some limitations associated with the training set. This includes non-egocentric viewpoints, very noisy backgrounds (e.g in a sea of hands) and sometimes skin tone.  There is opportunity to improve these with additional data.\n\n\n## Integrating Multiple DNNs.\n\nOne way to make things more interesting is to integrate our new knowledge of where \"hands\" are with other detectors trained to recognize other objects. Unfortunately, while our hand detector can in fact detect hands, it cannot detect other objects (a factor or how it is trained). To create a detector that classifies multiple different objects would mean a long involved process of assembling datasets for each class and a lengthy training process.  \n\n> Given the above, a potential strategy is to explore structures that allow us **efficiently** interleave output form multiple pretrained models for various object classes and have them detect multiple objects on a single image.  \n\nAn example of this is with my primary use case where I am interested in understanding the position of objects on a table with respect to hands on same table. I am currently doing some work on a threaded application that loads multiple detectors and outputs bounding boxes on a single image. More on this soon.\n\n## Acknowledgements\n\nThis work also served as an intense weekend crash course for me to learn Python and Tensorflow. It would be impossible without the Egohands Dataset, many thanks to the authors! The tensorflow custom object detection guides by [Harrison from pythonprogramming](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) and [Dat Tran](https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9) were immensely helpful to this learning process. And ofcourse, many thanks to the Tensorflow authors! Its a great frameworks!\n\n\n\n\nIf you have created something cool, send me a note (or tweet) and I'll be happy to include it here!\n\n## Citing this tutorial\n\nIf you'd like to cite this work, use the below.\n\nVictor Dibia, Real-time Hand-Detection using Neural Networks (SSD) on Tensorflow, (2017), GitHub repository, https://github.com/victordibia/handtracking\n```bib\n"}, {"author": "mfikes", "repo": "mfikes/advent-of-code", "language": "Clojure", "language_all": {"Clojure": 60613}, "readme_contents": "# Advent of Code\n\n[Advent of Code](http://adventofcode.com) in Clojure and Self-Hosted ClojureScript.\n\n## Clojure\n\n```\nclj\n```\n\n## Self-Hosted ClojureScript\n\n```\nplk\n```\n"}, {"author": "dlew", "repo": "dlew/aoc-2017", "language": "Kotlin", "language_all": {"Kotlin": 21391}, "readme_contents": "# Advent of Code 2017\n\nHere's a blank template for working on the [Advent of Code (2017)](http://adventofcode.com/2017). It's got all the\ntests you could possibly want with the answers obscured. Just work your way through the puzzles until all the tests\npass!\n\nYou can find the puzzle questions [here](http://adventofcode.com/2017).\n\nYou can find my answers [here](https://github.com/dlew/aoc-2017/tree/answers). I make no claim to them being any good,\nonly that they arrive at the correct answer.\n\n[@danlew42](https://twitter.com/danlew42)\n"}, {"author": "mstksg", "repo": "mstksg/advent-of-code-2017", "language": "Haskell", "language_all": {"Haskell": 60017}, "readme_contents": "Advent of Code 2017\n===================\n\n*[2016][]* / *2017* / *[2018][]* / *[2019][]*\n\n[2016]: https://github.com/mstksg/advent-of-code-2016\n[2018]: https://github.com/mstksg/advent-of-code-2018\n[2019]: https://github.com/mstksg/advent-of-code-2019\n\n**Warning: Spoilers**\n\n[Reflections and Benchmarks][RnB]\n---------------------------------\n\n[RnB]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md\n\nI try to reflect on every day's puzzle, attempting to describe my thought\nprocesses and how my solutions all work.  Benchmarks also included.\n\n*   **[Day 1 Reflections][d1r]** *([code][d1c])* *([benchmarks][d1b])*\n*   **[Day 2 Reflections][d2r]** *([code][d2c])* *([benchmarks][d2b])*\n*   **[Day 3 Reflections][d3r]** *([code][d3c])* *([benchmarks][d3b])*\n*   **[Day 4 Reflections][d4r]** *([code][d4c])* *([benchmarks][d4b])*\n*   **[Day 5 Reflections][d5r]** *([code][d5c])* *([benchmarks][d5b])*\n*   **[Day 6 Reflections][d6r]** *([code][d6c])* *([benchmarks][d6b])*\n*   **[Day 7 Reflections][d7r]** *([code][d7c])* *([benchmarks][d7b])*\n*   **[Day 8 Reflections][d8r]** *([code][d8c])* *([benchmarks][d8b])*\n*   **[Day 9 Reflections][d9r]** *([code][d9c])* *([benchmarks][d9b])* *([stream][d9s])*\n*   **[Day 10 Reflections][d10r]** *([code][d10c])* *([benchmarks][d10b])* *([stream][d10s])*\n*   **[Day 11 Reflections][d11r]** *([code][d11c])* *([benchmarks][d11b])*\n*   **[Day 12 Reflections][d12r]** *([code][d12c])* *([benchmarks][d12b])*\n*   **[Day 13 Reflections][d13r]** *([code][d13c])* *([benchmarks][d13b])*\n*   **[Day 14 Reflections][d14r]** *([code][d14c])* *([benchmarks][d14b])*\n*   **[Day 15 Reflections][d15r]** *([code][d15c])* *([benchmarks][d15b])*\n*   **[Day 16 Reflections][d16r]** *([code][d16c])* *([benchmarks][d16b])*\n*   **[Day 17 Reflections][d17r]** *([code][d17c])* *([benchmarks][d17b])*\n*   **Day 18 Reflections** *([code][d18c])* *([benchmarks][d18b])*\n*   **[Day 19 Reflections][d19r]** *([code][d19c])* *([benchmarks][d19b])*\n*   **Day 20 Reflections** *([code][d20c])* *([benchmarks][d20b])*\n*   **Day 21 Reflections** *([code][d21c])* *([benchmarks][d21b])*\n*   **Day 22 Reflections** *([code][d22c])* *([benchmarks][d22b])*\n*   **Day 23 Reflections** *([code][d23c])* *([benchmarks][d23b])*\n*   **Day 24 Reflections** *([code][d24c])* *([benchmarks][d24b])*\n*   **Day 25 Reflections** *([code][d25c])* *([benchmarks][d25b])*\n\n[d1r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-1\n[d2r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-2\n[d3r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-3\n[d4r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-4\n[d5r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-5\n[d6r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-6\n[d7r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-7\n[d8r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-8\n[d9r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-9\n[d10r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-10\n[d11r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-11\n[d12r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-12\n[d13r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-13\n[d14r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-14\n[d15r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-15\n[d16r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-16\n[d17r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-17\n[d18r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-18\n[d19r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-19\n[d20r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-20\n[d21r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-21\n[d22r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-22\n[d23r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-23\n[d24r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-24\n[d25r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-25\n\n[d1c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day01.hs\n[d2c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day02.hs\n[d3c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day03.hs\n[d4c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day04.hs\n[d5c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day05.hs\n[d6c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day06.hs\n[d7c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day07.hs\n[d8c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day08.hs\n[d9c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day09.hs\n[d10c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day10.hs\n[d11c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day11.hs\n[d12c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day12.hs\n[d13c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day13.hs\n[d14c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day14.hs\n[d15c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day15.hs\n[d16c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day16.hs\n[d17c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day17.hs\n[d18c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day18.hs\n[d19c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day19.hs\n[d20c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day20.hs\n[d21c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day21.hs\n[d22c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day22.hs\n[d23c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day23.hs\n[d24c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day24.hs\n[d25c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day25.hs\n\n[d1b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-1-benchmarks\n[d2b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-2-benchmarks\n[d3b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-3-benchmarks\n[d4b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-4-benchmarks\n[d5b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-5-benchmarks\n[d6b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-6-benchmarks\n[d7b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-7-benchmarks\n[d8b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-8-benchmarks\n[d9b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-9-benchmarks\n[d10b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-10-benchmarks\n[d11b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-11-benchmarks\n[d12b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-12-benchmarks\n[d13b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-13-benchmarks\n[d14b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-14-benchmarks\n[d15b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-15-benchmarks\n[d16b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-16-benchmarks\n[d17b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-17-benchmarks\n[d18b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-18-benchmarks\n[d19b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-19-benchmarks\n[d20b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-20-benchmarks\n[d21b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-21-benchmarks\n[d22b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-22-benchmarks\n[d23b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-23-benchmarks\n[d24b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-24-benchmarks\n[d25b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-25-benchmarks\n\n[d9s]: https://www.twitch.tv/videos/207969022\n[d10s]: https://www.twitch.tv/videos/208287550\n\nExecutable\n----------\n\nComes with test examples given in problems.\n\nYou can install using `stack`:\n\n```bash\n$ git clone https://github.com/mstksg/advent-of-code-2017\n$ cd advent-of-code-2017\n$ stack setup\n$ stack install\n```\n\nThe executable `aoc2017` includes a testing and benchmark suite\n\n```\n$ aoc2017 --help\naoc2017 - Advent of Code 2017 challenge runner\n\nUsage: aoc2017 DAY [PART] [-t|--tests] [-b|--bench]\n  Run challenges from Advent of Code 2017\n\nAvailable options:\n  DAY                      Day of challenge (1 - 25), or \"all\"\n  PART                     Challenge part (a, b, c, etc.)\n  -t,--tests               Run sample tests\n  -b,--bench               Run benchmarks\n  -h,--help                Show this help text\n\n$ aoc2017 5 b\n>> Day 05b\n>> [\u2713] 27720699\n```\n\nBenchmarking is implemented using *criterion*\n\n```\n$ aoc2017 2 --bench\n>> Day 02a\nbenchmarking...\ntime                 729.1 \u03bcs   (695.0 \u03bcs .. 784.2 \u03bcs)\n                     0.967 R\u00b2   (0.926 R\u00b2 .. 0.995 R\u00b2)\nmean                 740.4 \u03bcs   (711.9 \u03bcs .. 783.6 \u03bcs)\nstd dev              116.8 \u03bcs   (70.44 \u03bcs .. 172.8 \u03bcs)\nvariance introduced by outliers: 89% (severely inflated)\n\n>> Day 02b\nbenchmarking...\ntime                 782.4 \u03bcs   (761.3 \u03bcs .. 812.9 \u03bcs)\n                     0.983 R\u00b2   (0.966 R\u00b2 .. 0.998 R\u00b2)\nmean                 786.7 \u03bcs   (764.1 \u03bcs .. 849.4 \u03bcs)\nstd dev              110.8 \u03bcs   (42.44 \u03bcs .. 228.5 \u03bcs)\nvariance introduced by outliers: 86% (severely inflated)\n```\n\nTest suites run the example problems given in the puzzle description, and\noutputs are colorized in ANSI terminals.\n\n```\n$ aoc2017 1 --tests\n[9] [!35732] $ aoc2017 1 --tests\n>> Day 01a\n[\u2713] (3)\n[\u2713] (4)\n[\u2713] (0)\n[\u2713] (9)\n[\u2713] Passed 4 out of 4 test(s)\n[\u2713] 1097\n>> Day 01b\n[\u2713] (6)\n[\u2713] (0)\n[\u2713] (4)\n[\u2713] (12)\n[\u2713] (4)\n[\u2713] Passed 5 out of 5 test(s)\n[\u2713] 1188\n```\n\nThis should only work if you're running `aoc2017` in the project directory.\n\n**To run on actual inputs**, the executable expects inputs to be found in the\nfolder `data/XX.txt` in the directory you are running in.  That is, the input\nfor Day 7 will be expected at `data/07.txt`.\n\n*aoc2017 will download missing input files*, but requires a session token.\nThis can be provided in `aoc2017-conf.yaml`:\n\n```yaml\nsession:  [[ session token goes here ]]\n```\n\nYou can \"lock in\" your current answers (telling the executable that those are\nthe correct answers) by passing in `--lock`.  This will lock in any final\npuzzle solutions encountered as the verified official answers.  Later, if you\nedit or modify your solutions, they will be checked on the locked-in answers.\n\nThese are store in `data/ans/XXpart.txt`.  That is, the target output for Day 7\n(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually\nedit these files.\n\n"}, {"author": "kodsnack", "repo": "kodsnack/advent_of_code_2017", "language": "Python", "language_all": {"Python": 626052, "C++": 530814, "Go": 505169, "Scala": 305758, "JavaScript": 199379, "Haskell": 147224, "Ada": 125582, "PHP": 102771, "MATLAB": 74402, "OCaml": 66511, "Java": 62643, "Shell": 59146, "Common Lisp": 56817, "C#": 48941, "Perl": 43496, "Rust": 36873, "Kotlin": 33938, "OpenEdge ABL": 30199, "Crystal": 22706, "Brainfuck": 21606, "Nim": 15482, "REXX": 15381, "Elm": 12434, "Clojure": 12082, "Makefile": 11920, "Visual Basic": 10945, "Swift": 9969, "CMake": 7613, "Limbo": 6363, "COBOL": 3504, "Haxe": 3444, "Pony": 3363, "PLSQL": 2908, "Perl 6": 2430, "PowerShell": 1651, "sed": 942, "HTML": 199}, "readme_contents": "# Advent of code 2017 #\nBidra med dina l\u00f6sningar p\u00e5 problemen i [Advent of code](http://adventofcode.com/), i vilket spr\u00e5k du vill. V\u00e4lj ett du kan, eller ett du vill l\u00e4ra dig!\n\nSe till att du g\u00e5r med i advent of code's topplista om du vill ha en chans att vinna kodsnack's t\u00e4vling. V\u00e5rat topplista har ID: `194162-e06e748d`. Det finns \u00e4ven en slack kanal f\u00f6r alla som \u00e4r med. Maila info@kodsnack.se eller twittra din epost till @kodsnack s\u00e5 sl\u00e4pper vi in er.\n\nDe f\u00f6rsta problemen kommer f\u00f6rsta december, de sista den tjugofemte, och vi delar ut ett pris till den eller de som dels har h\u00f6gst po\u00e4ng p\u00e5 den leaderboard vi kommer att skapa, dels bidragit med alla sin l\u00f6sningar h\u00e4r. Som f\u00f6rra \u00e5ret \u00e4r det tv\u00e5 delproblem f\u00f6r varje dag. Samtliga 50 problem ska allts\u00e5 finnas med i en komplett l\u00f6sning. Det \u00e4r givetvis fritt fram att bidra med l\u00f6sningar f\u00f6r s\u00e5 m\u00e5nga eller f\u00e5 problem man har tid och lust med, t\u00e4vlingsmomentet \u00e4r inte det viktiga h\u00e4r!\n\nDina l\u00f6sningar f\u00e5r g\u00e4rna checkas in i en mapp med namn p\u00e5 formen #anv\u00e4ndarnamn-spr\u00e5k#, s\u00e5 blir det lite l\u00e4ttare f\u00f6r alla att f\u00e5 \u00f6verblick.\n\nL\u00f6sningarna kan komma att diskuteras i avsnitt av Kodsnack, s\u00e5 l\u00e4gg med en readme.md med en notis om du inte vill riskera att bli omn\u00e4mnd.\n"}, {"author": "Diggsey", "repo": "Diggsey/aoc2018", "language": "Rust", "language_all": {"Rust": 126144}, "readme_contents": null}, {"author": "mstksg", "repo": "mstksg/advent-of-code-2019", "language": "Haskell", "language_all": {"Haskell": 138696}, "readme_contents": "Advent of Code 2019\n=====================\n\n<!--\nThis file generated by the build script at ./Build.hs\n-->\n\n*[2016][]* / *[2017][]* / *[2018][]* / *2019*\n\n[2016]: https://github.com/mstksg/advent-of-code-2016\n[2017]: https://github.com/mstksg/advent-of-code-2017\n[2018]: https://github.com/mstksg/advent-of-code-2018\n\nIt's the most wonderful time of the year!\n\nMy [Advent of Code 2019][aoc] Haskell solutions here, along with an automated\nfetching, testing, running environment (powered by the\n*[advent-of-code-api][]* library).  The interactive development environment and\nrunner/bench marker/viewer/tester has been pulled out [here][dev], so this is\nimplemented as \"fork\" of it with my own solutions and reflections.\n\nCheck out the [reflections][] (with [rss feed][rss]) and [package\nhaddocks][haddock] --- more info below!\n\n[aoc]: https://adventofcode.com/2019\n[haddock]: https://mstksg.github.io/advent-of-code-2019/\n[advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api\n[dev]: https://github.com/mstksg/advent-of-code-dev\n\n[Reflections and Benchmarks][reflections]\n-----------------------------------------\n\n[Available as RSS Feed][rss]\n\n[rss]: http://feeds.feedburner.com/jle-advent-of-code-2019\n\n| Challenge | Reflections | Code      | Rendered   | Benchmarks |\n| --------- | ----------- | --------- | ---------- | ---------- |\n| Day  1    | [x][d01r]   | [x][d01g] | [x][d01h]  | [x][d01b]  |\n| Day  2    | [x][d02r]   | [x][d02g] | [x][d02h]  | [x][d02b]  |\n| Day  3    | [x][d03r]   | [x][d03g] | [x][d03h]  | [x][d03b]  |\n| Day  4    | [x][d04r]   | [x][d04g] | [x][d04h]  | [x][d04b]  |\n| Day  5    |             |           |            |            |\n| Day  6    | [x][d06r]   | [x][d06g] | [x][d06h]  | [x][d06b]  |\n| Day  7    |             |           |            |            |\n| Day  8    | [x][d08r]   | [x][d08g] | [x][d08h]  | [x][d08b]  |\n| Day  9    |             |           |            |            |\n| Day 10    | [x][d10r]   | [x][d10g] | [x][d10h]  | [x][d10b]  |\n| Day 11    | [x][d11r]   | [x][d11g] | [x][d11h]  | [x][d11b]  |\n| Day 12    |             |           |            |            |\n| Day 13    |             |           |            |            |\n| Day 14    |             |           |            |            |\n| Day 15    |             |           |            |            |\n| Day 16    |             |           |            |            |\n| Day 17    |             |           |            |            |\n| Day 18    |             |           |            |            |\n| Day 19    |             |           |            |            |\n| Day 20    |             |           |            |            |\n| Day 21    |             |           |            |            |\n| Day 22    |             |           |            |            |\n| Day 23    |             |           |            |            |\n| Day 24    |             |           |            |            |\n| Day 25    |             |           |            |            |\n\n\"Rendered\" links go to haddock source renders for code, with reflections in the\ndocumentation.  Haddock source renders have hyperlinked identifiers,\nso you can follow any unrecognized identifiers to see where I have defined them\nin the library.\n\n[reflections]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md\n\n### `:~>` type\n\nIf you're looking at my actual github solutions, you'll notice that this year\nI'm implementing my solutions in terms of a `:~>` record type:\n\n```haskell\ndata a :~> b = MkSol\n    { sParse :: String -> Maybe a    -- ^ parse input into an `a`\n    , sSolve :: a      -> Maybe b    -- ^ solve an `a` input to a `b` solution\n    , sShow  :: b      -> String     -- ^ print out the `b` solution for submission\n    }\n```\n\nAn `a :~> b` is a solution to a challenge expecting input of type `a` and\nproducing answers of type `b`.  It also packs in functions to parse a `String`\ninto an `a`, and functions to show a `b` as a `String` to submit as an answer.\n\nThis helps me mentally separate out parsing, solving, and showing, allowing for\nsome cleaner code and an easier time planning my solution.\n\nSuch a challenge can be \"run\" on string inputs by feeding the string into\n`sParse`, then `sSolve`, then `sShow`:\n\n```haskell\n-- | Run a ':~>' on some input, retuning 'Maybe'\nrunSolution :: Challenge -> String -> Maybe String\nrunSolution MkSol{..} s = do\n    x <- sParse s\n    y <- sSolve x\n    pure (sShow y)\n```\n\nIn the actual library, I have `runSolution` return an `Either` so I can debug\nwhich stage the error happened in.\n\nYou might also notice the function `dyno_`, used like `dyno_ \"limit\" 10000`.  This\nis how I implement parameters in problems that vary between test data and\nactual input.  For example, Day 6 involved finding points that had a total\ndistance of less than 10000, but for the test input, we found the points that\nhad a total distance of less than 32.  So, I have a system that lets me write\n`dyno_ \"limit\" 10000` in my code instead of hard-coding in `10000`.  This\n`10000` would be replaced by `32` when running with test data (which is parsed\nfrom [this file][7btest])\n\n[7btest]: https://github.com/mstksg/advent-of-code-2018/blob/master/test-data/06b.txt\n\nInteractive\n-----------\n\nThe *[AOC.Run.Interactive][interactive]* module has code (powered by\n*[advent-of-code-api][]*) for testing your solutions and submitting within\nGHCI, so you don't have to re-compile. If you edit your solution programs, they\nare automatically updated when you hit `:r` in ghci.\n\n[interactive]: https://mstksg.github.io/advent-of-code-2019/AOC2019-Run-Interactive.html\n\n```haskell\nghci> execSolution_   $ solSpec 'day02a   -- get answer for challenge based on solution\nghci> testSolution_   $ solSpec 'day02a   -- run solution against test suite\nghci> viewPrompt_     $ solSpec 'day02a   -- view the prompt for a part\nghci> waitForPrompt_  $ solSpec 'day02a   -- count down to the prompt for a part\nghci> submitSolution_ $ solSpec 'day02a   -- submit a solution\n```\n\nThese are loaded with session key stored in the configuration file (see next\nsection).\n\nExecutable\n----------\n\nComes with test examples given in problems.\n\nYou can install using `stack`:\n\n```bash\n$ git clone https://github.com/mstksg/advent-of-code-2019\n$ cd advent-of-code-2019\n$ stack setup\n$ stack install\n```\n\nThe executable `aoc2019` includes a testing and benchmark suite, as well as a\nway to view prompts within the command line:\n\n```\n$ aoc2019 --help\naoc2019 - Advent of Code 2019 challenge runner\n\nUsage: aoc2019 [-c|--config PATH] COMMAND\n  Run challenges from Advent of Code 2019. Available days: 1, 2, 3 (..)\n\nAvailable options:\n  -c,--config PATH         Path to configuration file (default: aoc-conf.yaml)\n  -h,--help                Show this help text\n\nAvailable commands:\n  run                      Run, test, and benchmark challenges\n  view                     View a prompt for a given challenge\n  submit                   Test and submit answers for challenges\n  test                     Alias for run --test\n  bench                    Alias for run --bench\n  countdown                Alias for view --countdown\n\n$ aoc2019 run 3 b\n>> Day 03b\n>> [\u2713] 243\n```\n\nYou can supply input via stdin with `--stdin`:\n\n```\n$ aoc2019 run 1 --stdin\n>> Day 01a\n+1\n+2\n+1\n-3\n<Ctrl+D>\n[?] 1\n>> Day 01b\n[?] 1\n```\n\nBenchmarking is implemented using *criterion*\n\n```\n$ aoc2019 bench 2\n>> Day 02a\nbenchmarking...\ntime                 1.317 ms   (1.271 ms .. 1.392 ms)\n                     0.982 R\u00b2   (0.966 R\u00b2 .. 0.999 R\u00b2)\nmean                 1.324 ms   (1.298 ms .. 1.373 ms)\nstd dev              115.5 \u03bcs   (77.34 \u03bcs .. 189.0 \u03bcs)\nvariance introduced by outliers: 65% (severely inflated)\n\n>> Day 02b\nbenchmarking...\ntime                 69.61 ms   (68.29 ms .. 72.09 ms)\n                     0.998 R\u00b2   (0.996 R\u00b2 .. 1.000 R\u00b2)\nmean                 69.08 ms   (68.47 ms .. 69.99 ms)\nstd dev              1.327 ms   (840.8 \u03bcs .. 1.835 ms)\n```\n\nTest suites run the example problems given in the puzzle description, and\noutputs are colorized in ANSI terminals.\n\n```\n$ aoc2019 test 1\n>> Day 01a\n[\u2713] (3)\n[\u2713] (3)\n[\u2713] (0)\n[\u2713] (-6)\n[\u2713] Passed 4 out of 4 test(s)\n[\u2713] 416\n>> Day 01b\n[\u2713] (2)\n[\u2713] (0)\n[\u2713] (10)\n[\u2713] (5)\n[\u2713] (14)\n[\u2713] Passed 5 out of 5 test(s)\n[\u2713] 56752\n```\n\nThis should only work if you're running `aoc2019` in the project directory.\n\n**To run on actual inputs**, the executable expects inputs to be found in the\nfolder `data/XX.txt` in the directory you are running in.  That is, the input\nfor Day 7 will be expected at `data/07.txt`.\n\n*aoc2019 will download missing input files*, but requires a session token.\nThis can be provided in `aoc-conf.yaml`:\n\n```yaml\nsession:  [[ session token goes here ]]\n```\n\nSession keys are also required to download \"Part 2\" prompts for each challenge.\n\nYou can \"lock in\" your current answers (telling the executable that those are\nthe correct answers) by passing in `--lock`.  This will lock in any final\npuzzle solutions encountered as the verified official answers.  Later, if you\nedit or modify your solutions, they will be checked on the locked-in answers.\n\nThese are stored in `data/ans/XXpart.txt`.  That is, the target output for Day 7\n(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually\nedit these files.\n\nYou can view prompts: (use `--countdown` to count down until a prompt is\nreleased, and display immediately)\n\n```\n$ aoc2019 view 3 b\n>> Day 03b\n--- Part Two ---\n----------------\n\nAmidst the chaos, you notice that exactly one claim doesn't overlap by\neven a single square inch of fabric with any other claim. If you can\nsomehow draw attention to it, maybe the Elves will be able to make\nSanta's suit after all!\n\nFor example, in the claims above, only claim `3` is intact after all\nclaims are made.\n\n*What is the ID of the only claim that doesn't overlap?*\n```\n\nYou can also submit answers:\n\n```\n$ aoc2019 submit 1 a\n```\n\nSubmissions will automatically run the test suite.  If any tests fail, you will\nbe asked to confirm submission or else abort.  The submit command will output\nthe result of your submission: The message from the AoC website, and whether or\nnot your answer was correct (or invalid or ignored).  Answers that are\nconfirmed correct will be locked in and saved for future testing against, in\ncase you change your solution.\n\nAll networking features are powered by *[advent-of-code-api][]*.\n\n[d01g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day01.hs\n[d01h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day01.html\n[d01r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-1\n[d01b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-1-benchmarks\n[d02g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day02.hs\n[d02h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day02.html\n[d02r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-2\n[d02b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-2-benchmarks\n[d03g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day03.hs\n[d03h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day03.html\n[d03r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-3\n[d03b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-3-benchmarks\n[d04g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day04.hs\n[d04h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day04.html\n[d04r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-4\n[d04b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-4-benchmarks\n[d06g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day06.hs\n[d06h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day06.html\n[d06r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-6\n[d06b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-6-benchmarks\n[d08g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day08.hs\n[d08h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day08.html\n[d08r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-8\n[d08b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-8-benchmarks\n[d10g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day10.hs\n[d10h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day10.html\n[d10r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-10\n[d10b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-10-benchmarks\n[d11g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day11.hs\n[d11h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day11.html\n[d11r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-11\n[d11b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-11-benchmarks\n"}, {"author": "mhanberg", "repo": "mhanberg/advent-of-code-elixir-starter", "language": "Elixir", "language_all": {"Elixir": 26906}, "readme_contents": "# Advent of Code Elixir Starter\n\nA batteries included starter pack for participating in [Advent of Code](https://www.adventofcode.com) using Elixir!\n\n## Usage\n\nThere are 25 modules, 25 tests, and 50 mix tasks. \n\n1. Fill in the tests with the example solutions.\n1. Write your implementation.\n1. Fill in the final problem inputs into the mix task and run `mix d01.p1`!\n    - Benchmark your solution by passing the `-b` flag, `mix d01.p1 -b`\n\n```elixir\ndefmodule AdventOfCode.Day01 do\n  def part1(args) do\n  end\n\n  def part2(args) do\n  end\nend\n```\n\n```elixir\ndefmodule AdventOfCode.Day01Test do\n  use ExUnit.Case\n\n  import AdventOfCode.Day01\n\n  @tag :skip # Make sure to remove to run your test.\n  test \"part1\" do\n    input = nil \n    result = part1(input)\n\n    assert result\n  end\n\n  @tag :skip # Make sure to remove to run your test.\n  test \"part2\" do\n    input = nil \n    result = part2(input)\n\n    assert result\n  end\nend\n```\n\n```elixir\ndefmodule Mix.Tasks.D01.P1 do\n  use Mix.Task\n\n  import AdventOfCode.Day01\n\n  @shortdoc \"Day 01 Part 1\"\n  def run(args) do\n    input = nil\n\n    if Enum.member?(args, \"-b\"),\n      do: Benchee.run(%{part_1: fn -> input |> part1() end}),\n      else:\n        input\n        |> part1()\n        |> IO.inspect(label: \"Part 1 Results\")\n  end\nend   \n```\n\n## Installation\n\n```bash\n# clone\n$ git clone git@github.com:mhanberg/advent-of-code-elixir-starter.git advent-of-code\n$ cd advent-of-code\n\n# Reinitialize your git repo\n$ rm -rf .git\n$ git init\n```\n"}, {"author": "borkdude", "repo": "borkdude/advent-of-cljc", "language": "Clojure", "language_all": {"Clojure": 978195, "Shell": 5984}, "readme_contents": "# Advent of CLJC\n[![CircleCI](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master.svg?style=svg)](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master)\n\nCross platform Clojure Advent of Code solutions.\n\n<img src=\"doc/scores.png\" alt=\"scores\" width=\"50%\"/>\n\n## Contribute\n\nWhat's in it for you?\n* Most of all, you will be encouraged to write portable Clojure code: a solution that runs on the JVM via Clojure and on Node via ClojureScript.\n* Your Advent of Code solutions will be checked against the same input as others. This diminishes the possibility that your solution only works for your specific input.\n* The performance of your solution can be compared with others via CircleCI (see [Scores](#scores)).\n\nWhat's in it for the Clojure community?\n* You are helping advance the [speculative](https://github.com/slipset/speculative) project, a collection of core specs.\n* You are helping to build a large Clojure corpus for various purposes (see the Rationale for [coal-mine](https://github.com/mfikes/coal-mine)).\n\nPRs welcome. Make a new solution file with the `new` script:\n\n    script/new 2017 1 username\n\nwhere `username` is your Github or Bitbucket username. Then fill in the solution in the file. If the input and answers are still empty you will have to provide it in `data.cljc`.\n\nThis repo will not accept multiple inputs and answers (see [this issue](https://github.com/borkdude/advent-of-cljc/issues/6) for details).\n\n## Dev\n\nRead [here](https://nrepl.xyz/nrepl/usage/server.html) how to get an nREPL for this project.\n\n## Tests\n\nMake sure the tests for your solution pass with the `test-one` script.\n\nPlease do not run calculations outside the tests. Memoized functions are permitted. Top-level lazy sequences are fine as long as they are not realized outside the tests.\n\nCircleCI runs tests for changed namespaces with the `.circle/test-diff` script.\n\nTests support the following metadata:\n\n - `:skip-cljs`: used for skipping Node tests. Used in `.circle/test-diff`,\n   `script/test` and `script/test-one`.\n - `:skip`: used for skipping tests in `script/test`.\n\nRun all tests:\n\n    script/test\n\nRun one test:\n\n    script/test-one 2017 1 username\n    \nRun with instrumentation:\n\n    INSTRUMENT=true script/test\n    INSTRUMENT=true script/test-one aoc.y2017.d01.username\n\nSkip Clojure or ClojureScript:\n\n    SKIP_CLJ=true script/test\n    SKIP_CLJS=true script/test\n\n## Scores\n\nTo view a time comparison of your solutions to others, go to\n[CircleCI](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master), open\n\"Test changed namespaces\" and scroll to the end.\n\nThe entire list of scores can be viewed and downloaded in CSV format\n[here](https://gist.github.com/borkdude/d7f42d4110e8a330d1d70f9242b14496).\n"}, {"author": "BartoszMilewski", "repo": "BartoszMilewski/AofC2017", "language": "Haskell", "language_all": {"Haskell": 14869}, "readme_contents": "# AofC2017\nAdvent of Code 2017\n"}, {"author": "BartoszMilewski", "repo": "BartoszMilewski/AoC2019", "language": "Haskell", "language_all": {"Haskell": 15971}, "readme_contents": "# AoC2019\nSolutions to [Advent of Code 2019](https://adventofcode.com/2019)\n"}, {"author": "zero-to-mastery", "repo": "zero-to-mastery/coding_challenge-24", "language": null, "language_all": {}, "readme_contents": "# Advent of Code 2019 (coding_challenge-24)\n\n![](./aoc.png)\n\n# What is Advent of Code?\n> Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like **yes, including JavaScript and Python!!!**\n> Every day for 25 days this month you have small programming challenges that you need to solve to complete the \"tree\". Each day, the questions get a little bit harder to really push you to learn and improve your programming skills.\n\nWe have created a special area for the ZTM community to share their solutions and code each day, see what others have done, and vote for your favourite solution. We even have a leaderboard!\n\n# How to participate:\n### (This event starts December 1st, 2019 but you can join anytime. Solutions submitted on the day of the of the puzzle reveal will receive extra points!)\n1. Go to https://aoc.zerotomastery.io/ and click on the **ABOUT** to find out more about the challenge and how to participate.\n2. Go to https://adventofcode.com/ and start with problem #1! Each day starting Dec 1st, 2019 a new problem will be unlocked but you have to do them in order!\n3. Once you finish one puzzle/question, you can share your code and solution with the community, or check out what others in the ZTM community have done. You can even vote on your favourite solutions! You can [follow this video on how to submit your solution](https://www.loom.com/share/7310b6e83bcc4922b25023b62d173611).\n4. Check out the leaderboard and see how you compare: https://aoc.zerotomastery.io/leaderboard\n5. **Bonus**: In case you get stuck, I made 2 videos available for free preview for you to show you how I solve one of the problems and the steps I take. Simply go to the [Complete Web Developer in 2020: Zero to Mastery](https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/?referralCode=FFF295AECF3594CE440E) course and check out the two lectures (*Exercise: Santa's Node Helper* and *Solution: Santas Node Helper*). Even if you are not enrolled in the course these two videos have the free preview option enabled). \n\n**You can discuss all AOC related topics in our #coding-challenge channel on Discord!**\n\n# Who made this possible?\nSome of our fellow ZTM members helped create this awesome platform to submit and share code. Give them a big thank you on Discord!\n```\n@Matt\n@Dichotomyy\n@E\n@notAnkur\n@Brittney\n@Abdus\n@Meet\n```\n\n## One Last Thing!\n\n**Please note: As with all my challenges there is zero benefit or monetary gain I receive from it. This is just my way of thanking my students and making sure that you are able to continue gaining valuable knowledge outside of just my videos. It would mean a lot to me if you are able to rate my course...5 star reviews make my day :)**\n\n"}, {"author": "strelec", "repo": "strelec/Advent-of-Scala-2015", "language": "Scala", "language_all": {"Scala": 9510}, "readme_contents": "# Advent of Scala 2015\n\nMy solutions for the \"Advent of Code\" 2015, written in Scala. I want to get more people interested in this language.\n\nI focus on readability and brevity of code first, performance comes second. I also take special care to process the standard input in a streaming fashion.\n\n**If you like my work, please star the repository. Thanks!**\n"}, {"author": "kodsnack", "repo": "kodsnack/advent_of_code_2016", "language": "Python", "language_all": {"Python": 430218, "C++": 407688, "Objective-C": 249799, "PHP": 167165, "C": 144138, "Prolog": 141727, "Java": 139359, "Go": 132037, "Haskell": 115315, "OpenEdge ABL": 91043, "Lasso": 88234, "JavaScript": 83169, "Crystal": 62526, "Scala": 62052, "Rust": 46777, "TypeScript": 44617, "Elixir": 41288, "C#": 34389, "Lua": 22238, "Common Lisp": 22107, "REXX": 18461, "Swift": 17015, "Shell": 16442, "Clojure": 14017, "CMake": 10741, "Brainfuck": 8186, "Makefile": 5381, "Kotlin": 3741, "Awk": 1840, "M4": 1711, "Pascal": 1162}, "readme_contents": "# Advent of code 2016 #\nBidra med dina l\u00f6sningar p\u00e5 problemen i [Advent of code](http://adventofcode.com/), i vilket spr\u00e5k du vill. V\u00e4lj ett du kan, eller ett du vill l\u00e4ra dig!\n\nDe f\u00f6rsta problemen kommer f\u00f6rsta december, de sista den tjugofemte, och den eller de som f\u00f6rst l\u00f6ser samtliga problem korrekt kommer att f\u00e5 n\u00e5gon form av pris. Som f\u00f6rra \u00e5ret \u00e4r det tv\u00e5 delproblem f\u00f6r varje dag. Samtliga 50 problem ska allts\u00e5 finnas med i en komplett l\u00f6sning. \"F\u00f6rst\" r\u00e4knas utifr\u00e5n tidsst\u00e4mpeln p\u00e5 den merge request som g\u00f6r din (eller era, samarbete uppmuntras) l\u00f6sning komplett och korrekt. Det \u00e4r givetvis fritt fram att bidra med l\u00f6sningar f\u00f6r s\u00e5 m\u00e5nga eller f\u00e5 problem man har tid och lust med, t\u00e4vlingsmomentet \u00e4r inte det viktiga h\u00e4r!\n\nDina l\u00f6sningar f\u00e5r g\u00e4rna checkas in i en mapp med namn p\u00e5 formen #anv\u00e4ndarnamn-spr\u00e5k#, s\u00e5 blir det lite l\u00e4ttare f\u00f6r alla att f\u00e5 \u00f6verblick.\n\nL\u00f6sningarna kan komma att diskuteras i avsnitt av Kodsnack, s\u00e5 l\u00e4gg med en readme.md med en notis om du inte vill riskera att bli omn\u00e4mnd.\n"}, {"author": "narimiran", "repo": "narimiran/AdventOfCode2017", "language": "OCaml", "language_all": {"OCaml": 39507, "Nim": 26907, "Python": 22773}, "readme_contents": "# Advent of Code 2017\n\nAll my Advent of Code repos:\n\n* [AoC 2015 in Nim](https://github.com/narimiran/advent_of_code_2015)\n* [AoC 2016 in Python](https://github.com/narimiran/advent_of_code_2016)\n* [AoC 2017 in Nim, OCaml, Python](https://github.com/narimiran/AdventOfCode2017) (this repo)\n* [AoC 2018 in Nim](https://github.com/narimiran/AdventOfCode2018)\n* [AoC 2019 in OCaml](https://github.com/narimiran/AdventOfCode2019)\n\n\n&nbsp;\n\n\n## Solutions\n\nMy aim is to provide clean and readable, yet idiomatic, solutions in all three languages.\nIf you have any comment/suggestion/advice, please let me know!\n\nOriginally, I've solved all tasks in Nim and Python as they were released.\nOCaml solutions were added in Novemeber 2019 as a preparation for AoC 2019 (these were my first steps in OCaml).\n\n\nTask                                                                                 | Nim solution               | OCaml solution             | Python solution             | Note\n---                                                                                  | ---                        | ---                        | ---                         | ---\n[Day 1: Inverse Captcha](http://adventofcode.com/2017/day/1)                         | [day01.nim](nim/day01.nim) | [day01.ml](ocaml/day01.ml) | [day01.py](python/day01.py) | Taking advantage of Python's negative indices.\n[Day 2: Corruption Checksum](http://adventofcode.com/2017/day/2)                     | [day02.nim](nim/day02.nim) | [day02.ml](ocaml/day02.ml) | [day02.py](python/day02.py) |\n[Day 3: Spiral Memory](http://adventofcode.com/2017/day/3)                           | [day03.nim](nim/day03.nim) | [day03.ml](ocaml/day03.ml) | [day03.py](python/day03.py) | Building a spiral with table/map/dict in all three versions; using iterators in Nim and Python.\n[Day 4: High-Entropy Passphrases](http://adventofcode.com/2017/day/4)                | [day04.nim](nim/day04.nim) | [day04.ml](ocaml/day04.ml) | [day04.py](python/day04.py) |\n[Day 5: A Maze of Twisty Trampolines, All Alike](http://adventofcode.com/2017/day/5) | [day05.nim](nim/day05.nim) | [day05.ml](ocaml/day05.ml) | [day05.py](python/day05.py) | Used `try-except` in Python for some nice speed improvement.\n[Day 6: Memory Reallocation](http://adventofcode.com/2017/day/6)                     | [day06.nim](nim/day06.nim) | [day06.ml](ocaml/day06.ml) | [day06.py](python/day06.py) | Python doesn't have `OrderedSet` (had to use `OrderedDict`).\n[Day 7: Recursive Circus](http://adventofcode.com/2017/day/7)                        | [day07.nim](nim/day07.nim) | [day07.ml](ocaml/day07.ml) | [day07.py](python/day07.py) | Python's `Counter.most_common()` is quite helpful/useful here.\n[Day 8: I Heard You Like Registers](http://adventofcode.com/2017/day/8)              | [day08.nim](nim/day08.nim) | [day08.ml](ocaml/day08.ml) | [day08.py](python/day08.py) |\n[Day 9: Stream Processing](http://adventofcode.com/2017/day/9)                       | [day09.nim](nim/day09.nim) | [day09.ml](ocaml/day09.ml) | [day09.py](python/day09.py) |\n[Day 10: Knot Hash](http://adventofcode.com/2017/day/10)                             | [day10.nim](nim/day10.nim) | [day10.ml](ocaml/day10.ml) | [day10.py](python/day10.py) | Changed solutions to be reusable for Day 14. Python version uses `deque` with pop, rotate, and insert. Nim version is a more 'traditional' one.\n[Day 11: Hex Ed](http://adventofcode.com/2017/day/11)                                | [day11.nim](nim/day11.nim) | [day11.ml](ocaml/day11.ml) | [day11.py](python/day11.py) | Python version uses cube coordinates, Nim and OCaml versions use axial coordinates.\n[Day 12: Digital Plumber](http://adventofcode.com/2017/day/12)                       | [day12.nim](nim/day12.nim) | [day12.ml](ocaml/day12.ml) | [day12.py](python/day12.py) | BFS in Python, DFS in Nim and OCaml.\n[Day 13: Packet Scanners](http://adventofcode.com/2017/day/13)                       | [day13.nim](nim/day13.nim) | [day13.ml](ocaml/day13.ml) | [day13.py](python/day13.py) | All three versions precalculate possible values of `delay` using [Chinese remainder theorem](https://en.wikipedia.org/wiki/Chinese_remainder_theorem) to gain a significant speedup.\n[Day 14: Disk Defragmentation](http://adventofcode.com/2017/day/14)                  | [day14.nim](nim/day14.nim) | [day14.ml](ocaml/day14.ml) | [day14.py](python/day14.py) |\n[Day 15: Dueling Generators](http://adventofcode.com/2017/day/15)                    | [day15.nim](nim/day15.nim) | [day15.ml](ocaml/day15.ml) | [day15.py](python/day15.py) | Python: generator `generator` generating generator's values. In Nim, using bit masking gives great speed boost.\n[Day 16: Permutation Promenade](http://adventofcode.com/2017/day/16)                 | [day16.nim](nim/day16.nim) | [day16.ml](ocaml/day16.ml) | [day16.py](python/day16.py) |\n[Day 17: Spinlock](http://adventofcode.com/2017/day/17)                              | [day17.nim](nim/day17.nim) | [day17.ml](ocaml/day17.ml) | [day17.py](python/day17.py) | Brute force in Python, using `deque.rotate`. The expected version in Nim, optimized.\n[Day 18: Duet](http://adventofcode.com/2017/day/18)                                  | [day18.nim](nim/day18.nim) | [day18.ml](ocaml/day18.ml) | [day18.py](python/day18.py) |\n[Day 19: A Series of Tubes](http://adventofcode.com/2017/day/19)                     | [day19.nim](nim/day19.nim) | [day19.ml](ocaml/day19.ml) | [day19.py](python/day19.py) | All three solutions use complex numbers, which are great for the rotations in 2D plane.\n[Day 20: Particle Swarm](http://adventofcode.com/2017/day/20)                        | [day20.nim](nim/day20.nim) | [day20.ml](ocaml/day20.ml) | [day20.py](python/day20.py) |\n[Day 21: Fractal Art](http://adventofcode.com/2017/day/21)                           | [day21.nim](nim/day21.nim) | [day21.ml](ocaml/day21.ml) | [day21.py](python/day21.py) | Unoptimized solution in OCaml. Nim and Python solutions are optimized for the second part. Python version uses `numpy` and expands the grid (3 steps at once), Nim version counts the number of times each pattern is present after 18 iterations.\n[Day 22: Sporifica Virus](http://adventofcode.com/2017/day/22)                       | [day22.nim](nim/day22.nim) | [day22.ml](ocaml/day22.ml) | [day22.py](python/day22.py) | OCaml: sum types and pattern matching is the name of the game. Python version uses a dict and a complex plane, Nim version uses an array (faster than a table) of a regular 2D plane with `enum` for the rotating directions.\n[Day 23: Coprocessor Conflagration](http://adventofcode.com/2017/day/23)             | [day23.nim](nim/day23.nim) | [day23.ml](ocaml/day23.ml) | [day23.py](python/day23.py) |\n[Day 24: Electromagnetic Moat](http://adventofcode.com/2017/day/24)                  | [day24.nim](nim/day24.nim) | [day24.ml](ocaml/day24.ml) | [day24.py](python/day24.py) | BFS in Python. A recursive search in Nim and OCaml, optimized.\n[Day 25: The Halting Problem](http://adventofcode.com/2017/day/25)                   | [day25.nim](nim/day25.nim) | [day25.ml](ocaml/day25.ml) | [day25.py](python/day25.py) | Python version uses (default)dict. Nim version uses arrays, which are much faster than tables.\n**Total time**:                                                                      | 0.49 sec                   | 1.16 sec\\*                 | 15.9 sec\\*                  | \\* OCaml: unoptimized [day21.ml](ocaml/day21.ml). Python: without the brute-forced [day17.py](python/day17.py), and [day15.py](python/day15.py) was run in `pypy3`. For the detailed run times, see below.\n\n&nbsp;\n\n\n\n## Run times\n\n* Nim version: 1.1.1 (devel)\n* OCaml version: 4.08.1+flambda\n* Python version: 3.7.4\n* CPU: AMD Ryzen 3700x @ 3.6 GHz (Linux 5.3)\n\n\nTimes are in milliseconds, the reported results are the average of 20 runs.\n\nday |  nim | ocaml | python |\n---:| ----:| -----:| ------:|\n 01 |  0.4 |   1.2 |   22.5 |\n 02 |  0.7 |   1.0 |   22.3 |\n 03 |  0.5 |   1.0 |   19.1 |\n 04 |  3.6 |   4.2 |   22.1 |\n 05 | 85.0 |  86.1 | 2547.6 |\n 06 |  3.3 |   5.6 |   53.9 |\n 07 |  3.2 |   6.1 |   33.5 |\n 08 |  2.0 |   2.1 |   19.6 |\n 09 |  0.7 |   2.9 |   24.2 |\n 10 |  0.8 |   2.1 |   33.0 |\n 11 |  1.3 |   1.8 |   32.6 |\n 12 |  2.9 |   3.3 |   26.5 |\n 13 |  1.7 |  30.4 |   28.8 |\n 14 | 14.3 |  45.6 |  521.6 |\n 15 |195.4 | 392.6 | 2074\\* |\n 16 | 13.0 |  82.0 |  160.3 |\n 17 |  1.6 |   7.8 |    -\\* |\n 18 |  1.1 |   7.5 |  108.0 |\n 19 |  0.9 |   1.4 |   33.0 |\n 20 | 16.1 |  31.2 | 1582.7 |\n 21 |  0.8 | 151\\* |  212.4 |\n 22 | 61.2 | 150.8 | 3511.9 |\n 23 |  0.8 |   1.0 |   21.3 |\n 24 | 16.4 |  68.5 | 1332.3 |\n 25 | 61.6 |  68.3 | 3456.8 |\n\nOCaml Day21 was not optimized.  \nPython Day15 was run with `pypy3`, Python Day17 was brute-forced.\n"}, {"author": "glguy", "repo": "glguy/advent2018", "language": "Haskell", "language_all": {"Haskell": 109697, "C++": 10145, "Rust": 9909, "Meson": 469}, "readme_contents": "# Advent of Code 2018 Haskell solutions\n\nI'm building my Haskell solutions using\n[cabal-install](https://www.haskell.org/cabal/users-guide/). Make sure you're\nusing an up-to-date version of the tool to get the best `v2-build` support!\n\n```\n$ cabal v2-build\n```\n\nThe project can also be built using [Stack](https://docs.haskellstack.org/en/stable/README/)\nif that's what you have available.\n\n```\n$ stack setup # only necessary the first time you use a resolver\n$ stack build\n```\n\n## Other languages\n\nI'll be adding C++ and Rust solutions for some of the problems as well.\nYou can find information about those in the relevant subdirectories.\n"}, {"author": "sciyoshi", "repo": "sciyoshi/advent-of-rust-2017", "language": "Rust", "language_all": {"Rust": 38289, "Python": 2936}, "readme_contents": "# Advent of Rust 2017\n\nThese are my solutions to [2017's Advent of Code challenge](https://adventofcode.com/2017), written in Rust.\n\nThe program expects the puzzle input on standard input, and the day is passed as the first argument, for example:\n\n    cargo run --release -- $DAY < inputs/$DAY\n\n* [Day 1: Inverse Captcha](src/day1/)\n* [Day 2: Corruption Checksum](src/day2/)\n* [Day 3: Spiral Memory](src/day3/)\n* [Day 4: High-Entropy Passphrases](src/day4/)\n* [Day 5: A Maze of Twisty Trampolines, All Alike](src/day5/)\n* [Day 6: Memory Reallocation](src/day6/)\n* [Day 7: Recursive Circus](src/day7/)\n* [Day 8: I Heard You Like Registers](src/day8/)\n* [Day 9: Stream Processing](src/day9/)\n* [Day 10: Knot Hash](src/day10/)\n* [Day 11: Hex Ed](src/day11/)\n* [Day 12: Digital Plumber](src/day12/)\n* [Day 13: Packet Scanners](src/day13/)\n* [Day 14: Disk Defragmentation](src/day14/)\n* [Day 15: Dueling Generators](src/day15/)\n* [Day 16: Permutation Promenade](src/day16/)\n* [Day 17: Spinlock](src/day17/)\n* [Day 18: Duet](src/day18/)\n* [Day 19: A Series of Tubes](src/day19/)\n* [Day 20: Particle Swarm](src/day20/)\n* [Day 21: Fractal Art](src/day21/)\n* [Day 22: Sporifica Virus](src/day22/)\n* [Day 23: Coprocessor Conflagration](src/day23/)\n* [Day 24: Electromagnetic Moat](src/day24/)\n* [Day 25: The Halting Problem](src/day25/)\n"}, {"author": "badouralix", "repo": "badouralix/advent-of-code-2018", "language": "Python", "language_all": {"Python": 17735580, "C++": 180994, "C": 50452, "Rust": 38342, "Go": 32666, "Java": 20576, "JavaScript": 10756, "Ruby": 3768, "Shell": 586}, "readme_contents": "# Advent of code 2018 solutions\n\n\u2063\u2002\u2002\u2002\u2002\ud83c\udf1f  \n\u2002\u2002\u2002\u2002\ud83c\udf84  \n\u2002\u2002\u2002\ud83c\udf84\ud83c\udf84  \n\u2002\u2002\ud83c\udf84\ud83c\udf84\ud83c\udf84  \n\u2002\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84  \n\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84\ud83c\udf84  \n\u2002\u2002\ud83c\udf81\ud83c\udf81\ud83c\udf81\n\nThese are proposed solutions for the [Advent of Code 2018](http://adventofcode.com/2018).\n\nThe solutions are automatically tested with travis.\n\n[![Build Status](https://travis-ci.org/badouralix/advent-of-code-2018.svg?branch=master)](https://travis-ci.org/badouralix/advent-of-code-2018)\n\n## Usage\n\nuse `./aoc` script\n\n```text\nusage: aoc <command> [<args>]\n\naoc commands are:\n   run      Runs submissions\n   create   Creates a new submission\n   config   Configures user's parameters\n```\n\n### Examples\n\n#### Run last problem\n\n```shell\n./aoc run\n```\n\n```shell\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRunning submissions for day 04:\n\n* part 2:\n---------------------------------------------------\nAvg over all inputs\n---------------------------------------------------\n----------  ----------  -----------  ---\nsilvestre      78452        1.99 ms  py\ndegemer        43695        2.39 ms  py\njules          23037        2.49 ms  py\ndavid          36371        2.94 ms  py\nthomas          9763        2.97 ms  py\nayoub         136461        5.85 ms  cpp\nevqna          49137        6.65 ms  cpp\nbadouralix     51232        7.26 ms  go\ntpxp           41668      133.63 ms  rb\n----------  ----------  -----------  ---\n```\n\n#### Run specific problems from specific users\n\n```shell\n./aoc run -d 1 -d 2 -p 1 -a ayoub -a david\n```\n\n```shell\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRunning submissions for day 01:\n\n* part 1:\n---------------------------------------------------\nAvg over all inputs\n---------------------------------------------------\n-----  -------  -----------  ---\ndavid    543        0.46 ms  py\nayoub    445        4.94 ms  cpp\n-----  -------  -----------  ---\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nRunning submissions for day 02:\n\n* part 1:\n---------------------------------------------------\nAvg over all inputs\n---------------------------------------------------\n-----  --------  -----------  ---\ndavid    5658        1.22 ms  py\nayoub    6448        4.84 ms  cpp\n-----  --------  -----------  ---\n```\n\nYou can use `-r` to run each submission on it's own input, or `-e` to print non-aggregated results.  \nsee `./aoc run -h` for full arguments description.\n\n## Contribute\n\nFor now we support `c`, `c++`, `java`, `javascript`, `go`, `python 3` (+ `cython`), `ruby`, `rust (stable)` and `bash` scripts.\n\nYou can use `./aoc create` tool to create a new empty submission:\n\n```text\nusage: aoc create [-h] [-a AUTHOR] [-d DAY] [-p PART]\n                  [-l {c,cpp,go,java,js,py,pyx,rb,rs,sh}]\n\nCreate a new submission\n\noptional arguments:\n  -a AUTHOR, --author AUTHOR\n                        submission author\n  -d DAY, --day DAY     problem day\n  -p PART, --part PART  problem part\n  -l {c,cpp,go,java,js,py,pyx,rb,rs,sh}, --language {c,cpp,go,java,js,py,pyx,rb,rs,sh}\n                        submission language\n```\n\nyou can also use `./aoc config` to setup your local profile\n\n```text\nusage: aoc config [-h] username {c,cpp,go,java,js,py,pyx,rb,rs,sh}\n\nConfigures user parameters\n\npositional arguments:\n  username              prefered username\n  {c,cpp,go,java,js,py,pyx,rb,rs,sh}\n                        prefered programming language\n```\n\n### Using python\n\nIf you don't use `create.py` tool you should follow this convention:\n\n```bash\nday-[number]/part-[number]/[username].py    # your submission code\nday-[number]/input/[username].txt           # your input file\n```\n\nYour submission code should inherit from the `SubmissionPy` class from `runners.python` module:\n\n```python\nfrom tool.runners.python import SubmissionPy\n\nclass MyAwesomeSubmission(SubmissionPy):\n\n    def run(self, s):\n        # :param s: input in string format\n        # :return: solution flag\n        pass\n```\n\nYou can add other functions & modules if you need to. Any external dependency should be added to `requirements.txt`.\n\nOnce you tested your solution you can submit it by making a PR.\n\n## History\n\n- [Advent of Code 2017](https://github.com/lypnol/adventofcode-2017)\n- [Advent of Code 2016](https://github.com/lypnol/adventofcode-2016)\n"}, {"author": "bhauman", "repo": "bhauman/advent-of-clojure-2016", "language": "Clojure", "language_all": {"Clojure": 83962}, "readme_contents": "# Deprecated repository\n\nPlease refer to the [advent_of_clojure repo](https://github.com/bhauman/advent-of-clojure) to see my [Advent of Code](http://adventofcode.com) problem solutions.\n\n\n"}, {"author": "CameronAavik", "repo": "CameronAavik/AdventOfCode", "language": "F#", "language_all": {"F#": 226573}, "readme_contents": "# Advent of Code\n\nThese are my solutions in F# for Advent of Code 2015-2019.\n\n## Solutions\n\n| Day | 2015 | 2016 | 2017 | 2018 | 2019 |\n| --- | ---- | ---- | ---- | ---- | ---- |\n| 1  | [2015.1](/AdventOfCode.2015/Solutions/Day01.fs)  | [2016.1](/AdventOfCode.2016/Solutions/Day01.fs)  | [2017.1](/AdventOfCode.2017/Solutions/Day01.fs)  | [2018.1](/AdventOfCode.2018/Solutions/Day01.fs)  | [2019.1](/AdventOfCode.2019/Solutions/Day01.fs)  |\n| 2  | [2015.2](/AdventOfCode.2015/Solutions/Day02.fs)  | [2016.2](/AdventOfCode.2016/Solutions/Day02.fs)  | [2017.2](/AdventOfCode.2017/Solutions/Day02.fs)  | [2018.2](/AdventOfCode.2018/Solutions/Day02.fs)  | [2019.2](/AdventOfCode.2019/Solutions/Day02.fs)  |\n| 3  | [2015.3](/AdventOfCode.2015/Solutions/Day03.fs)  | [2016.3](/AdventOfCode.2016/Solutions/Day03.fs)  | [2017.3](/AdventOfCode.2017/Solutions/Day03.fs)  | [2018.3](/AdventOfCode.2018/Solutions/Day03.fs)  | [2019.3](/AdventOfCode.2019/Solutions/Day03.fs)  |\n| 4  | [2015.4](/AdventOfCode.2015/Solutions/Day04.fs)  | [2016.4](/AdventOfCode.2016/Solutions/Day04.fs)  | [2017.4](/AdventOfCode.2017/Solutions/Day04.fs)  | [2018.4](/AdventOfCode.2018/Solutions/Day04.fs)  | [2019.4](/AdventOfCode.2019/Solutions/Day04.fs)  |\n| 5  | [2015.5](/AdventOfCode.2015/Solutions/Day05.fs)  | [2016.5](/AdventOfCode.2016/Solutions/Day05.fs)  | [2017.5](/AdventOfCode.2017/Solutions/Day05.fs)  | [2018.5](/AdventOfCode.2018/Solutions/Day05.fs)  | [2019.5](/AdventOfCode.2019/Solutions/Day05.fs)  |\n| 6  | [2015.6](/AdventOfCode.2015/Solutions/Day06.fs)  | [2016.6](/AdventOfCode.2016/Solutions/Day06.fs)  | [2017.6](/AdventOfCode.2017/Solutions/Day06.fs)  | [2018.6](/AdventOfCode.2018/Solutions/Day06.fs)  | [2019.6](/AdventOfCode.2019/Solutions/Day06.fs)  |\n| 7  | [2015.7](/AdventOfCode.2015/Solutions/Day07.fs)  | [2016.7](/AdventOfCode.2016/Solutions/Day07.fs)  | [2017.7](/AdventOfCode.2017/Solutions/Day07.fs)  | [2018.7](/AdventOfCode.2018/Solutions/Day07.fs)  | [2019.7](/AdventOfCode.2019/Solutions/Day07.fs)  |\n| 8  | [2015.8](/AdventOfCode.2015/Solutions/Day08.fs)  | [2016.8](/AdventOfCode.2016/Solutions/Day08.fs)  | [2017.8](/AdventOfCode.2017/Solutions/Day08.fs)  | [2018.8](/AdventOfCode.2018/Solutions/Day08.fs)  | [2019.8](/AdventOfCode.2019/Solutions/Day08.fs)  |\n| 9  | [2015.9](/AdventOfCode.2015/Solutions/Day09.fs)  | [2016.9](/AdventOfCode.2016/Solutions/Day09.fs)  | [2017.9](/AdventOfCode.2017/Solutions/Day09.fs)  | [2018.9](/AdventOfCode.2018/Solutions/Day09.fs)  | [2019.9](/AdventOfCode.2019/Solutions/Day09.fs)  |\n| 10 | [2015.10](/AdventOfCode.2015/Solutions/Day10.fs) | [2016.10](/AdventOfCode.2016/Solutions/Day10.fs) | [2017.10](/AdventOfCode.2017/Solutions/Day10.fs) | [2018.10](/AdventOfCode.2018/Solutions/Day10.fs) | [2019.10](/AdventOfCode.2019/Solutions/Day10.fs) |\n| 11 | [2015.11](/AdventOfCode.2015/Solutions/Day11.fs) | [2016.11](/AdventOfCode.2016/Solutions/Day11.fs) | [2017.11](/AdventOfCode.2017/Solutions/Day11.fs) | [2018.11](/AdventOfCode.2018/Solutions/Day11.fs) | [2019.11](/AdventOfCode.2019/Solutions/Day11.fs) |\n| 12 | [2015.12](/AdventOfCode.2015/Solutions/Day12.fs) | [2016.12](/AdventOfCode.2016/Solutions/Day12.fs) | [2017.12](/AdventOfCode.2017/Solutions/Day12.fs) | [2018.12](/AdventOfCode.2018/Solutions/Day12.fs) |  |\n| 13 | [2015.13](/AdventOfCode.2015/Solutions/Day13.fs) | [2016.13](/AdventOfCode.2016/Solutions/Day13.fs) | [2017.13](/AdventOfCode.2017/Solutions/Day13.fs) | [2018.13](/AdventOfCode.2018/Solutions/Day13.fs) |  |\n| 14 | [2015.14](/AdventOfCode.2015/Solutions/Day14.fs) | [2016.14](/AdventOfCode.2016/Solutions/Day14.fs) | [2017.14](/AdventOfCode.2017/Solutions/Day14.fs) | [2018.14](/AdventOfCode.2018/Solutions/Day14.fs) |  |\n| 15 | [2015.15](/AdventOfCode.2015/Solutions/Day15.fs) | [2016.15](/AdventOfCode.2016/Solutions/Day15.fs) | [2017.15](/AdventOfCode.2017/Solutions/Day15.fs) | [2018.15](/AdventOfCode.2018/Solutions/Day15.fs) |  |\n| 16 | [2015.16](/AdventOfCode.2015/Solutions/Day16.fs) | [2016.16](/AdventOfCode.2016/Solutions/Day16.fs) | [2017.16](/AdventOfCode.2017/Solutions/Day16.fs) | [2018.16](/AdventOfCode.2018/Solutions/Day16.fs) |  |\n| 17 | [2015.17](/AdventOfCode.2015/Solutions/Day17.fs) | [2016.17](/AdventOfCode.2016/Solutions/Day17.fs) | [2017.17](/AdventOfCode.2017/Solutions/Day17.fs) | [2018.17](/AdventOfCode.2018/Solutions/Day17.fs) |  |\n| 18 | [2015.18](/AdventOfCode.2015/Solutions/Day18.fs) | [2016.18](/AdventOfCode.2016/Solutions/Day18.fs) | [2017.18](/AdventOfCode.2017/Solutions/Day18.fs) | [2018.18](/AdventOfCode.2018/Solutions/Day18.fs) |  |\n| 19 | [2015.19](/AdventOfCode.2015/Solutions/Day19.fs) | [2016.19](/AdventOfCode.2016/Solutions/Day19.fs) | [2017.19](/AdventOfCode.2017/Solutions/Day19.fs) | [2018.19](/AdventOfCode.2018/Solutions/Day19.fs) |  |\n| 20 | [2015.20](/AdventOfCode.2015/Solutions/Day20.fs) | [2016.20](/AdventOfCode.2016/Solutions/Day20.fs) | [2017.20](/AdventOfCode.2017/Solutions/Day20.fs) | [2018.20](/AdventOfCode.2018/Solutions/Day20.fs) |  |\n| 21 | [2015.21](/AdventOfCode.2015/Solutions/Day21.fs) | [2016.21](/AdventOfCode.2016/Solutions/Day21.fs) | [2017.21](/AdventOfCode.2017/Solutions/Day21.fs) | [2018.21](/AdventOfCode.2018/Solutions/Day21.fs) |  |\n| 22 | [2015.22](/AdventOfCode.2015/Solutions/Day22.fs) | [2016.22](/AdventOfCode.2016/Solutions/Day22.fs) | [2017.22](/AdventOfCode.2017/Solutions/Day22.fs) | [2018.22](/AdventOfCode.2018/Solutions/Day22.fs) |  |\n| 23 | [2015.23](/AdventOfCode.2015/Solutions/Day23.fs) | [2016.23](/AdventOfCode.2016/Solutions/Day23.fs) | [2017.23](/AdventOfCode.2017/Solutions/Day23.fs) | [2018.23](/AdventOfCode.2018/Solutions/Day23.fs) |  |\n| 24 | [2015.24](/AdventOfCode.2015/Solutions/Day24.fs) | [2016.24](/AdventOfCode.2016/Solutions/Day24.fs) | [2017.24](/AdventOfCode.2017/Solutions/Day24.fs) | [2018.24](/AdventOfCode.2018/Solutions/Day24.fs) |  |\n| 25 | [2015.25](/AdventOfCode.2015/Solutions/Day25.fs) | [2016.25](/AdventOfCode.2016/Solutions/Day25.fs) | [2017.25](/AdventOfCode.2017/Solutions/Day25.fs) | [2018.25](/AdventOfCode.2018/Solutions/Day25.fs) |  |"}, {"author": "campoy", "repo": "campoy/advent-of-code-2018", "language": "Go", "language_all": {"Go": 45969}, "readme_contents": "# advent-of-code-2018\n\nMy solutions for [advent of code 2018](https://adventofcode.com/2018).\n\nAll of the solutions have been written while streaming on\nthe [justforfunc twitch channel](https://www.twitch.tv/justforfunclive).\n\nIf you have any questions about the code feel free to send issues,\nor ask me directly on twitter at [@francesc](https://twitter.com/francesc).\n\nBig shout-out to [Eric Wastl](https://twitter.com/ericwastl) for this\namazing series of problems!"}, {"author": "gchan", "repo": "gchan/advent-of-code-ruby", "language": "Ruby", "language_all": {"Ruby": 186686, "Shell": 393}, "readme_contents": "# Advent of Code Solutions\n\n[My](https://github.com/gchan/) solutions to the programming puzzles on [Advent of Code](http://adventofcode.com/).\n\nSolutions are written in [Ruby](https://www.ruby-lang.org/en/).\n\nAs of late December 2015, I decided to learn a bit about [Go](https://golang.org/) and redo the puzzles! My solutions in Go can be found [here](https://github.com/gchan/advent-of-code-go).\n\n### What is Advent of Code?\n\n_\"Advent of Code is a series of small programming puzzles for a variety of skill levels. They are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code. Each puzzle calls upon different skills and has two parts that build on a theme.\"_\n\n### License\n\nMIT\n\n[![Analytics](https://ga-beacon.appspot.com/UA-70790190-2/advent_of_code_ruby/README.md?flat)](https://github.com/igrigorik/ga-beacon)\n"}, {"author": "glguy", "repo": "glguy/advent2017", "language": "Haskell", "language_all": {"Haskell": 81338, "Rust": 11238, "Lua": 6646}, "readme_contents": "# advent2017\n[Advent of Code](https://adventofcode.com) 2017 solutions\n\nI post my solutions as I finish them once the leaderboard for the day fills up. After submitting my\nanswer for the day I will typically go back and add type signatures, comments, and improve the\nstructure of the code.\n\nPlease join Freenode's #haskell channel if you're interested in discussing Haskell solutions to the AoC problems.\nWe'll be talking about them most of December.\n\n## Building\n\nThis project was built using GHC 8.2.2\n\nFor easiest building I recommend running `cabal new-build`\n\n## Final stats\n\n```\nYou have 2546 points. (13th place)\n\n      -------Part 1--------   -------Part 2--------\nDay       Time  Rank  Score       Time  Rank  Score\n 25   00:11:46   130      0   00:11:54   120      0\n 24   00:07:26    11     90   00:08:56     7     94\n 23   00:03:54    50     51   00:41:45    54     47\n 22   00:08:45    22     79   00:13:16    13     88\n 21   00:16:23     4     97   00:16:41     4     97\n 20   00:07:00    29     72   00:10:55    10     91\n 19   00:11:07    37     64   00:13:35    43     58\n 18   00:25:14   333      0   00:38:27    83     18\n 17   00:06:00    81     20   00:10:50    27     74\n 16   00:08:22    92      9   00:14:47    29     72\n 15   00:04:01    39     62   00:04:52    13     88\n 14   00:04:17     7     94   00:10:30     5     96\n 13   10:46:01  4654      0   10:48:32  3651      0\n 12   00:03:31    26     75   00:06:01    34     67\n 11   00:08:32   104      0   00:09:13    56     45\n 10   00:18:14   236      0   00:25:55   103      0\n  9   00:14:02   252      0   00:15:54   210      0\n  8   00:05:51    46     55   00:06:36    41     60\n  7   00:08:11   228      0   00:18:26    53     48\n  6   00:04:26    18     83   00:06:02    17     84\n  5   00:02:29    33     68   00:06:05   191      0\n  4   00:00:48     4     97   00:01:10     1    100\n  3   00:12:31   185      0   00:20:15    71     30\n  2   00:01:45    48     53   00:03:37    32     69\n  1   00:02:21    24     77   00:03:29    27     74\n  ```\n"}, {"author": "ttencate", "repo": "ttencate/aoc2017", "language": "Eiffel", "language_all": {"Eiffel": 14818, "Cuda": 6146, "F#": 4715, "TeX": 4411, "Erlang": 4388, "J": 4342, "Java": 4228, "Pony": 3357, "Forth": 3311, "Nim": 3181, "Clojure": 3103, "Elixir": 2897, "Kotlin": 2351, "PHP": 2259, "Tcl": 2073, "CoffeeScript": 1969, "Smalltalk": 1914, "Makefile": 1834, "Dart": 1574, "Julia": 1326, "Awk": 729, "MATLAB": 453}, "readme_contents": "# Polyglot Advent of Code 2017\n\n[Advent of Code 2017](http://adventofcode.com/2017) is a programming contest,\nin which a new puzzle comes online every day from 1 until 25 December. These\nare my solutions to the puzzles. Like\n[last year](https://github.com/ttencate/aoc2016), I solved each day's puzzle in\na different programming language. As an additional additional challenge, I\ndidn't use any language I used last year!\n\nA [retrospective](RETROSPECTIVE.md) is now available. Moreover, each solution\nsubdirectory contains a `README.md` with my thoughts on that day's language.\n\n## Languages\n\nI used only \"mainstream\" programming languages, not esoteric or toy\nlanguages, because this was hard enough as is. However, I did include some\nolder languages in the list out of historic interest. Plus, a free (as in beer)\nimplementation for Linux had to exist.\n\nLanguages I could still have used, in alphabetical order:\n\n* Ada\n* ALGOL 60\n* APL\n* BLISS\n* Boo\n* COMAL\n* Common Lisp\n* C\u00e9u\n* Ceylon\n* Crystal\n* [Dyon](https://github.com/PistonDevelopers/dyon)\n* Elm (browser only)\n* GDscript\n* GLSL\n* [Gluon](https://github.com/gluon-lang/gluon)\n* Idris\n* Infinifactory\n* Inform7\n* Io\n* Labview\n* [Little](http://www.little-lang.org/)\n* Logtalk\n* M4\n* Modula-3\n* MUMPS\n* Nemerle\n* Pharo\n* PL/I\n* Postscript\n* Prolog\n* REBOL\n* Self\n* SNOBOL\n* Wren\n\nUsed, in alphabetical order (this year's entries in bold):\n\n* **ALGOL 68** ([2017, day 5](https://github.com/ttencate/aoc2017/tree/master/05_algol68))\n* Assembly, any architecture (x86, [2016, day 7](https://github.com/ttencate/aoc2016/tree/master/07_x86_assembly))\n* **awk** ([2017, day 4](https://github.com/ttencate/aoc2017/tree/master/04_awk))\n* **BASIC** (BBC BASIC, [2017, day 17](https://github.com/ttencate/aoc2017/tree/master/17_bbcbasic))\n* C ([2016, day 23](https://github.com/ttencate/aoc2016/tree/master/23_c))\n* C++ ([2016, day 24](https://github.com/ttencate/aoc2016/tree/master/24_cpp))\n* C# ([2016, day 17](https://github.com/ttencate/aoc2016/tree/master/17_cs))\n* **Clojure** ([2017, day 19](https://github.com/ttencate/aoc2017/tree/master/19_clojure))\n* COBOL ([2016, day 1](https://github.com/ttencate/aoc2016/tree/master/01_cobol))\n* **CUDA** ([2017, day 14](https://github.com/ttencate/aoc2017/tree/master/14_cuda))\n* **CoffeeScript** ([2017, day 7](https://github.com/ttencate/aoc2017/tree/master/07_coffeescript))\n* D ([2016, day 11](https://github.com/ttencate/aoc2016/tree/master/11_d))\n* **Dart** ([2017, day 12](https://github.com/ttencate/aoc2017/tree/master/12_dart))\n* **Eiffel** ([2017, day 18](https://github.com/ttencate/aoc2017/tree/master/18_eiffel))\n* **Elixir** ([2017, day 22](https://github.com/ttencate/aoc2017/tree/master/22_elixir))\n* **Erlang** ([2017, day 10](https://github.com/ttencate/aoc2017/tree/master/10_erlang))\n* **F#** ([2017, day 16](https://github.com/ttencate/aoc2017/tree/master/10_fsharp))\n* **Forth** ([2016, day 2](https://github.com/ttencate/aoc2017/tree/master/02_forth))\n* Fortran 90 ([2016, day 8](https://github.com/ttencate/aoc2016/tree/master/08_fortran))\n* Go ([2016, day 25](https://github.com/ttencate/aoc2016/tree/master/25_go))\n* Groovy ([2016, day 13](https://github.com/ttencate/aoc2016/tree/master/13_groovy))\n* Haskell ([2016, day 16](https://github.com/ttencate/aoc2016/tree/master/16_haskell))\n* Haxe ([2016, day 22](https://github.com/ttencate/aoc2016/tree/master/22_haxe))\n* **Icon** ([2017, day 21](https://github.com/ttencate/aoc2017/tree/master/21_icon))\n* JavaScript ([2016, day 20](https://github.com/ttencate/aoc2016/tree/master/20_javascript))\n* **J** ([2017, day 11](https://github.com/ttencate/aoc2017/tree/master/11_j))\n* **Java** ([2017, day 24](https://github.com/ttencate/aoc2017/tree/master/24_java))\n* **Julia** ([2017, day 9](https://github.com/ttencate/aoc2017/tree/master/09_julia))\n* **Kotlin** ([2017, day 25](https://github.com/ttencate/aoc2017/tree/master/25_kotlin))\n* Lua ([2016, day 18](https://github.com/ttencate/aoc2016/tree/master/18_lua))\n* **Nim** ([2017, day 20](https://github.com/ttencate/aoc2017/tree/master/20_nim))\n* OCaml ([2016, day 12](https://github.com/ttencate/aoc2016/tree/master/12_ocaml))\n* **Octave** ([2017, day 13](https://github.com/ttencate/aoc2017/tree/master/13_octave))\n* OpenCL ([2016, day 14](https://github.com/ttencate/aoc2016/tree/master/14_opencl))\n* Pascal ([2016, day 10](https://github.com/ttencate/aoc2016/tree/master/10_pascal))\n* Pen and paper (and a calculator) ([2016, day 15](https://github.com/ttencate/aoc2016/tree/master/15_pen_and_paper))\n* Perl ([2016, day 21](https://github.com/ttencate/aoc2016/tree/master/21_perl))\n* **PHP** ([2017, day 23](https://github.com/ttencate/aoc2017/tree/master/23_php))\n* **Pony** ([2017, day 15](https://github.com/ttencate/aoc2017/tree/master/15_pony))\n* **PostgreSQL** ([2017, day 1](https://github.com/ttencate/aoc2017/tree/master/01_postgresql))\n* Python ([2016, day 5](https://github.com/ttencate/aoc2016/tree/master/05_python))\n* R ([2016, day 6](https://github.com/ttencate/aoc2016/tree/master/06_r))\n* Ruby ([2016, day 19](https://github.com/ttencate/aoc2016/tree/master/19_ruby))\n* Rust ([2016, day 9](https://github.com/ttencate/aoc2016/tree/master/09_rust))\n* Scala ([2016, day 3](https://github.com/ttencate/aoc2016/tree/master/03_scala))\n* Scheme ([2016, day 2](https://github.com/ttencate/aoc2016/tree/master/02_scheme))\n* Sh (bash and common shell utilities) ([2016, day 4](https://github.com/ttencate/aoc2016/tree/master/04_bash))\n* **Smalltalk** ([2017, day 6](https://github.com/ttencate/aoc2017/tree/master/06_smalltalk))\n* **TCL** ([2017, day 3](https://github.com/ttencate/aoc2017/tree/master/03_tcl))\n* **TeX** ([2017, day 8](https://github.com/ttencate/aoc2017/tree/master/08_tex))\n\n## Rules\n\n* Input should be read from stdin if at all possible. Otherwise, read from a\n  file named `input`.\n* The input file must be read and parsed exactly as provided. No modifications\n  are allowed.\n"}, {"author": "NiXXeD", "repo": "NiXXeD/adventofcode", "language": "JavaScript", "language_all": {"JavaScript": 114189}, "readme_contents": "# adventofcode\nSolving http://adventofcode.com puzzles\n\nI'm mostly doing [code golf](https://en.wikipedia.org/wiki/Code_golf) with these solutions, so they will seem very terse.\nNo, I don't code like this at work.\n\nUsing Node v6 for ES6 syntax and features.\n\nTo run one day/part\n---\n```\n# run a specific year, day, part\nnpm start <year#> <day#> <part#>\n \n# assumes latest year\nnpm start <day#> <part#>\n \n# assumes latest year and day\nnpm start <part#>\n \n# assumes latest year, day, and part\nnpm start\n```\n\nExample run\n---\n```\nnpm start 2015 6 1\n \n> 6.1 running...\n> 6.1 answer:\t   543903\n> 6.1 time:\t   00:09:7400\n```\n\nTo test\n---\n```\n# run tests for 2015\nnpm run test-2016\n \n# run tests for 2016\nnpm run test-2016\n \n# run tests for latest year\nnpm test\n```\n\nTo set up a new day\n---\nCreates the folder `dayN`, the files `input`, `part1.js`, `part2.js`, and tests in \n`test.js` for the provided year.\n\n```\n# set up the next day in the current year\nnpm run setup\n \n# set up an exact year / day\nnpm run setup 2016 12\n```\n"}, {"author": "bhauman", "repo": "bhauman/advent-of-clojure", "language": "Clojure", "language_all": {"Clojure": 124039}, "readme_contents": "# Advent of Clojure\n\nMy [Advent of Code](http://adventofcode.com/) Solutions in Clojure.\n\n## Code layout\n\n**The solutions** are in the `src/advent-[year]` directories.\n\n**The problem inputs** are in the `resources/[year]` directories.\n\n## Solutions\n\nWhen you are finished working on the problem, there are solutions\navailable for you to get another point of view on the problem.\n\n* [2015](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2015)\n* [2016](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2016)\n* [2017](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2017)\n* [2018](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2018)\n\n![advent tree](https://raw.githubusercontent.com/bhauman/advent-of-clojure/master/resources/2015/advent_tree.png)\n\nFor more coding problems see [4Clojure](https://www.4clojure.com/)\n"}, {"author": "kodsnack", "repo": "kodsnack/advent_of_code_2018", "language": "C++", "language_all": {"C++": 885888, "Python": 510575, "PLSQL": 271161, "C#": 250234, "JavaScript": 158106, "Clojure": 100063, "Go": 55916, "Haskell": 38650, "OCaml": 35422, "PHP": 31226, "Java": 30680, "Ruby": 29983, "OpenEdge ABL": 19512, "Rust": 14277, "CMake": 12986, "REXX": 8680, "PowerShell": 6742, "Scala": 6376, "Shell": 4773, "D": 4265, "Brainfuck": 4118, "Pascal": 2691, "Nim": 2400, "Gnuplot": 1854, "Prolog": 1763, "C": 1548, "Common Lisp": 1285, "Swift": 1048, "Kotlin": 578, "Makefile": 41, "MATLAB": 22}, "readme_contents": "# Advent of code 2018\nContribute your solutions to [Advent of Code 2018](https://adventofcode.com) and be inspired by others.\n\nBidra med dina l\u00f6sningar p\u00e5 problemen i Advent of code, i vilket spr\u00e5k du vill. V\u00e4lj ett du kan, eller ett du vill l\u00e4ra dig! Vi har ocks\u00e5 en ledarbr\u00e4da (leaderboard) p\u00e5 Advent of code: koden till ledarbr\u00e4dan \u00e4r 194162-e06e748d.\n\nVi har ocks\u00e5 en Slackkanal dit alla \u00e4r v\u00e4lkomna att snacka Advent of code, eller egentligen allt mellan himmel och jord med lite koppling till kod. Maila info@kodsnack.se eller twittra din epost till @kodsnack s\u00e5 sl\u00e4pper vi in er.\n\nDina l\u00f6sningar f\u00e5r g\u00e4rna checkas in i en mapp med namn p\u00e5 formen #anv\u00e4ndarnamn-spr\u00e5k#, s\u00e5 blir det lite l\u00e4ttare f\u00f6r alla att f\u00e5 \u00f6verblick.\n\nL\u00f6sningarna kan komma att diskuteras i avsnitt av Kodsnack, s\u00e5 l\u00e4gg med en readme.md med en notis om du inte vill riskera att bli omn\u00e4mnd.\n"}, {"author": "BenoitZugmeyer", "repo": "BenoitZugmeyer/RustyAdventOfCode", "language": "Rust", "language_all": {"Rust": 372999, "Shell": 4494}, "readme_contents": "### Rusty Advent Of Code\n\nMy solutions for [Advent Of Code](http://adventofcode.com) written in Rust. I am doing it as an\nexercise to learn this language, so the code may contain many mistakes. Let me know if you have any\nadvice or question!\n\n### Other Rust implementations\n\nAdd your own by submitting a pull request.\n\n#### In progress (current year)\n\n| Repository | Twitter profile | Editions |\n|--|--|--|\n| [anowell/advent-of-code](https://github.com/anowell/advent-of-code) | - | 2018 |\n| [baszalmstra/adventofcode2018](https://github.com/baszalmstra/adventofcode2018) | - | 2018 |\n| [birkenfeld/advent18](https://github.com/birkenfeld/advent18) | - | 2018 |\n| [BurntSushi/advent-of-code](https://github.com/BurntSushi/advent-of-code) | - | 2018 |\n| [butzsch/Advent-of-Code-2018](https://github.com/butzsch/Advent-of-Code-2018) | - | 2018 |\n| [dgel/adventOfCode2018](https://github.com/dgel/adventOfCode2018) | - | 2018 |\n| [dsilvers/aoc](https://git.gitano.org.uk/personal/dsilvers/aoc.git/tree) | [@dsilverstone](https://twitter.com/dsilverstone) | 2018 |\n| [gobanos/advent-of-code-2018](https://github.com/gobanos/advent-of-code-2018) | - | 2018 |\n| [gperinazzo/advent-of-code-2018](https://github.com/gperinazzo/advent-of-code-2018) | - | 2018 |\n| [hedvigoscar/adventofcode2018](https://github.com/hedvigoscar/adventofcode2018) | - | 2018 |\n| [m-rutter/advent-of-code](https://github.com/m-rutter/advent-of-code) | [@m_rutter](https://twitter.com/m_rutter) | 2017, 2018 \n| [jfro/AoC2018](https://github.com/jfro/AoC2018) | [@jeromejtk](https://twitter.com/jeromejtk) | 2018 |\n| [JMS55/advent-of-code-2018](https://gitlab.com/JMS55/advent-of-code-2018) | - | 2018 |\n| [jsdw/advent-of-code-2018](https://github.com/jsdw/advent-of-code-2018) | - | 2018 |\n| [KonradBorowski/advent-of-code-2018](https://gitlab.com/KonradBorowski/advent-of-code-2018) | - | 2018 |\n| [LLBlumire/AoC2018](https://github.com/LLBlumire/AOC2018) | [@llblumire](https://twitter.com/llblumire) | 2018 |\n| [pivovarit/advent_of_code_2018_rs](https://github.com/pivovarit/advent_of_code_2018_rs) | [@pivovarit](https://twitter.com/pivovarit) | 2018 |\n| [shssoichiro/aoc2018](https://git.onewebdev.info/soichiro/aoc2018) | - | 2018 |\n| [theonewolf/aoc2018](https://github.com/theonewolf/aoc2018) | [@theonewolf](https://twitter.com/theonewolf) | 2018 |\n| [udoprog/rust-advent-of-code-2018](https://github.com/udoprog/rust-advent-of-code-2018) | - | 2018 |\n\n#### Finished\n\n| Repository | Twitter profile | Editions |\n|--|--|--|\n| [birkenfeld/advent15](https://github.com/birkenfeld/advent15) | - | 2015 |\n| [birkenfeld/advent16](https://github.com/birkenfeld/advent16) | - | 2016 |\n| [birkenfeld/advent17](https://github.com/birkenfeld/advent17) | - | 2017 |\n| [dgel/adventOfCode2017](https://github.com/dgel/adventOfCode2017) | - | 2017 |\n| [dsilvers/aoc](https://git.gitano.org.uk/personal/dsilvers/aoc.git/tree) | [@dsilverstone](https://twitter.com/dsilverstone) | 2015, 2016, 2017 |\n| [jsdw/advent-of-code-2017](https://github.com/jsdw/advent-of-code-2017) | - | 2017 |\n| [jugglerchris/aoc2017](https://github.com/jugglerchris/aoc2017) | [@jugglerchris](https://twitter.com/jugglerchris) | 2017 |\n| [JWorthe/advent_of_code_2017](https://github.com/JWorthe/advent_of_code_2017) | [@JWorthe](https://twitter.com/JWorthe) | 2017 |\n| [JWorthe/adventofcode2016](https://github.com/JWorthe/adventofcode2016) | [@JWorthe](https://twitter.com/JWorthe) | 2016 |\n| [McGittyHub/aoc-2k17](https://github.com/McGittyHub/aoc-2k17) | [@snarf95](https://twitter.com/snarf95) | 2017 |\n| [sciyoshi/advent-of-rust-2017](https://github.com/sciyoshi/advent-of-rust-2017) | [@sciyoshi](https://twitter.com/sciyoshi) | 2017 |\n| [thejpster/rust-advent-of-code](https://github.com/thejpster/rust-advent-of-code) | [@therealjpster](https://twitter.com/therealjpster) | 2016, 2017 |\n| [udoprog/rust-advent-of-code-2017](https://github.com/udoprog/rust-advent-of-code-2017) | [@udoprog](https://twitter.com/udoprog) | 2017 |\n| [zargony/advent-of-code-2015](https://github.com/zargony/advent-of-code-2015) | [@zargony](https://twitter.com/zargony) | 2015 |\n| [zargony/advent-of-code-2016](https://github.com/zargony/advent-of-code-2016) | [@zargony](https://twitter.com/zargony) | 2016 |\n| [zargony/advent-of-code-2017](https://github.com/zargony/advent-of-code-2017) | [@zargony](https://twitter.com/zargony) | 2017 |\n\n#### Unfinished\n\n| Repository | Twitter profile | Editions |\n|--|--|--|\n| [adamchalmers/adventofcode2017](https://github.com/adamchalmers/adventofcode2017) | [@adam_chal](https://twitter.com/adam_chal) | 2017 |\n| [bolshchikov/adventofcode-solutions](https://github.com/bolshchikov/adventofcode-solutions) | [@bolshchikov](https://twitter.com/bolshchikov) | 2017 |\n| [cameronp/aoc17](https://github.com/cameronp/aoc17) | [@cameronp](https://twitter.com/cameronp) | 2017 |\n| [jasonpeacock/advent-of-code-2017](https://github.com/jasonpeacock/advent-of-code-2017) | [@jasonpeacock](https://twitter.com/jasonpeacock) | 2017 |\n| [joelverhagen/adventofcode](https://github.com/joelverhagen/adventofcode) | [@joelverhagen](https://twitter.com/joelverhagen) | 2015, 2016, 2017 |\n| [mgritter/aoc2017](https://github.com/mgritter/aoc2017) | [@markgritter](https://twitter.com/markgritter) | 2017 |\n| [rje/aoc2017](https://github.com/rje/aoc2017) | [@rje](https://twitter.com/rje) | 2017 |\n| [StreakyCobra/advent-of-code-2017](https://github.com/StreakyCobra/advent-of-code-2017) | [@StreakyCobra](https://twitter.com/StreakyCobra) | 2017 |\n| [ubsan/advent-of-code](https://github.com/ubsan/advent-of-code) | [@ubsanitizer](https://twitter.com/ubsanitizer) | 2016 |\n| [wezm/advent-of-code](https://github.com/wezm/advent-of-code) | [@wezm](https://twitter.com/wezm) | 2017 |\n| [xfix/advent-of-code-2017](https://github.com/xfix/advent-of-code-2017) | - | 2017 |\n"}, {"author": "mvaldesdeleon", "repo": "mvaldesdeleon/aoc18", "language": "Haskell", "language_all": {"Haskell": 126402}, "readme_contents": "# Advent of Code 2018\n\nAdvent of Code 2018, in Haskell\n\nhttp://adventofcode.com/2018\n\n# Instructions\n\nYou should have [stack](https://docs.haskellstack.org/en/stable/README/) installed before continuing.\n\n```sh\ngit clone git@github.com:mvaldesdeleon/aoc18.git\ncd aoc18\nstack build\nstack exec day[1-25]\n# i.e., stack exec day15\n```\n\n# Reflections\n\nI wrote an article based on my experience doing this Advent of Code in Haskell.\n\n[Advent of Haskell - Thoughts and lessons learned after using Haskell consistently for 25 days in a row](https://medium.com/@mvaldesdeleon/advent-of-haskell-950d6408a729)\n\n# License\n\nBSD-3-Clause\n"}, {"author": "MicUurloon", "repo": "MicUurloon/AdventurePathfinding", "language": "Haxe", "language_all": {"Haxe": 29269}, "readme_contents": "# AdventurePathfinding\nExample code of a pathfinding method for 2d point and click adventure game\nThis project is part of a blog entry: : http://www.groebelsloot.com/2016/03/13/pathfinding-part-2/\n\nThis software is written in [Haxe](https://www.haxe.org) using [Luxe](http://luxeengine.com/) as a game framework.\nA web build of this software can be found here: http://groebelsloot.com/examples/pathfinding/\n\n*This is free and unencumbered software released into the public domain.*\n\n*Anyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.*\n"}, {"author": "lukechampine", "repo": "lukechampine/advent", "language": "Go", "language_all": {"Go": 1400173, "Zig": 16535, "Haskell": 9870, "Rust": 4842, "Assembly": 503}, "readme_contents": null}, {"author": "birkenfeld", "repo": "birkenfeld/advent18", "language": "Rust", "language_all": {"Rust": 59885, "Makefile": 400}, "readme_contents": "## \ud83c\udf84 Advent of Code 2018 \ud83c\udf84\n\nThese are Rust-language solutions for the [coding-challenge advent\ncalendar](http://adventofcode.com/2018).  You'll need stable Rust 1.31 and Cargo\nto run.\n\nI've tried to make the solutions small and somewhat optimized for speed (so far,\nno solution takes more than about a second on an up-to-date machine).  Inputs\nare included in text file form and parsed.\n\n### External code used\n\nA custom helper library is used, called `advtools`.  It provides utilities for\neasily parsing the input files, which I don't want to rewrite each year, and\naccess to often used external crates like itertools and rayon.\n\nFor tasks that require nontrivial datastructures or algorithms, I try to find\nand use a third-party crate to show off the ease of using Rust's crates\ninfrastructures, e.g. `petgraph`.\n\n### Building/benchmarking\n\nAll code is contained in a single Cargo project, with a different binary target\nfor each day.  Solutions are printed to stdout.\n\nA simple Makefile is also provided in order to run all days.  Just run `make`.\n\nBenchmarks are now provided by criterion.rs, use\n```\ncargo bench --bench days [filter]\n```\nto run them.\n"}, {"author": "njoubert", "repo": "njoubert/RaspberryPiChristmasCodingAdventure", "language": null, "language_all": {}, "readme_contents": "# A Raspberry Pi Christmas Coding Adventure!\n\nDieter, Pierre-Henri and Gleb gets Raspberry Pi computers for Christmas, and embarks on a *Coding Adventure!*\n\nThis document gives you everything you need to get hacking with the Raspberry Pi!\n\n\n| Section | **Table of Contents** | \n|---------|-----------------------|\n|1|[What is a Raspberry Pi?](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#what-is-the-raspberry-pi)|\n|2|[Step-By-Step Getting Started and Warm-up 15-minute Projects!](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#how-do-we-get-started)|\n|3|[What Can I Build?](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#ok-i-guess-thats-cool-what-can-i-build)|\n|4|[Learning More: My Curriculum for Next Steps with Guides and Resources](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure/blob/master/README.md#learning-more-next-steps-guides-and-resources)|\n|5|[Inspiring Projects, Great Communities, and Awesome Additions to the Pi!](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure/blob/master/README.md#inspiring-projects-great-communities-and-awesome-additions-to-the-pi)|\n|6|[What's in the Kit?](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#whats-in-the-box)|\n|7|[Useful Testing Tools and Debugging Procedures](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#useful-testing-tools)|\n\n### What the hell Niels, what kind of Christmas gift is this? Now what?\n\n1. I just gave all you guys **real computers!**. It can do everything your laptop can do!\n2. You can actually build stuff with it! \n\t- Simple stuff, like hook up speakers to it and use it as a music player... or\n\t- Build your own Hardware! You can connect buttons, lights, a small screen, etc!\n\n### What is the Raspberry Pi?\n\nIt's basically the innards of an iPhone 5, with all the pins exposed! It's built and maintained by the [Raspberry Pi foundation](https://www.raspberrypi.org/) as an educational tool.\n\n- It has a powerful graphics card, can play 1080p video and has HDMI out!\n- It can run either Linux or Android, and is built for easy programming! We'll mess around with Linux and Python!\n- You can easily build your own hardware and attach it! Like buttons, LEDs, the christmas lights, etc...\n- It's the most popular educational computer on the market!\n\nSpecifically, I gave you guys the newest Raspberry Pi 2! [Here's the Specs](https://www.raspberrypi.org/products/raspberry-pi-2-model-b/)\n\n### How do we get started?\n\nRaspberry Pi has a [quickstart guide here.](https://www.raspberrypi.org/help/quick-start-guide/) \n\n**Step 1: Setup!** \n\n[Copy NOOBS onto the SD card I gave you using your computer. Then stick it into your Raspberry Pi.](https://www.raspberrypi.org/help/noobs-setup/)\n\n**Step 2: Connect!** \n\nPlug your Raspberry Pi into a monitor, keyboard, mouse and power! Then follow the NOOBS installer to install Raspbian (a derivative of Debian Linux, just like Ubuntu)\n\n**Step 3: Mini Project: LEDs and Buttons!** \n\nLet's do some [Physical Computing on the Raspberry Pi!](https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/) Try to make a little circuit with an LED, and [use python to turn it on and off using the GPIO pins!](http://openmicros.org/index.php/articles/94-ciseco-product-documentation/raspberry-pi/217-getting-started-with-raspberry-pi-gpio-and-python)\n\nExpand it to also read the value of buttons!\n\n\t*CAREFUL:* You CAN damage your raspberry pi by connecting the pins incorrectly!\n\n\t1. ALWAYS disconnect your circuit before plugging and unplugging components or changing things.\n\t2. DO NOT draw more than 3.3V or less than 0V from a pin. Don't wire power directly to ground!\n\t3. Do NOT draw more than 5mA from a pin! Use the included transistors to switch higher power things on and off.\n\t4. Use Pull-down and Pull-up resistors with buttons.\n\n[What is a pull-up and pull-down resistor?](http://playground.arduino.cc/CommonTopics/PullUpDownResistor)\n\nCheck out Pat's course CS107E, it has a [guide to basic electronics with the Raspberry Pi.](https://github.com/cs107e/courseware/blob/master/guides/electricity.md)\n\n**Step 4: Serial Bridge from Laptop to RPi!** \n\nInstall the SILABS USB to UART CP21xx driver, and try to make Python on your Raspberry Pi talk to you computer over Serial!\n\n1 \tInstall the [SILABS driver](https://www.silabs.com/products/interface/usbtouart/Pages/usb-to-uart-bridge.aspx)\n\n2\tPlug the USB to UART adapter into your computer\n\n3\tInstall a serial console on your computer, like [CoolTerm](http://freeware.the-meiers.org/)\n\n4\t[Write a Raspberry Pi program to send and receive serial data](http://www.instructables.com/id/Read-and-write-from-serial-port-with-Raspberry-Pi/), and see if it shows up on your laptop.\n\n**Step 5: Mini Project: Transistors and Lasers!** \n\nSwitch the Laser on and off with the Raspberry Pi using transistors!\n\nThe laser wants a higher voltage and higher current supply than the Raspberry Pi can provide. This is where you can use the transistor: The transistor is just a switch. A switch you can control electronically. By switching low power on the \"base\" pin, you can control whether high power flows through the other pins.\n\nFollow [This article on how to switch 9v using a NPN transistor](https://electronics.stackexchange.com/questions/95089/switching-9v-using-a-npn-transistor-and-an-arduino) and hook up a higher voltage to your laser!\n\n**Step 6: Mini Project: Servos and why you also need an Arduino!** \n\nDrive a Servo with PWM!\n\n[Make the servo turn left and right from Python!](http://razzpisampler.oreilly.com/ch05.html)\n\nPython is not great for driving Servos (and Linux in general isn't!) since it doesn't guarantee the *timing* of when things will happen. The same little processor is also driving your screen, mouse, keyboard, the network, keeping time, etc etc.\n\nYou can do better than python by using this [ServoBlaster Kernel Module](https://github.com/richardghirst/PiBits/tree/master/ServoBlaster) or by connecting it to an Arduino or a [Motor Shield / HAT](https://www.adafruit.com/products/2348)\n\nThe BEST you can do is to use hardware PWM. RaspberryPi has *one* dedicated little chip just to make PWM signals. This tutorial explains how to [use WiringPi to access this port.](http://raspi.tv/2013/how-to-use-wiringpi2-for-python-with-pull-ups-or-pull-downs-and-pwm)\n\n**Step 7: Start Designing Your Own Stuff, or Get Insired By Others!** \n\nRead the rest of this page, and check out the \"Cool communities and places to look\" or google for \"Raspberry Pi projects\"!\n\n### OK I guess that's cool... What can I build?\n\nWe can built *lots* of stuff. But that's not a useful answer. The RaspberryPi is *primarily an educational tool*, but it's beefy enough to do tons of real-world stuff. So, here's the *capabilities* of this little kit:\n\nThe **RaspberryPi** is a quad-core 1Ghz computer, with 1Gb RAM and a 16GB SD card for storage. It has a **fast graphics card** on it (for its size) that can decode 1080p movies to your big screen (1920x1080 maximum resolution). So, you can definitely play movies, netflix, youtube, all that kinds of stuff on here. \n\nIt also has **100Mbps ethernet and four USB2.0 ports**. So you can plug in (multiple!) external hard drives, and you can use it as a file server. It can share four hard-drives on your network. It's also powerful enough to run a webserver! You can host your own website on it. Or use it to torrent things! You can even leave it plugged into the university's network at school, and use it as a file server. Log into it remotely, and download things over the fast school internet. Host a minecraft server! Host an IRC chat server! Host a Tor node for anonymous browsing! Naturally, you can plug in many USB devices! Plug in a webcam and use it as a remote monitor!\n\nYou can **power it from batteries** (I can help you set this up), and it's reasonable to imagine getting 5 to 10 hours of battery life from it.\n\nIt runs **linux or android** so you can learn how to work with a linux system. It's a really great **machine for programming**: Use it to learn how to program all kinds of stuff in Python: For example, use PyGame to write your own game!\n\n- You can buy any size (from tiny to huge) LCD touchscreen on eBay, and [build your own tablet!](https://learn.adafruit.com/7-portable-raspberry-pi-multitouch-tablet/overview)\n- You can *build your own hardware* that connects to the GPIO pins on the side! \n\t- Buttons, switches, LEDs, and LED matrices! \n\t- Stepper motors, DC motors, servos! Things that turn!\n\t- Accelerometers, Magnetometers, Gyroscopes, Barometers, Thermometers! Tons of sensors that measure the real word!\n\nYou can make a weather station that displays the current temperature and the chance of rain. Or measure the current internet ping latency and light up a row of LEDs accordingly. You can have it check your email for you, and light up an LED for every unread message - and beep every time a new message arrives! \n\nThere's a whole range of **RaspberryPi HATs** that sit on top of the Raspberry Pi to give you additional functionalty! My favorite is the [Sense HAT](https://www.raspberrypi.org/blog/the-sense-hat-headgear-for-the-terminally-curious/)! It's currently in *space* on the ISS, and it has a ton of sensors, a small joystick, and a badass 8x8 RGB LED display matrix, so you can make cool animations.\n\nYou can pair it with **LED controllers** (like the [PixelPusher](http://www.heroicrobotics.com/products/pixelpusher)) and make an LED wall, or a starry night sky on the ceiling of your room!\n\nYou can hook up a **motor controller** and build a 2D cutter that slices up paper into shapes! Or moves a pen around to draw things programmatically! You can even build a **[robot](https://www.raspberrypi.org/blog/tag/robots/)!** A super-fancy robot would be a **[rubix cube solver](https://www.raspberrypi.org/blog/cube-solver/)**!\n\nHook it up to a Passive Infrared Sensor, and it can sense when someone is moving in your room - regardless of whether the light is on! Build a security system!\n\nHere's some more ideas:\n\n*Multimedia-related:*\n\n- Set it up as Airplay speakers! You can stream music to it from your phone!\n- Use it as a media center! Hook it up to a screen and your external harddrive, and it can play movies!\n\n*Software-related:*\n\n- Use it to run a torrent client to save stuff to your external harddrive without needing your computer\n- Make a digital picture frame! Have it cycle through instagram pictures.\n\n*Hardware-related:*\n\n- Easier:\n\t- Display temperature forecast for today on the 7-segment display\n\t- Make the buttons send emails, texts, or scroll through different things on the display\n\t- Measure latency to your favorite server, display it as an LED graph\n\t- Make a sweet animation of LEDs blinking\n- Intensely awesome:\n\t- Pair it with an Arduino Mega and RAMPS shield, and build any 3-axis movable CNC machine!\n\t- Build a 3D Printer\n\n### Learning More: Next Steps, Guides, and Resources \n\n**Where to go to learn more?**\n\nThe main programming languages I suggest is **Python** and **C**. Use Python for all the experiments and hacking, use C for things that needs to be fast or needs to run *without an operating system: bare metal right on the hardware!*\n\nHere's the **curriculum** I suggest you work through:\n\n- Pat's CS107e [Raspberry Pi Course Guides](https://github.com/cs107e/courseware/blob/master/guides/README.md)\n\t- For hardware, [understand basic electricity](https://github.com/cs107e/courseware/blob/master/guides/electricity.md)\n\t- For using a transistor as a switch, [follow this TL;DR](https://electronics.stackexchange.com/questions/95089/switching-9v-using-a-npn-transistor-and-an-arduino) then read [this tutorial](https://www.techhouse.org/~dmorris/projects/tutorials/transistor.switches.pdf)\n\t- Learn basic electronics with [Make Magazine's Awesome Video Course](http://makezine.com/2016/01/11/take-a-video-crash-course-in-beginner-electronics/)\n\t- Learn the (UNIX command line)[https://github.com/cs107e/courseware/blob/master/guides/unix.md]\n- Learn basic Python!\n\t- [Instant Hacking with Python! Short, covers all the main stuff!](http://hetland.org/writing/instant-hacking.html)\t\t- [Automate the boring stuff with Python! Lots of great useful things to build](https://automatetheboringstuff.com/)\n\t- [A Gentle Introduction to Python Coding on the Raspberry Pi](http://davidbriddock.blogspot.com/p/learn-python.html)\n\t- [Basic hardware programming with Python](http://makezine.com/projects/tutorial-raspberry-pi-gpio-pins-and-python/)\n- Once you're ready... Build your [*OWN OPERATING SYSTEM*!!](https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/index.html)\n\n\n**More Advanced Topics:**\n\n- [Write your own hardware driver for a GPIO pin](http://sysprogs.com/VisualKernel/tutorials/raspberry/leddriver/)\n\n### Inspiring Projects, Great Communities, and Awesome Additions to the Pi!\n\n**Great Communities:** A big part of building stuff is having inspiration and a community to draw from. Here's some great places that's fun to look at people's projects online:\n\n- [Raspberry Pi Blog](https://www.raspberrypi.org/blog/)\n- [Adafruit Learn](https://learn.adafruit.com/)\n- [Pimoroni Learn](http://learn.pimoroni.com/)\n- [Wolfgang Klerk's Arduino and Raspberry Pi Projects](https://wolfgangklenk.wordpress.com/)\n- [Hackaday, both the blog and the whole site](https://hackaday.com/blog/)\n- [Dangerous Prototypes](http://dangerousprototypes.com/)\n\n**Sources of Hardware and Software:** Where can you browse around and buy all the cool hardware parts for your awesome project?\n\n- [SparkFun Store](https://www.sparkfun.com/)\n- [AdaFruit Store](https://www.adafruit.com/categories)\n- [Seeed Studio](http://www.seeedstudio.com/depot/)\n- [ElectroDragon Prototyping Parts](http://www.electrodragon.com/)\n- [NavSpark GPS Modules](http://www.navspark.com.tw/)\n\n- [Adafruit Python GPIO Library](https://github.com/adafruit/Adafruit_Python_GPIO)\n \n\n**Badass Projects Built on Raspberry Pi:**\n\n- [FarmBot](https://hackaday.io/post/7593). Plants and waters a garden. Pairs a Raspberry Pi, Arduino, [stepper motor drivers](https://www.adafruit.com/products/1438)\n- [Pi Tablet](https://learn.adafruit.com/7-portable-raspberry-pi-multitouch-tablet/overview). A 7\" multitouch home-made tablet!\n- [Pi-Top Laptop](http://www.pi-top.com/). A hackable laptop - slide open the top to reveal a raspberry pi and breadboard space.\n\n**Cool hardware additions to the Raspberry Pi:**\n\n- [AdaFruit Trinket](http://learn.pimoroni.com/tutorial/raspberry-pi/raspberry-pi-programming-adafruit-trinket). Like a tiny arduino: good for PWM generation, analog sensor reading, and real-time programming.\n- [SenseHAT](https://www.adafruit.com/products/2738). So cool - RGB LED matrix and a boatload of sensors!\n- OLED Displays like [this](http://www.amazon.com/gp/product/B00O2LLT30?keywords=raspberry%20pi%20oled&qid=1451470478&ref_=sr_1_1&sr=8-1) and [this](http://www.amazon.com/gp/product/B00ZOXWA7Y?psc=1&redirect=true&ref_=oh_aui_detailpage_o03_s00). Small, cheap, low-power, programmable displays.\n- [Rechargeable LiPo power source.](https://www.adafruit.com/products/2465)\n- [LED Matrix Displays](https://www.adafruit.com/products/2345)\n- High Fidelity Audio Out such as the [pHAT DAC](https://shop.pimoroni.com/products/phat-dac) for phat beats.\n\n### What's in the Box?\n\t\nEach of you have slight variations on this, but here's the list of everything! \n\n|Img| What is it?                 | What's it for?? |\n|---|-----------------------------|-----------------|\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/01_rpi.jpg)       | 1x Raspberry Pi 2 (Model B) | A single-board 1Ghz quad-core computer with 1GB Ram! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/02_case_power.jpg)| Case and Power Supply       | Put the Pi in it, and power it up! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/03_sd.jpg)        | 16GB MicroSD Card           | This is the \"hard drive\" for your Pi! We'll put Linux on this. |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/04_uart.jpg)      | SILabs USB to UART Bridge   | We can use this to connect to the Pi from our normal computer, when we don't have a screen or a ethernet cable for the Pi. |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/05_cobbler.jpg)   | T-Cobbler                   | A simple way to connect the Pi to a breadboard to hook up electronics! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/06_bboard.jpg)    | Breadboard                  | Build electronic circuits simply by pushing components into this! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/07_cables.jpg)    | Assorted Jumper Cables      | Hook things up together! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/08_buttons.jpg)   | Buttons!                    | Program these to do something on click! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/09_led.jpg)       | R,G,B,W LEDs!               | Light them up from your code! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/10_segment.jpg)   | 7-segment display!          | Display numbers from your code! Temperature? Latency? Unread emails? Anything! |\n|   | Micro Servo!          | [Make the servo turn left and right from Python!](http://razzpisampler.oreilly.com/ch05.html) Although an arduino is really better for this, since it can run in real time rather than sitting on top of linux. |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/11_res.jpg)       | 1k and 10k Resistors!       | You need these to hook up LEDs and Buttons! |\n|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/12_trans.jpg)     | 2N3904 Transistors!         | These are NPN Transistors! General purpose digital switch and amplifier! Use it to switch on and off larger stuff from the Pi. You can build a touch switch with it! |\n\n\n\n### Useful testing tools...\n\nWhen you build stuff, you *really* need tools to test what you're doing. This avoids getting really frustrated when things don't work and you don't know why. Here's the testing tools I recommend:\n\n**Hardware:**\n\n- A multimeter! Like our Fluke! With it, you can check that something is turned on, that there's not too much or too little power before you plug something in, and what values your resistors are. This lets you measure voltage, resistance, and continuity.\n- A Serial to USB connection! I included one! This lets you plug your computer directly into anything that has a serial connection, so you can check the data going in and out of it. For example, you can check whether a GPS is actually spitting out positions before wiring it up to your raspberry pi.\n- A logic analyzer! This connects to a wire, and reads every bit going on that wire. So you can use it to \"snoop\" on the digital data sent between chips. \n- An oscilloscope for analog circuits: This can display the analog wave going along a cable. For example, this can show you the sound waves going to your speaker! So you can check whether they're distorted or clipped.\n\n\n**Software:**\n\n- First of all, use the Scientific Method to debug your code: Come up with a hypothesis for what might be wrong. Formulate an experiment to test your hypothesis. Then run your experiment and see if it proves or disproves your hypothesis. For example: Problem: \"the LED doesn't turn on\". Hypothesis: \"there is no power coming out of the raspberry pi on that pin\". Test: \"Put a multimeter between the pin and ground. It should read 0v\". Take the measurement, if it is 0v, now you know the problem must be with turning the pin on! If it is 3.3V, then the problem must be something with the LED.\n- Put \"print\" statements in your code and check that each part is working as expected.\n- Write your code in small chunks, and test every chunk.\n- Learn how to use a debugger to step through your code.\n\n"}, {"author": "aspittel", "repo": "aspittel/advent-of-code", "language": "Python", "language_all": {"Python": 41816}, "readme_contents": null}, {"author": "davedelong", "repo": "davedelong/AOC", "language": "Swift", "language_all": {"Swift": 309538}, "readme_contents": "# Advent of Code\n\nA description of this package.\n"}, {"author": "tginsberg", "repo": "tginsberg/advent-2018-kotlin", "language": "Kotlin", "language_all": {"Kotlin": 119437}, "readme_contents": "## Advent of Code 2018 Solutions in Kotlin\n\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)]()\n\nThis repo is my personal attempt at solving the [Advent of Code 2018](http://adventofcode.com/2018) set of problems with the Kotlin programming language.\n\nI am trying to solve these on the day they are posted with clear, idiomatic solutions. That means in some cases I will sacrifice performance for a more clear solution.\n\n|   Day   | Title                                         |  Links                                       |\n| --------|-----------------------------------------------|--------------------------------------------- |\n|    1    | Chronal Calibration                           | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day1/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day01.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/1) |\n|    2    | Inventory Management System                   | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day2/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day02.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/2) |\n|    3    | No Matter How You Slice It                    | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day3/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day03.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/3) |\n|    4    | Repose Record                                 | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day4/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day04.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/4) |\n|    5    | Alchemical Reduction                          | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day5/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day05.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/5) |\n|    6    | Chronal Coordinates                           | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day6/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day06.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/6) |\n|    7    | The Sum of Its Parts                          | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day7/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day07.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/7) |\n|    8    | Memory Maneuver                               | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day8/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day08.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/8) |\n|    9    | Marble Mania                                  | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day9/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day09.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/9) |\n|   10    | The Stars Align                               | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day10/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day10.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/10) |\n|   11    | Chronal Charge                                | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day11/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day11.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/11) |\n|   12    | Subterranean Sustainability                   | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day12/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day12.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/12) |\n|   13    | Mine Cart Madness                             | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day13/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day13.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/13) |\n|   14    | Chocolate Charts                              | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day14/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day14.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/14) |\n|   15    | Beverage Bandits                              | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day15/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day15.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/15) |\n|   16    | Chronal Classification                        | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day16/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day16.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/16) |\n|   17    | Reservoir Research                            | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day17/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day17.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/17) |\n|   18    | Settlers of The North Pole                    | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day18/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day18.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/18) |\n|   19    | Go With The Flow                              | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day19/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day19.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/19) |\n|   20    | A Regular Map                                 | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day20/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day20.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/20) |\n|   21    | Chronal Conversion                            | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day21/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day21.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/21) |\n|   22    | Mode Maze                                     | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day22/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day22.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/22) |\n|   23    | Experimental Emergency Teleportation          | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day23/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day23.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/23) |\n|   24    | Immune System Simulator 20XX                  | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day24/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day24.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/24) |\n|   25    | Four-Dimensional Adventure                    | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2018/day25/) [\\[Code\\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day25.kt) [\\[AoC\\]](http://adventofcode.com/2018/day/25) |\n\n\nCopyright &copy; 2018 by Todd Ginsberg.\n"}, {"author": "lynn", "repo": "lynn/aoc-2018", "language": "Rust", "language_all": {"Rust": 10748, "Idris": 10316, "Prolog": 8283, "COBOL": 4782, "Go": 3915, "C": 3457, "F#": 3164, "EmberScript": 3018, "Ruby": 2411, "Kotlin": 2317, "Haskell": 1524, "Befunge": 1271, "J": 808, "APL": 521, "Python": 445, "Perl": 335}, "readme_contents": null}, {"author": "sim642", "repo": "sim642/adventofcode", "language": "Scala", "language_all": {"Scala": 438518}, "readme_contents": "# Advent of Code solutions in Scala\n\n[![Scala CI](https://github.com/sim642/adventofcode/workflows/Scala%20CI/badge.svg?branch=master)](https://github.com/sim642/adventofcode/actions?query=workflow%3A%22Scala+CI%22)\n\n| Year | Solutions | Inputs | Tests |\n| ---- | --------- | ------ | ----- |\n| 2015 | [Solutions](src/main/scala/eu/sim642/adventofcode2015) | [My inputs](src/main/resources/eu/sim642/adventofcode2015) | [Tests](src/test/scala/eu/sim642/adventofcode2015) |\n| 2016 | [Solutions](src/main/scala/eu/sim642/adventofcode2016) | [My inputs](src/main/resources/eu/sim642/adventofcode2016) | [Tests](src/test/scala/eu/sim642/adventofcode2016) |\n| 2017 | [Solutions](src/main/scala/eu/sim642/adventofcode2017) | [My inputs](src/main/resources/eu/sim642/adventofcode2017) | [Tests](src/test/scala/eu/sim642/adventofcode2017) |\n| 2018 | [Solutions](src/main/scala/eu/sim642/adventofcode2018) | [My inputs](src/main/resources/eu/sim642/adventofcode2018), [other inputs](src/test/resources/eu/sim642/adventofcode2018) | [Tests](src/test/scala/eu/sim642/adventofcode2018) |\n| 2019 | [Solutions](src/main/scala/eu/sim642/adventofcode2019) | [My inputs](src/main/resources/eu/sim642/adventofcode2019) | [Tests](src/test/scala/eu/sim642/adventofcode2019) |\n"}, {"author": "mariotacke", "repo": "mariotacke/advent-of-code-2019", "language": "JavaScript", "language_all": {"JavaScript": 37879}, "readme_contents": "# Advent of Code 2019 - My Solutions\n[![Build Status](https://github.com/mariotacke/advent-of-code-2019/workflows/build/badge.svg)](https://github.com/mariotacke/advent-of-code-2019/actions)\n[![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2019/master/.github/badges/completion.json)](https://github.com/mariotacke/advent-of-code-2019)\n[![Dependency Status](https://img.shields.io/david/mariotacke/advent-of-code-2019.svg)](https://david-dm.org/mariotacke/advent-of-code-2019)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/mariotacke/advent-of-code-2019/master/LICENSE)\n\nSanta has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from **fifty stars**.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants **one star**. Good luck!\n\n## Days\n\n- [Day 1: The Tyranny of the Rocket Equation](day-01-the-tyranny-of-the-rocket-equation/)\n- [Day 2: 1202 Program Alarm](day-02-1202-program-alarm/)\n- [Day 3: Crossed Wires](day-03-crossed-wires/)\n- [Day 4: Secure Container](day-04-secure-container/)\n- [Day 5: Sunny with a Chance of Asteroids](day-05-sunny-with-a-chance-of-asteroids/)\n- [Day 6: Universal Orbit Map](day-06-universal-orbit-map/)\n- [Day 7: Amplification Circuit](day-07-amplification-circuit/)\n- [Day 8: Space Image Format](day-08-space-image-format/)\n- [Day 9: Sensor Boost](day-09-sensor-boost/)\n- [Day 10: Monitoring Station](day-10-monitoring-station/)\n\n## Running Tests\n\nEach day contains its own set of tests. To run them type `npm test`.\n\n## Previous Years\n- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2018/master/.github/badges/completion.json&label=2018)](https://github.com/mariotacke/advent-of-code-2018)\n- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2017/master/.github/badges/completion.json&label=2017)](https://github.com/mariotacke/advent-of-code-2017)\n- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2016/master/.github/badges/completion.json&label=2016)](https://github.com/mariotacke/advent-of-code-2016)\n- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2015/master/.github/badges/completion.json&label=2015)](https://github.com/mariotacke/advent-of-code-2015)\n\n## Visit\n- http://adventofcode.com/2019\n"}, {"author": "zero-to-mastery", "repo": "zero-to-mastery/coding_challenge-12", "language": null, "language_all": {}, "readme_contents": "# Coding Challenge 12 - Advent of Code 2018\n\nThis month we are doing a special coding challenge! December is the best time of the year to be a programmer since the [Advent of Code](https://adventofcode.com/) begins! Every day, we are going to have a programming problem that we all need to solve for 25 days straight. The beauty will be that you will be able to see your solution and compare it with all the other students from our community! **When it comes to problem solving, in my opinion, Advent of Code is the best resource avilable to make you a better logical thinker through code. I cannot recommend it enough if you want to become a better coder so I hope you can all participate even if it is just a few days**. \n\n## What is the Challenge?\nEach day Advent of Code will give you a problem to solve. Each day, the questions get harder and harder. All you will need to do is to submit your code anytime you finish the question (Please note: Although each day is a new question, you can submit your code anytime and even do the questions a few days late if you miss the actual day)\n\n### Here are the steps:\n1. Read the about section here: https://adventofcode.com/2018/about\n2. Watch **Santa's Node Helper** videos - Lecture 240, 241 and 242 in the Complete Web Developer in 2019 course to see me solve one of these problems. *this is optional for those that have the course*\n3. Start solving problems starting December 1st, 2018!\n4. Submit your code and share it with the rest of our community every day by following the steps below. All community code will be on a website built by @Matt and @notAnkur - https://zerotomastery.io/events/advent-of-code.html (note: You will see test entries before the challenge begins Dec 1st in order to show you how it will work. These dummy entries will be removed come the beginning of the challenge)\n\n## How to submit and view Solutions:\nThanks to @Matt and @notAnkur, we have a great system in place for you to submit your daily code, and compare your answer to the rest of the students who will participate in the challenge. Here is how it will work and how you can see other submissions:\n\n### Submit your solution\n1. Add your solution to a platform such as Github, Repl.it, Glot.io and grab the link for it.\n2. Head on over to #coding-challenge\n3. Use the following command structure to infrom the bot of your solution (See examples):\n ```+aoc submit <Day> <URL-Link> <Solution Language>```\n4. If successful you should have a parrot emoji and your solution will be list in #submissions and on the website: https://zerotomastery.io/events/advent-of-code.html\n\n![Channel Listing](https://cdn.discordapp.com/attachments/486857368249040906/518019412838842368/unknown.png)\n\n#### Examples\n```+aoc submit 1 https://mylink.com/ javascript```\n\n```+aoc submit 4 https://github.com/test/link python```\n\n```+aoc submit 24 https://tests.com/ssj py```\n\n```+aoc submit 4 https://mttadddadasejs.com/sssj js```\n\n```+aoc submit 4 https://mttejs.net/ssj java```\n\n### View Solutions\nSolutions will obviously be listed in the #submissions channel on Discord, but we also have a web interface available, with sorting and filtering capabilities [here](https://zerotomastery.io/events/advent-of-code.html). \n\n\n## Disclaimer\n**Please note: As with all my challenges there is zero benefit or monetary gain I receive from it. This is just my way of thanking my students and making sure that you are able to continue gaining valuable knowledge outside of just my videos. It would mean a lot to me if you are able to rate my course...5 star reviews make my day :)**\n"}, {"author": "cls1991", "repo": "cls1991/advent-of-code", "language": "Python", "language_all": {"Python": 9869}, "readme_contents": "# advent-of-code\nSolutions for http://adventofcode.com, just for fun!\n"}, {"author": "poteto", "repo": "poteto/advent-of-code-2018", "language": "Rust", "language_all": {"Rust": 3434}, "readme_contents": "# 2018\n\n[![Build Status](https://travis-ci.org/poteto/advent-of-code-2018.svg?branch=master)](https://travis-ci.org/poteto/advent-of-code-2018)\n\nLearning Rust from scratch! Pull requests are welcome. Because I'm learning, please feel free to correct style mistakes, share idiomatic patterns, etc.\n\nI'm pretty behind due to busy work schedules. Please don't spoil anything for me!\n\nThanks!\n\n## Running\n\n```\ncargo run -p <day-xx> --release\n```\n\n## Tests\n\n```\ncargo test\n```\n"}, {"author": "glguy", "repo": "glguy/advent2019", "language": "Haskell", "language_all": {"Haskell": 48451}, "readme_contents": "# Advent of Code 2019\n\nThese are my Advent of Code 2019 solutions. I try to focus on making clean and documented Haskell solutions to each puzzle.\n\nWe'll be chatting about AoC on IRC all December. You can find AoC discussion on [freenode](https://freenode.net)'s `##adventofcode` and `#haskell` ([webchat](https://webchat.freenode.net/#haskell,##adventofcode))\n\n## Building\n\nI recommend installing `ghc` with `ghcup`.\n\n```\n$ curl https://get-ghcup.haskell.org -sSf | sh\n```\n\nI'm using `GHC 8.8.1` this year\n\n```\n$ ghcup install 8.8.1\n$ ghcup set     8.8.1\n```\n\n`cabal-install-3` is the best way to get things built\n\n```\n$ cabal update\n$ cabal build\n```\n\n## Running solutions\n\nAll the solutions take an optional command line argument that can be an input file name or `-` to read the input from `stdin`.\n\n```\n$ cabal run Day01\n...\n3188480\n4779847\n```\n\n## Intcode Interpreter\n\nA few of my solutions rely on a common Intcode interpreter: [Intcode.hs](https://github.com/glguy/advent2019/blob/master/common/Advent/Intcode.hs)\n\n## Common libraries used\n\n* **containers** - Almost all of the solutions will benefit from having access to `Map` and `Set` types from this package.\n* **megaparsec** - Each problem features a simple text-file format input. Parser combinators make it easy to define the simple parser needed to consume these inputs.\n* **doctest** - Having checked examples in the documentation makes it easier to understand what code does and easy to add unit tests.\n"}, {"author": "benediktwerner", "repo": "benediktwerner/AdventOfCode", "language": "Python", "language_all": {"Python": 125136}, "readme_contents": "Advent of Code\n===================\nMy solutions for [Advent of Code](http://adventofcode.com) written in Python 3\n"}, {"author": "jayfoad", "repo": "jayfoad/aoc2018apl", "language": "APL", "language_all": {"APL": 10802}, "readme_contents": "# aoc2018apl\nAdvent of Code 2018 solutions in Dyalog APL\n\nTested on Linux with `dyalog -script < pN.dyalog`. Some solutions require Dyalog APL version 17.0 or later.\n\nSee also: my [solutions for 2017](https://github.com/jayfoad/aoc2017apl).\n"}, {"author": "Janiczek", "repo": "Janiczek/advent-of-code", "language": "Elm", "language_all": {"Elm": 1335527, "HTML": 152276, "Clojure": 2742, "Python": 1623, "Shell": 1472, "JavaScript": 414}, "readme_contents": "\n# Advent of Code\n\n## Progress\n\n| Day | 2015                                     | 2016               | 2017                                     | 2018                                     |\n| --- | ---------------------------------------- | ------------------ | ---------------------------------------- | ---------------------------------------- |\n| 1   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 2   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 3   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 4   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 5   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 6   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 7   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 8   | :heavy_check_mark:                       |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 9   | :heavy_check_mark:                       |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 10  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 11  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 12  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 13  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |\n| 14  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       | :heavy_check_mark::question:<sup>3</sup> |\n| 15  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |\n| 16  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |\n| 17  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |\n| 18  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |\n| 19  | :heavy_check_mark::question:<sup>1</sup> |                    | :heavy_check_mark:                       |                                          |\n| 20  |                                          |                    | :heavy_check_mark:                       |                                          |\n| 21  |                                          |                    | :heavy_check_mark:                       |                                          |\n| 22  |                                          |                    | :heavy_check_mark:                       |                                          |\n| 23  |                                          |                    | :heavy_check_mark::question:<sup>2</sup> |                                          |\n| 24  |                                          |                    | :heavy_check_mark:                       |                                          |\n| 25  |                                          |                    | :heavy_check_mark:                       |                                          |\n\n* <sup>1</sup>: Done efficiently in Clojure thanks to the library `instaparse`. Done not-so-efficiently in Elm, and exceeds heap memory limit.\n* <sup>2</sup>: Elm was mainly used for exploring the problem. After an insight was obtained, the real solution was written in Python.\n* <sup>3</sup>: Couldn't get Elm code to do part 2 fast. Did it in Python \u00af\\_(\u30c4)_/\u00af\n\n--------\n\n```\n$ ./start.sh 2018 01     # makes a new Elm module, copies the puzzle input into it, opens vim and watcher in two tmux panes\n```\n\nMay the error messages lead you towards the right dependencies :smirk:\n"}, {"author": "Dementophobia", "repo": "Dementophobia/advent-of-code-2019", "language": "Python", "language_all": {"Python": 46924}, "readme_contents": "# Advent of Code 2019\nMy [Advent of Code](https://adventofcode.com/2019) (Season 2019) solutions written in Python 3.8. I will highlight some of the interesting Python mechanisms I am using on Twitter, so feel free to [follow me](https://twitter.com/Dementophobia).\n\n| Puzzle                                         | Solution                                                     | Tips & Tricks                                                |\n| ---------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Day 1](https://adventofcode.com/2019/day/1)   | [Part 1](./2019_01_p1.py) and [Part 2](./2019_01_p2.py)      | [Assignment Expressions](https://twitter.com/Dementophobia/status/1201027632349040640) |\n| [Day 2](https://adventofcode.com/2019/day/2)   | [Part 1](./2019_02_p1.py) and [Part 2](./2019_02_p2.py)      | [Slicing Notation](https://twitter.com/Dementophobia/status/1201382006774468608) |\n| [Day 3](https://adventofcode.com/2019/day/3)   | [Part 1](./2019_03_p1.py) and [Part 2](./2019_03_p2.py)      | [List Comprehension](https://twitter.com/Dementophobia/status/1201749348083781632) |\n| [Day 4](https://adventofcode.com/2019/day/4)   | [Part 1](./2019_04_p1.py) and [Part 2](./2019_04_p2.py)      | [Short Circuiting](https://twitter.com/Dementophobia/status/1202108904429309952) |\n| [Day 5](https://adventofcode.com/2019/day/5)   | [Part 1](./2019_05_p1.py) and [Part 2](./2019_05_p2.py)      | [Zero Padding with F-Strings](https://twitter.com/Dementophobia/status/1202487898194546689) |\n| [Day 6](https://adventofcode.com/2019/day/6)   | [Part 1](./2019_06_p1.py) and [Part 2](./2019_06_p2.py)      | [Intersection of Sets](https://twitter.com/Dementophobia/status/1202848979328876546) |\n| [Day 7](https://adventofcode.com/2019/day/7)   | [Part 1](./2019_07_p1.py) and [Part 2](./2019_07_p2.py)      | [Permutations from Itertools](https://twitter.com/Dementophobia/status/1203214917697970178) |\n| [Day 8](https://adventofcode.com/2019/day/8)   | [Part 1](./2019_08_p1.py) and [Part 2](./2019_08_p2.py) <br />Bonus: [Animated Solution](./extras/README.md#day-8---animation-using-python-and-gimp) | [Avoiding Line Breaks with Print](https://twitter.com/Dementophobia/status/1203560697940119553) |\n| [Day 9](https://adventofcode.com/2019/day/9)   | [Part 1](./2019_09_p1.py) and [Part 2](./2019_09_p2.py)      | [Defaultdict from Collections](https://twitter.com/Dementophobia/status/1203932274280022017) |\n| [Day 10](https://adventofcode.com/2019/day/10) | [Part 1](./2019_10_p1.py) and [Part 2](./2019_10_p2.py)      | [Sorting with Function as Key](https://twitter.com/Dementophobia/status/1204468347917783042) |\n| [Day 11](https://adventofcode.com/2019/day/11) | [Part 1](./2019_11_p1.py) and [Part 2](./2019_11_p2.py) <br />Bonus: [Animated Solution](./extras/README.md#day-11---another-animation-using-python-and-gimp) | [Using Modulo for Turning](https://twitter.com/Dementophobia/status/1204657448361086976) |\n| [Day 12](https://adventofcode.com/2019/day/12) |                                                              |                                                              |\n| [Day 13](https://adventofcode.com/2019/day/13) |                                                              |                                                              |\n| [Day 14](https://adventofcode.com/2019/day/14) |                                                              |                                                              |\n| [Day 15](https://adventofcode.com/2019/day/15) |                                                              |                                                              |\n| [Day 16](https://adventofcode.com/2019/day/16) |                                                              |                                                              |\n| [Day 17](https://adventofcode.com/2019/day/17) |                                                              |                                                              |\n| [Day 18](https://adventofcode.com/2019/day/18) |                                                              |                                                              |\n| [Day 19](https://adventofcode.com/2019/day/19) |                                                              |                                                              |\n| [Day 20](https://adventofcode.com/2019/day/20) |                                                              |                                                              |\n| [Day 21](https://adventofcode.com/2019/day/21) |                                                              |                                                              |\n| [Day 22](https://adventofcode.com/2019/day/22) |                                                              |                                                              |\n| [Day 23](https://adventofcode.com/2019/day/23) |                                                              |                                                              |\n| [Day 24](https://adventofcode.com/2019/day/24) |                                                              |                                                              |\n| [Day 25](https://adventofcode.com/2019/day/25) |                                                              |                                                              |\n\n"}, {"author": "joelgrus", "repo": "joelgrus/advent2018", "language": "Python", "language_all": {"Python": 61087}, "readme_contents": "# advent2018\nsolutions for advent of code 2018\n\ntwitter: [@joelgrus](https://twitter.com/joelgrus)\n\nyoutube: https://youtube.com/joelgrus\n\npatreon: https://www.patreon.com/joelgrus\n"}, {"author": "Lokeh", "repo": "Lokeh/advent-2017", "language": "OCaml", "language_all": {"OCaml": 103096, "JavaScript": 101532}, "readme_contents": "# Advent of Code, 2017\n\nI'll be updating this repository with each day's solution in ReasonML.\nIt's built using BuckleScript; check out the [ReasonML quick start guide](https://reasonml.github.io/guide/javascript/quickstart) for installing the tool chain if you want to build changes to the project.\n\nSolution source files are in `src/*.re`. Common utilities and data structures are found in `src/utils/*.re`.\n\nIf you want to just try out the solutions, you can build the project (`yarn build`) and run them with the command:\n```\nyarn solve day4 part1 \"my test input\"\n```\n\nOr, by starting up a node REPL:\n```\n~/Code/advent-2017 $ node\n> let day4 = require('./src/dayFour.bs')\nundefined\n> day4.part1('my test input')\n```\n\nTests are located in the `src/tests` directory; they are automatically generated using the `Solution` functor and are based on the `cases` binding found in each solution module. The tests run automatically on compiling.\n\n# Editor\nIf you use `vscode`, Press `Windows + Shift + B` it will build automatically\n"}, {"author": "IdrisTheDragon", "repo": "IdrisTheDragon/AdventOfCode2018", "language": "Go", "language_all": {"Go": 80045}, "readme_contents": "# Advent of Code 2018\n\nMy Golang solutions for the advent of code 2018.\nI am learning go as I go.\nSo it's not perfect by any means.\n\nhttps://adventofcode.com/2018\n\nLet's save Christmas!\n\n## Installation & Excecution\n\nget the code like this:\n\n`go get github.com/IdrisTheDragon/AdventOfCode2018`\n\nnavigate to the directory of the day/Part you wish to run\n\n`go run main.go`\n\n## utils package\n\nYou can import the utils and use the functions in your own go files\n\n`import \"github.com/IdrisTheDragon/AdventOfCode2018/utils\"`\n\n## Authors\n\n- Nathan Williams\n"}, {"author": "jcazevedo", "repo": "jcazevedo/advent-of-code-2018", "language": "Java", "language_all": {"Java": 8099, "Pony": 6049, "Scala": 4986, "TypeScript": 4941, "Perl": 4466, "Swift": 4133, "Kotlin": 4083, "Go": 3592, "Lua": 3414, "Erlang": 2908, "PHP": 2776, "Rust": 2770, "OCaml": 2321, "Objective-C": 2309, "Ruby": 2289, "Prolog": 2238, "Clojure": 2123, "Elixir": 1981, "Shell": 1800, "Dart": 1697, "Haskell": 1689, "Nim": 1567, "Idris": 1359, "R": 1149, "Python": 762, "C++": 742}, "readme_contents": "# Advent of Code 2018\n\nThis repository contains my solutions to [Advent of Code\n2018][advent-of-code-2018]. [After][2015] [three][2016] [years][2017] solving\nthe problems exclusively in Scala, I decided to solve each day of 2018 in a\ndifferent programming language.\n\n## Rules\n\nSome \"rules\" I set up for myself before starting solving the problems:\n\n- The languages to be used in each day are the following, in order: Idris,\n  Prolog, Lua, Rust, C++, Ruby, Octave, Python, Erlang, R, OCaml, Dart, PHP,\n  Elixir, Pony, Scala, Swift, Haskell, Go, Nim, Kotlin, TypeScript, Perl, Java\n  and Clojure.\n- The solutions should read the input from a predefined file (named\n  `<day>.input`) and write the solution to the standard output.\n- The solutions should take less than a minute to output the correct answer on\n  my machine.\n- Dependencies should be limited to each language's standard library.\n\n## Problems\n\n- **Day 1: Chronal Calibration** (*Idris*): [problem statement](https://adventofcode.com/2018/day/1) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day01-idris/day01.idr)\n- **Day 2: Inventory Management System** (*Prolog*): [problem statement](https://adventofcode.com/2018/day/2) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day02-prolog/day02.pl)\n- **Day 3: No Matter How You Slice It** (*Lua*): [problem statement](https://adventofcode.com/2018/day/3) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day03-lua/day03.lua)\n- **Day 4: Repose Record** (*Rust*): [problem statement](https://adventofcode.com/2018/day/4) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day04-rust/day04.rs)\n- **Day 5: Alchemical Reduction** (*C++*): [problem statement](https://adventofcode.com/2018/day/5) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day05-c++/day05.cpp)\n- **Day 6: Chronal Coordinates** (*Ruby*): [problem statement](https://adventofcode.com/2018/day/6) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day06-ruby/day06.rb)\n- **Day 7: The Sum of Its Parts** (*Octave*): [problem statement](https://adventofcode.com/2018/day/7) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day07-octave/day07.m)\n- **Day 8: Memory Maneuver** (*Python*): [problem statement](https://adventofcode.com/2018/day/8) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day08-python/day08.py)\n- **Day 9: Marble Mania** (*Erlang*): [problem statement](https://adventofcode.com/2018/day/9) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day09-erlang/day09.erl)\n- **Day 10: The Stars Align** (*R*): [problem statement](https://adventofcode.com/2018/day/10) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day10-r/day10.R)\n- **Day 11: Chronal Charge** (*OCaml*): [problem statement](https://adventofcode.com/2018/day/11) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day11-ocaml/day11.ml)\n- **Day 12: Subterranean Sustainability** (*Dart*): [problem statement](https://adventofcode.com/2018/day/12) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day12-dart/day12.dart)\n- **Day 13: Mine Cart Madness** (*PHP*): [problem statement](https://adventofcode.com/2018/day/13) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day13-php/day13.php)\n- **Day 14: Chocolate Charts** (*Elixir*): [problem statement](https://adventofcode.com/2018/day/14) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day14-elixir/day14.exs)\n- **Day 15: Beverage Bandits** (*Pony*): [problem statement](https://adventofcode.com/2018/day/15) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day15-pony/day15.pony)\n- **Day 16: Chronal Classification** (*Scala*): [problem statement](https://adventofcode.com/2018/day/16) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day16-scala/day16.scala)\n- **Day 17: Reservoir Research** (*Swift*): [problem statement](https://adventofcode.com/2018/day/17) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day17-swift/day17.swift)\n- **Day 18: Settlers of The North Pole** (*Haskell*): [problem statement](https://adventofcode.com/2018/day/18) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day18-haskell/day18.hs)\n- **Day 19: Go With The Flow** (*Go*): [problem statement](https://adventofcode.com/2018/day/19) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day19-go/day19.go)\n- **Day 20: A Regular Map** (*Nim*): [problem statement](https://adventofcode.com/2018/day/20) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day20-nim/day20.nim)\n- **Day 21: Chronal Conversion** (*Kotlin*): [problem statement](https://adventofcode.com/2018/day/21) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day21-kotlin/day21.kt)\n- **Day 22: Mode Maze** (*TypeScript*): [problem statement](https://adventofcode.com/2018/day/22) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day22-typescript/day22.ts)\n- **Day 23: Experimental Emergency Teleportation** (*Perl*): [problem statement](https://adventofcode.com/2018/day/23) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day23-perl/day23.pl)\n- **Day 24: Immune System Simulator 20XX** (*Java*): [problem statement](https://adventofcode.com/2018/day/24) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day24-java/day24.java)\n- **Day 25: Four-Dimensional Adventure** (*Clojure*): [problem statement](https://adventofcode.com/2018/day/25) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day25-clojure/day25.clj)\n\n## Running\n\nYou can run a solution by typing the following, replacing `<X>` with the day of\nthe desired problem:\n\n```\n$ ./run.sh <X>\n```\n\nYou might need to install some dependencies. It should be easy to guess which\nones by looking at the\n[`run.sh`](https://github.com/jcazevedo/advent-of-code-2018/blob/master/run.sh)\nscript.\n\n[advent-of-code-2018]: https://adventofcode.com/2018\n[2015]: https://github.com/jcazevedo/advent-of-code-2015\n[2016]: https://github.com/jcazevedo/advent-of-code-2016\n[2017]: https://github.com/jcazevedo/advent-of-code-2017\n"}, {"author": "Voltara", "repo": "Voltara/advent2017-fast", "language": "C", "language_all": {"C": 59439, "CMake": 586}, "readme_contents": "# advent2017-fast\n\n[Advent of Code 2017](http://adventofcode.com/2017/) optimized C solutions.  The AoC creator issued a [challenge](https://www.reddit.com/r/adventofcode/comments/7m9mg8/all_years_all_days_solve_them_within_the_time/) to solve each of the puzzles within 250 ms.  I decided to take that a step further and do the whole month within that limit, and managed to get it down to 195 ms.\n\nHere are the timings from an example run on a 4.20 GHz i7-7700K CPU.  The total is greater than the sum of the individual days because of rounding.\n\n    Day  1       28 \u03bcs\n    Day  2       15 \u03bcs\n    Day  3        1 \u03bcs\n    Day  4       63 \u03bcs\n    Day  5   36,131 \u03bcs\n    Day  6       82 \u03bcs\n    Day  7      117 \u03bcs\n    Day  8       60 \u03bcs\n    Day  9       66 \u03bcs\n    Day 10       87 \u03bcs\n    Day 11       55 \u03bcs\n    Day 12      100 \u03bcs\n    Day 13        3 \u03bcs\n    Day 14    4,574 \u03bcs\n    Day 15  119,350 \u03bcs\n    Day 16      127 \u03bcs\n    Day 17      122 \u03bcs\n    Day 18      206 \u03bcs\n    Day 19       21 \u03bcs\n    Day 20      798 \u03bcs\n    Day 21       17 \u03bcs\n    Day 22   28,369 \u03bcs\n    Day 23      231 \u03bcs\n    Day 24    3,241 \u03bcs\n    Day 25    1,270 \u03bcs\n    ------------------\n    Total   195,145 \u03bcs\n\nThe input parsing is ugly not because of optimization, but rather as a result of continuing my self-imposed challenge during December to avoid using any Perl modules (or in the case of my C implementation, library functions.)  I later did away with that restriction because it was obscuring the intent of my code too much, but I never did bother going back to rewrite the input parsing.\n\nIn some of the solutions (especially where the naive solution is already blindingly fast) I decide to get a little silly.  So when you see that [SIMD](https://en.wikipedia.org/wiki/SIMD) [bitonic sort network](https://en.wikipedia.org/wiki/Bitonic_sorter) in Day 4, I did it because I thought it was interesting, not because it was particularly fast.\n"}, {"author": "tginsberg", "repo": "tginsberg/advent-2017-kotlin", "language": "Kotlin", "language_all": {"Kotlin": 86778}, "readme_contents": "## Advent of Code 2017 Solutions in Kotlin\n\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)]()\n\nThis repo is my personal attempt at solving the [Advent of Code 2017](http://adventofcode.com/2017) set of problems with the Kotlin programming language.\n\nI am trying to solve these on the day they are posted with clear, idiomatic solutions. That means in some cases I will sacrifice performance for a more clear solution.\n\nI am also trying to write about each solution [on my blog](https://todd.ginsberg.com/). See the index below for a link to each post.\n### Index\n\n|   Day   | Title                                         |  Links                                       |\n| --------|-----------------------------------------------|--------------------------------------------- |\n|    1    | Inverse Captcha                               | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day1/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day01.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/1) |\n|    2    | Corruption Checksum                           | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day2/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day02.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/2) |\n|    3    | Spiral Memory                                 | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day3/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day03.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/3) |\n|    4    | High-Entropy Passphrases                      | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day4/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day04.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/4) |\n|    5    | A Maze of Twisty Trampolines, All Alike       | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day5/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day05.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/5) |\n|    6    | Memory Reallocation                           | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day6/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day06.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/6) |\n|    7    | Recursive Circus                              | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day7/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day07.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/7) |\n|    8    | I Heard You Like Registers                    | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day8/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day08.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/8) |\n|    9    | Stream Processing                             | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day9/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day09.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/9) |\n|   10    | Knot Hash                                     | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day10/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day10.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/10) |\n|   11    | Hex Ed                                        | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day11/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day11.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/11) |\n|   12    | Digital Plumber                               | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day12/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day12.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/12) |\n|   13    | Packet Scanners                               | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day13/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day13.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/13) |\n|   14    | Disk Defragmentation                          | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day14/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day14.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/14) |\n|   15    | Dueling Generators                            | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day15/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day15.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/15) |\n|   16    | Permutation Promenade                         | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day16/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day16.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/16) |\n|   17    | Spinlock                                      | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day17/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day17.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/17) |\n|   18    | Duet                                          | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day18/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day18.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/18) |\n|   18    | Duet - Part 2 using Coroutines                | [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day18Coroutines.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/18) |\n|   19    | A Series of Tubes                             | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day19/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day19.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/19) |\n|   20    | Particle Swarm                                | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day20/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day20.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/20) |\n|   21    | Fractal Art                                   | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day21/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day21.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/21) |\n|   22    | Sporifica Virus                               | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day22/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day22.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/22) |\n|   23    | Coprocessor Conflagration                     | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day23/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day23.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/23) |\n|   24    | Electromagnetic Moat                          | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day24/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day24.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/24) |\n|   25    | The Halting Problem                           | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2017/day25/) [\\[Code\\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day25.kt) [\\[AoC\\]](http://adventofcode.com/2017/day/25) |\n\nCopyright &copy; 2017 by Todd Ginsberg."}, {"author": "jeroenheijmans", "repo": "jeroenheijmans/advent-of-code-charts", "language": "JavaScript", "language_all": {"JavaScript": 61139, "HTML": 1055, "PowerShell": 482, "Shell": 436}, "readme_contents": "# Advent of Code Charts\n\nThis is an [unofficial](#license-and-affiliation-disclaimer) small hacked-up set of charts for a private leaderboard for [Advent of Code](https://adventofcode.com/).\nGet it as an extension:\n\n[![browser-store-chrome.png](browser-store-chrome.png)](https://chrome.google.com/webstore/detail/advent-of-code-charts/ipbomkmbokofodhhjpipflmdplipblbe) [![browser-store-firefox.png](browser-store-firefox.png)](https://addons.mozilla.org/en-US/firefox/addon/advent-of-code-charts/)\n\n## Disclaimers\n\nIt is *not* a well-architectured, well-written, neat, nice, fluffy, industry-strength piece of code.\nInstead it's something fun I wanted to make, stepping out of my *normal* way of coding. NO WARRANTY!\n\n## Developing\n\nInstall dependencies:\n\n```sh\nnpm ci # or npm install\n```\n\nServe a test website with the dummy data:\n\n```sh\nnpm run start # runs 'serve' and 'watch' in parallel\n```\n\nAnd open up `http://localhost:5000`.\n\n## Building\n\nRun `build.ps1` or `build.sh` to re-create a `/build` folder which is a ready-to-go browser extension.\nTest the extension by loading it in the browser.\nFor full reference, see Chrome's or Firefox's full documentation, but the basics are:\n\n- Firefox: go to `about:debugging` and load a temporary addon (pick the `/build/manifest.json` file)\n- Chrome: go to `chrome://extensions` and load unpacked extension (pick the `/build` folder)\n\nTest by browsing to a private leaderboard and you should see charts popping up at the bottom.\n\n## License and Affiliation Disclaimer\n\nThe code in this project is MIT licensed, with the explicit exception of `dummyData.js`.\nThat file contains JSON in a format thought up by the owner and creator of Advent of Code, but we suppose that using a small snippet of it like this falls under \"fair use\" (given for one that the AoC website itself suggests using the \"JSON API\" for integrations, albeit without spamming that API).\n\nNote that \"Advent of Code\" and \"AoC\" are Eric Wastl's.\nThis project is not \"official\", and in no way (directly or indirectly) endorsed by- or affiliated to Advent of Code and its creator/owner.\nRead more [about Advent of Code](https://adventofcode.com/2018/about) to learn about the project itself.\n\n**Oh, and of course, please [consider donating to _Advent of Code_ itself](https://adventofcode.com/2018/support)!**\n\n## Example\n\nHere's what it should more or less look like:\n\n![example-001.png](example-001.png)\n"}, {"author": "dzikoysk", "repo": "dzikoysk/advent-of-code", "language": "Shell", "language_all": {"Shell": 116}, "readme_contents": "# Advent of Code\n[Advent of Code 2019](https://adventofcode.com/) in [Panda](https://github.com/panda-lang/panda)\n\n### Background\nThe aim of project is to explore the pre-alpha version of [Panda](https://github.com/panda-lang/panda) language.\nImplementations of various programming puzzles should expose vulnerabilities, bugs and ill-thought-out solutions.\n\n### Run\n```bash\n./run.sh <day> <user>\n```\n\n### Progress\n| Day | Name | Panda | \n|:---:|:---|:---:|\n| 01 | [The Tyranny of the Rocket Equation][day01] | \u2713 |\n| 02 | [1202 Program Alarm][day02] | \u2713 |\n| 03 | [Crossed Wires][day03] | \u2713 |\n| 04 | [Secure Container][day04] | \u2713 |\n| 05 | [Sunny with a Chance of Asteroids][day05] | \u2713 |\n| 06 | [Universal Orbit Map][day06] | \u2713 |\n| 07 | [Amplification Circuit][day07] | \u2713 |\n| 08 | [Space Image Format][day08] | \u2713 |\n| 09 | [Sensor Boost][day09] | \u2713 |\n\n[day01]: https://adventofcode.com/2019/day/1\n[day02]: https://adventofcode.com/2019/day/2\n[day03]: https://adventofcode.com/2019/day/3\n[day04]: https://adventofcode.com/2019/day/4\n[day05]: https://adventofcode.com/2019/day/5\n[day06]: https://adventofcode.com/2019/day/6\n[day07]: https://adventofcode.com/2019/day/7\n[day08]: https://adventofcode.com/2019/day/8\n[day09]: https://adventofcode.com/2019/day/9\n[day10]: https://adventofcode.com/2019/day/10\n[day11]: https://adventofcode.com/2019/day/11\n[day12]: https://adventofcode.com/2019/day/12\n[day13]: https://adventofcode.com/2019/day/13\n[day14]: https://adventofcode.com/2019/day/14\n[day15]: https://adventofcode.com/2019/day/15\n[day16]: https://adventofcode.com/2019/day/16\n[day17]: https://adventofcode.com/2019/day/17\n[day18]: https://adventofcode.com/2019/day/18\n[day19]: https://adventofcode.com/2019/day/19\n[day20]: https://adventofcode.com/2019/day/20\n[day21]: https://adventofcode.com/2019/day/21\n[day22]: https://adventofcode.com/2019/day/22\n[day23]: https://adventofcode.com/2019/day/23\n[day24]: https://adventofcode.com/2019/day/24\n[day25]: https://adventofcode.com/2019/day/25\n"}, {"author": "ploeh", "repo": "ploeh/advent-of-code-2017", "language": "Haskell", "language_all": {"Haskell": 76990}, "readme_contents": "# Advent of Code 2017\n\nMy solutions for [Advent of Code 2017](https://adventofcode.com/2017).\n\nOriginally, I had no intention to publish these files, but [at least one person has expressed interest](https://twitter.com/michielrutting/status/936892474433216512), so why not? These code files represent a balance between finding a solution fast, but still keeping the code acceptable and interesting to myself. I do tend to polish it a bit after I've found the solution, but before I commit it, but no aggressive refactoring takes place. Some of the code may be rough around the edges.\n"}, {"author": "xocolatl", "repo": "xocolatl/advent-of-code", "language": "TSQL", "language_all": {"TSQL": 52913, "PLpgSQL": 8447}, "readme_contents": "This is my attempt to solve the [Advent Of Code 2019](http://adventofcode.com/2019)\npuzzles using [PostgreSQL 12](https://www.postgresql.org/). I don't plan to use\nany extensions except for what comes in contrib. I'm also going to try to avoid\nusing plpgsql (and certainly any other pl).\n\nThe goal is to challenge my SQL skills, and also showcase what can be done in this\nlanguage.\n\n**Comments and improvements welcome.**\n\nIf you would like to run these yourself, save your session cookie in a file called\n`session.cookie` at the top of this repository. In it, add the line\n`Set-Cookie: session=1234` (where 1234 is replaced by what the site gives you after\nlogging in). Then run `psql -Xqf 2019/decXX.sql`.\n\n  - <http://adventofcode.com/2019> :christmas\\_tree:\n  - <https://www.postgresql.org/> :elephant:\n"}, {"author": "purcell", "repo": "purcell/adventofcode2016", "language": "Haskell", "language_all": {"Haskell": 49032, "Emacs Lisp": 188}, "readme_contents": "# Haskell solutions for 2016 [Advent of Code](https://adventofcode.com/)\n\nThese little solutions are optimised for tidiness rather than speed of\nwriting. In some cases I've code-golfed them for performance or\nelegance, in the interest of learning new tools and techniques.\n\n## Usage\n\nWith [stack](https://www.haskellstack.org/) installed:\n```\nstack setup\nstack build\nstack exec adventofcode2016 [DAYNUM]\n```\nwhere `DAYNUM` is the number of one of the days of Advent!\n"}, {"author": "ephemient", "repo": "ephemient/aoc2017", "language": "Haskell", "language_all": {"Haskell": 90660}, "readme_contents": "app/Main.lhs"}, {"author": "adriennetacke", "repo": "adriennetacke/advent-of-code-2018", "language": "JavaScript", "language_all": {"JavaScript": 23065}, "readme_contents": "# advent-of-code-2018\n[![Build Status](https://travis-ci.org/adriennetacke/advent-of-code-2018.svg?branch=master)](https://travis-ci.org/adriennetacke/advent-of-code-2018) [![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\nAdvent of Code 2018 Solutions - Adrienne Style\n\n## What is Advent of Code?\n[Advent of Code](http://adventofcode.com) is an online event created by [Eric Wastl](https://twitter.com/ericwastl). Each year, starting on Dec 1st, an advent calendar of small programming puzzles are unlocked once a day at midnight (EST/UTC-5). Developers of all skill sets are encouraged to solve them in any programming language they choose!\n\n## Advent of Code 2018 Story\n\"We've detected some temporal anomalies,\" one of Santa's Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. \"At 500-year intervals into the past, someone has been changing Santa's history!\"\n\n\"The good news is that the changes won't propagate to our time stream for another 25 days, and we have a device\" - she attaches something to your wrist - \"that will let you fix the changes with no such propagation delay. It's configured to send you 500 years further into the past every few days; that was the best we could do on such short notice.\"\n\n\"The bad news is that we are detecting roughly fifty anomalies throughout time; the device will indicate fixed anomalies with stars. The other bad news is that we only have one device and you're the best person for the job! Good lu--\" She taps a button on the device and you suddenly feel like you're falling. To save Christmas, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\n## Days\n\n| Day  | Part One | Part Two | \n|---|:---:|:---:|\n|\u2714\ufe0f [Day 1: Chronal Calibration](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-1-chronal-calibration)  | \u2b50\ufe0f | \u2b50\ufe0f |\n|\u2714\ufe0f [Day 2: Inventory Management System](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-2-inventory-management-system)  | \u2b50\ufe0f | \u2b50\ufe0f |\n|\u2714\ufe0f [Day 3: Inventory Management System](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-3-no-matter-how-you-slice-it)  | \u2b50\ufe0f | \u2b50 |\n|\u2714\ufe0f [Day 4: Repose Record](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-4-repose-record) | \u2b50 | \u2b50 |\n|\u2714\ufe0f [Day 5: Alchemical Reduction](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-5-alchemical-reduction) | \u2b50 | \u2b50 |\n|\u2714\ufe0f [Day 6: Chronal Coordinates](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-6-chronal-coordinates) | \u2b50 | \u2b50 |\n| [Day 7: The Sum of Its Parts](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-7-the-sum-of-its-parts) | \u2b50 | \ud83d\udd57 In progress  |\n| [Day 8: Memory Maneuver ](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-8-memory-maneuver) | \ud83d\udd57 In progress | \ud83d\ude05 Not Started  |\n\n\n## Running Tests\n\nEach day contains its own set of tests. To run them type `npm test`.\n\n## Let's connect:\n`@adrienne.tacke`\n\n[Instagram](https://www.instagram.com/adrienne.tacke/)\n| \n[Medium](https://medium.com/@adrienne.tacke)\n|\n[Twitter](https://twitter.com/adriennetacke)\n"}, {"author": "KrzaQ", "repo": "KrzaQ/AdventOfCode2018", "language": "Ruby", "language_all": {"Ruby": 36826, "C++": 19707, "D": 10278, "Rust": 9101, "HTML": 4322}, "readme_contents": "[Advent of Code 2018](https://adventofcode.com) solutions by [KrzaQ][kq]\n========================\n\nI'm using various languages to provide solutions.\n\n| Day | Name | Ruby | Rust | D | C++ |\n|:---:|:---|:---:|:---:|:---:|:---:|\n| 01 | [Chronal Calibration][day01] | [:heavy_check_mark:](solutions/day01/main.rb) | [:heavy_check_mark:](solutions/day01/rust/src/main.rs) | [:heavy_check_mark:](solutions/day01/main.d) |  |\n| 02 | [Inventory Management System][day02] | [:heavy_check_mark:](solutions/day02/main.rb) | [:heavy_check_mark:](solutions/day02/rust/src/main.rs) | [:heavy_check_mark:](solutions/day02/dlang/source/main.d) |  |\n| 03 | [No Matter How You Slice It][day03] | [:heavy_check_mark:](solutions/day03/main.rb) | [:heavy_check_mark:](solutions/day03/rust/src/main.rs) |  |  |\n| 04 | [Repose Record][day04] | [:heavy_check_mark:](solutions/day04/main.rb) |  |  |  |\n| 05 | [Alchemical Reduction][day05] | [:heavy_check_mark:](solutions/day05/main.rb) | [:heavy_check_mark:](solutions/day05/rust/src/main.rs) |  |  |\n| 06 | [Chronal Coordinates][day06] | [:heavy_check_mark:](solutions/day06/main.rb) |  |  |  |\n| 07 | [The Sum of Its Parts][day07] |  |  | [:heavy_check_mark:](solutions/day07/main.d) |  |\n| 08 | [Memory Maneuver][day08] | [:heavy_check_mark:](solutions/day08/main.rb) |  |  |  |\n| 09 | [Marble Mania][day09] | [:heavy_check_mark:](solutions/day09/main.rb) | [:heavy_check_mark:](solutions/day09/rust/src/main.rs) | [:heavy_check_mark:](solutions/day09/main.d) | [:heavy_check_mark:](solutions/day09/main.cpp) |\n| 10 | [The Stars Align][day10] | [:heavy_check_mark:](solutions/day10/main.rb) |  |  |  |\n| 11 | [Chronal Charge][day11] | [:heavy_check_mark:](solutions/day11/main.rb) |  |  |  |\n| 12 | [Subterranean Sustainability][day12] | [:heavy_check_mark:](solutions/day12/main.rb) |  |  |  |\n| 13 | [Mine Cart Madness][day13] | [:heavy_check_mark:](solutions/day13/main.rb) |  |  |  |\n| 14 | [Chocolate Charts][day14] |  | [:heavy_check_mark:](solutions/day14/rust/src/main.rs) | [:heavy_check_mark:](solutions/day14/main.d) | [:heavy_check_mark:](solutions/day14/main.cpp) |\n| 15 | [Beverage Bandits][day15] | [:heavy_check_mark:](solutions/day15/main.rb) |  |  |  |\n| 16 | [Chronal Classification][day16] | [:heavy_check_mark:](solutions/day16/main.rb) |  |  |  |\n| 17 | [Reservoir Research][day17] | [:heavy_check_mark:](solutions/day17/main.rb) |  |  |  |\n| 18 | [Settlers of The North Pole][day18] | [:heavy_check_mark:](solutions/day18/main.rb) |  |  |  |\n| 19 | [Go With The Flow][day19] | [:heavy_check_mark:](solutions/day19/main.rb) |  |  |  |\n| 21 | [Chronal Conversion][day21] | [:heavy_check_mark:](solutions/day21/main.rb) |  |  | [:heavy_check_mark:](solutions/day21/machine.cpp) |\n| 22 | [Mode Maze][day22] | [:heavy_check_mark:](solutions/day22/main.rb) |  | [:heavy_check_mark:](solutions/day22/main.d) |  |\n| 24 | [Immune System Simulator 20XX][day24] | [:heavy_check_mark:](solutions/day24/main.rb) |  |  |  |\n| 25 | [Four-Dimensional Adventure][day25] | [:heavy_check_mark:](solutions/day25/main.rb) |  |  |  |\n\n[day01]: https://adventofcode.com/2018/day/1\n[day02]: https://adventofcode.com/2018/day/2\n[day03]: https://adventofcode.com/2018/day/3\n[day04]: https://adventofcode.com/2018/day/4\n[day05]: https://adventofcode.com/2018/day/5\n[day06]: https://adventofcode.com/2018/day/6\n[day07]: https://adventofcode.com/2018/day/7\n[day08]: https://adventofcode.com/2018/day/8\n[day09]: https://adventofcode.com/2018/day/9\n[day10]: https://adventofcode.com/2018/day/10\n[day11]: https://adventofcode.com/2018/day/11\n[day12]: https://adventofcode.com/2018/day/12\n[day13]: https://adventofcode.com/2018/day/13\n[day14]: https://adventofcode.com/2018/day/14\n[day15]: https://adventofcode.com/2018/day/15\n[day16]: https://adventofcode.com/2018/day/16\n[day17]: https://adventofcode.com/2018/day/17\n[day18]: https://adventofcode.com/2018/day/18\n[day19]: https://adventofcode.com/2018/day/19\n[day21]: https://adventofcode.com/2018/day/21\n[day22]: https://adventofcode.com/2018/day/22\n[day24]: https://adventofcode.com/2018/day/24\n[day25]: https://adventofcode.com/2018/day/25\n\n[kq]: https://dev.krzaq.cc\n\nReadme generated on 2018-12-25 06:29:11 +0100"}, {"author": "fogleman", "repo": "fogleman/AdventOfCode2019", "language": "Python", "language_all": {"Python": 9876, "Go": 2771}, "readme_contents": null}, {"author": "ephemient", "repo": "ephemient/aoc2018", "language": "Haskell", "language_all": {"Haskell": 94858}, "readme_contents": "app/Main.lhs"}, {"author": "joelgrus", "repo": "joelgrus/advent2019", "language": "Python", "language_all": {"Python": 65538}, "readme_contents": "# advent2019\nadvent of code 2019\n"}, {"author": "mitsuhiko", "repo": "mitsuhiko/aoc19", "language": "Rust", "language_all": {"Rust": 22644}, "readme_contents": "# Advent of Code 2019\n\nhttps://adventofcode.com/2019/\n"}, {"author": "mevdschee", "repo": "mevdschee/aoc-stats", "language": "HTML", "language_all": {"HTML": 7328144, "TSQL": 4442347, "Java": 22712}, "readme_contents": "# Advent of Code Statistics\n\nAdvent of Code statistics (including scraper and scraped data files). Click these screenshots to see the code in action:\n\n[![Scatterplot of positions with same player highlight](http://www.maurits.vdschee.nl/scatterplot/positions.png)](http://www.maurits.vdschee.nl/scatterplot/)\n\n[![Medals list](http://www.maurits.vdschee.nl/scatterplot/medals.png?v2)](http://www.maurits.vdschee.nl/scatterplot/medals.html)\n\nSee: http://adventofcode.com\n"}, {"author": "ttencate", "repo": "ttencate/aoc2016", "language": "C", "language_all": {"C": 31704, "D": 11904, "Assembly": 7970, "Pascal": 7513, "C#": 7153, "C++": 5978, "OCaml": 5766, "COBOL": 5192, "Perl": 3234, "Fortran": 2948, "Scheme": 2894, "Go": 2824, "Haxe": 2519, "Groovy": 2222, "Lua": 1572, "JavaScript": 1430, "Ruby": 1158, "Haskell": 1089, "Python": 963, "Shell": 879, "Makefile": 807, "Scala": 557, "R": 332}, "readme_contents": "# Polyglot Advent of Code 2016\n\n[Advent of Code 2016](http://adventofcode.com/2016) is a programming contest,\nin which a new puzzle comes online every day from 1 until 25 December. These\nare my solutions to the puzzles. As an additional challenge, I solved each\nday's puzzle in a different programming language.\n\n## Languages\n\nI used only \"mainstream\" programming languages, not esoteric or toy languages,\nbecause this will be hard enough as is. However, I did include some older\nlanguages in the list out of historic interest. Plus, a free (as in beer)\nimplementation for Linux has to exist.\n\nLanguages I could still have used, roughly in order of decreasing preference\n(based both on what I know, and what might be suitable for such puzzles):\n\n* Java\n* PHP\n* BASIC\n* Clojure\n* Elixir\n* CoffeeScript\n* Dart\n* Nim\n* REBOL\n* Forth\n* F#\n* Kotlin\n* Octave\n* Erlang\n* Icon\n* Eiffel\n* Prolog\n* CUDA\n* GLSL\n* TCL\n* Smalltalk\n* Julia\n* AWK\n* J\n* APL\n* Ada\n* Algol\n* 6502 assembly\n\nUsed:\n\n* C ([day 23](23_c))\n* C++ ([day 24](24_cpp))\n* C# ([day 17](17_cs))\n* COBOL ([day 1](01_cobol))\n* D ([day 11](11_d))\n* Fortran 90 ([day 8](08_fortran))\n* Go ([day 25](25_go))\n* Groovy ([day 13](13_groovy))\n* Haskell ([day 16](16_haskell))\n* Haxe ([day 22](22_haxe))\n* JavaScript ([day 20](20_javascript))\n* Lua ([day 18](18_lua))\n* OCaml ([day 12](12_ocaml))\n* OpenCL ([day 14](14_opencl))\n* Pascal ([day 10](10_pascal))\n* Pen and paper (and a calculator) ([day 15](15_pen_and_paper))\n* Perl ([day 21](21_perl))\n* Python ([day 5](05_python))\n* R ([day 6](06_r))\n* Ruby ([day 19](19_ruby))\n* Rust ([day 9](09_rust))\n* Scala ([day 3](03_scala))\n* Scheme ([day 2](02_scheme))\n* Sh (bash and common shell utilities) ([day 4](04_bash))\n* x86 assembly ([day 7](07_x86_assembly))\n\n## Rules\n\n* Input should be read from stdin if at all possible. Otherwise, read from a\n  file named `input`.\n* The input file must be read and parsed exactly as provided. No modifications\n  are allowed.\n"}, {"author": "willkill07", "repo": "willkill07/AdventOfCode2017", "language": "C++", "language_all": {"C++": 46002, "Python": 957, "CMake": 704, "Shell": 122}, "readme_contents": "# Advent of Code - 2017\n\nAll implementations are written in C++, adhering to C++17 guidelines.\n\n## Prerequisites\n\n* clang (>= 5.0)\n* libc++ (>= 5.0)\n* CMake (>= 3.8)\n* macOS or Linux (only two systems I've tested on)\n\n## Compiling\n\n* A `compile.sh` script is provided\n* Just run it and it should be good to go!\n\n## Running\n\n* Invoke `./Advent` to execute all the days\n* To run a specific day, invoke `./Advent -f <dayXX>`\n* To run a specific part, invoke `./Advent -p <1,2>`\n* To see more detailed help, consult `./Advent --help`\n\n## Metrics\n\n* Lines: Number of lines given by `wc`\n* Code: `Lines` - `(# preprocessor lines)` - `(lines with no alphanumeric chars)`\n* Bytes: Number of total characters\n* Chars: Number of non-whitespace characters\n* Time: Time in milliseconds to execute each part independently (separate runs)\n* Source: link to implementation\n* Headers: C++ includes used for solution\n\n## Leaderboard Highlights:\n\n*To be determined*\n\n## Detailed Information\n\n Day | Lines | Code | Bytes | Chars | Time (ms) | Source | Headers\n:---:|:-----:|:----:|:-----:|:-----:| ---------:|:------:|:-------\n01|19|12|457|366|`0.2611`|[Day01.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day01.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `vector`\n02|30|17|704|511|`0.2616`|[Day02.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day02.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `sstream` `vector`\n03|61|43|1501|1069|`0.0631`|[Day03.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day03.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `array` `cmath` `unordered_map`\n04|26|14|632|487|`2.5986`|[Day04.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day04.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `numeric` `set` `sstream`\n05|24|15|548|437|`83.7925`|[Day05.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day05.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `vector`\n06|20|12|593|498|`14.4240`|[Day06.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day06.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `map` `vector`\n07|107|76|2580|2048|`20.6566`|[Day07.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day07.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `regex` `sstream` `vector` `unordered_map`\n08|28|17|930|768|`1.7914`|[Day08.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day08.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `unordered_map`\n09|30|21|657|459|`0.7433`|[Day09.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day09.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp)\n10|59|38|1787|1478|`1.9382`|[Day10.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day10.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `array` `initializer_list` `iomanip` `locale` `numeric` `vector` `utility`\n11|30|20|763|525|`1.2970`|[Day11.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day11.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `cctype` `cmath` `utility`\n12|23|12|618|523|`24.2345`|[Day12.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day12.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `regex` [`util.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/util.hpp)\n13|40|25|955|749|`25.5269`|[Day13.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day13.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `iterator` `algorithm` `type_traits` `utility` `vector` [`util.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/util.hpp)\n14|42|26|1070|836|`146.6637`|[Day14.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day14.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) [`util.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/util.hpp) `algorithm` `array` `sstream` `string`\n15|36|25|877|692|`563.4783`|[Day15.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day15.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `random` `regex`\n16|51|32|1374|1055|`18.9237`|[Day16.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day16.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `functional` `map` `numeric` `cstdio` `vector`\n17|31|22|682|481|`22.3354`|[Day17.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day17.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `iterator` `vector`\n18|28|17|733|571|`56.2923`|[Day18.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day18.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) [`duet_asm.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/duet_asm.hpp) `iterator` `thread` `vector`\n19|28|19|757|584|`0.9427`|[Day19.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day19.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `tuple` `utility` `vector`\n20|48|32|1628|1266|`79.5694`|[Day20.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day20.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `valarray` `vector` `utility`\n21|116|73|3302|2483|`246.2430`|[Day21.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day21.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `initializer_list` `numeric` `unordered_map` `utility` `vector`\n22|68|43|1636|1177|`829.1147`|[Day22.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day22.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `vector` `unordered_map` `utility`\n23|37|29|1000|778|`4.2999`|[Day23.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day23.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `vector` [`duet_asm.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/duet_asm.hpp)\n24|49|33|1229|890|`186.4934`|[Day24.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day24.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `iterator` `vector`\n25|64|45|1598|1168|`391.8774`|[Day25.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day25.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `cstdio` `unordered_map`\n**TOTAL**|**1095**|**718**|**28611**|**21899**|**2723.82**| |`  Solution.hpp`&nbsp;<sup>**`25`**</sup> ` vector`&nbsp;<sup>**`16`**</sup> ` algorithm`&nbsp;<sup>**`12`**</sup> ` iterator`&nbsp;<sup>**`9`**</sup> ` utility`&nbsp;<sup>**`7`**</sup> ` unordered_map`&nbsp;<sup>**`6`**</sup> ` sstream`&nbsp;<sup>**`4`**</sup> ` numeric`&nbsp;<sup>**`4`**</sup> ` regex`&nbsp;<sup>**`3`**</sup> ` array`&nbsp;<sup>**`3`**</sup> ` util.hpp`&nbsp;<sup>**`3`**</sup> ` cstdio`&nbsp;<sup>**`2`**</sup> ` map`&nbsp;<sup>**`2`**</sup> ` duet_asm.hpp`&nbsp;<sup>**`2`**</sup> ` cmath`&nbsp;<sup>**`2`**</sup> ` initializer_list`&nbsp;<sup>**`2`**</sup> ` set`&nbsp;<sup>**`1`**</sup> ` type_traits`&nbsp;<sup>**`1`**</sup> ` valarray`&nbsp;<sup>**`1`**</sup> ` iomanip`&nbsp;<sup>**`1`**</sup> ` random`&nbsp;<sup>**`1`**</sup> ` cctype`&nbsp;<sup>**`1`**</sup> ` locale`&nbsp;<sup>**`1`**</sup> ` thread`&nbsp;<sup>**`1`**</sup> ` tuple`&nbsp;<sup>**`1`**</sup> ` functional`&nbsp;<sup>**`1`**</sup> ` string`&nbsp;<sup>**`1`**</sup> ` `\n"}, {"author": "dlew", "repo": "dlew/aoc-2016", "language": "Kotlin", "language_all": {"Kotlin": 99014}, "readme_contents": "Answers for [Advent of Code](http://adventofcode.com/) 2016.\n\nBe gentle, I admit that some answers are fairly ugly."}, {"author": "krisajenkins", "repo": "krisajenkins/AdventOfCode", "language": "PureScript", "language_all": {"PureScript": 167990}, "readme_contents": "# Advent of Code\n\nMy entries for AdventOfCode.com, written in PureScript.\n\n_Disclaimer: I'm not claiming that this code is beautiful, or even\n100% correct, just that it earns me those precious, precious\nstars. :-D_\n\n## Building\n\n``` sh\nnpm install -g yarn\nyarn\nyarn run bower install\nyarn run pulp test\n```\n\n## Thoughts\n\n### 2017, Day 25\n\nThat was fun. Since it was the last one, I drew it out a bit by\nwriting a full parser instead of just Vimming the instruction list\ninto data. I made the infinite tape out of just a set of the addresses\nthat are 1s.\n\n### 2017, Day 24\n\nForced me to think about bidirectional graph representation, which is\ninteresting. There's probably a better go-to data structure that I\nmust hunt out.\n\n### 2017, Day 23\n\nAnother really interesting one - reverse-engineering machine\ncode. I've never done anything like that before. It was very\nsatisfying when the penny dropped about what the program actually\ndoes.\n\n### 2017, Day 22\nPerformance problems at first, but basically it's just Langton's Ant,\nwhich I've done before.\n\n### 2017, Day 21\n\nUgh! Did it, but this is my personal shame list. :-(\n\n### 2017, Day 20\n\nPart 1 was trivial. Part 2 took ages, but because I insisted on going\nwith maths rather than simulation, and I got one of the intermediate\nformulea wrong, which took ages to find. I'm please I can still solve\na quadratic equation though!\n\n### 2017, Day 19\n\nMuch easier than it looked at first!\n\n### 2017, Day 18\n\nProbably the most interesting challenge yet. I've solved it, but\nhopefully I'll find time to circle back and actually do something\nelegant. :-}\n\n### 2017, Day 17\n\nPhew! Editor problems and life getting in the way. Nearly didn't\nfinish this one. Good puzzle though.\n\n### 2017, Day 16\n\nAnother fun one. I made a wrong assumption about how I could optimise\nstep 2, and that slowed me down, but ended up with a nice optimisation\nthat made the whole thing performant enough. :-)\n\n### 2017, Day 15\n\nHad to deal with integer overflow (!), but easy enough if you'll\nforgive the fact that eachs solution takes 60s to run.\n\n### 2017, Day 14\n\nMuch easier than it initially looked, thanks to Day 12.\n\n### 2017, Day 13\n\nBit disappointed I could get this performant with lazy sequences, but\nthe sieving trick works nicely.\n\n### 2017, Day 12\n\nEnjoyable. I reckon I could write a simple parser blindfolded\nnow. This is great practice.\n\n### 2017, Day 11\n\nFun. I've never looked into hexagonal coordinate systems before. :-)\n\n### 2017, Day 10\n\nThis one was a bit of a slog. I'm going to start fearing the\nSundays. The spec could have been clearer. Lord alone knows how people\nmanaged to solve this in less than 10 minutes. :-o\n\n### 2017, Day 9\n\nFun. My parser practice is paying off. I would not like to do this\nchallenge without a combinator-style parser library!\n\nAlso, that's probably the easiest conversion-to-round-2 so far.\n\n### 2017, Day 8\n\nProbably my most elegant solution yet, just through using\nControl.Fold. Also - wow - a real, decent-sized parser. :-)\n\n### 2017, Day 7\n\nNice. Makes me want to sit down with a bowl of satsumas and\ncatamorphism tutorial.\n\n### 2017, Day 6\n\nThis seemed like an easy one that just had a lot of legwork.\n\nI have clearly gotten over my phobia of Data.Tuple.Nested, as I'm\nusing `/\\` syntax everywhere now. :-)\n\n### 2017, Day 5\n\nNot hard, but hard to get performant. Part 2 really falls apart if\nyour implementation isn't quick enough.\n\n### 2017, Day 4\n\nEasy. I'm willfully over-using `Fold` here for the fun of it.\n\n### 2017, Day 3\n\nThe hardest so far. I got the algorithm really quickly, but getting it\nright took me ages. I'm very gad this challenge happened on a weekend.\n\n### 2017, Day 2\n\nUsed a real parser today! Nice excuse to use Control.Fold too. I wish I'd\nfigured out how to solve this one in O(n) time. :-/\n\n### 2017, Day 1\n\nFun. An easy start. I wish the spec had been clearer though.\n\n### Warm Up - 2016, Day 1\n\nI need to get familiar with PureScript parsing libraries. Arguably\nusing a real parser is overkill for the task, but why am I doing this\nif not to learn? :-D\n"}, {"author": "willkill07", "repo": "willkill07/AdventOfCode2016", "language": "C++", "language_all": {"C++": 49451, "CMake": 1341, "Shell": 66}, "readme_contents": "# Advent of Code - 2016\n\nAll implementations are written in C++, ~~strictly~~ _sort of_ adhering to C++14 guidelines.\n\n## Prerequisites\n\n* clang (>= 3.5)\n* libc++ (>= 3.5)\n* CMake (>= 3.1)\n* macOS or Linux (only two systems I've tested on)\n\n## Compiling\n\n* A `compile.sh` script is provided\n* Just run it and it should be good to go!\n\n## Running\n\n* Invoke `./Advent` to execute all the days\n* To run a specific day, invoke `./Advent -f <dayXX>`\n* To run a specific part, invoke `./Advent -p <1,2>`\n* To see more detailed help, consult `./Advent --help`\n\n## Metrics\n\n* Lines: Number of lines given by `wc`\n* Code: `Lines` - `(# preprocessor lines)` - `(lines with no alphanumeric chars)`\n* Bytes: Number of total characters\n* Chars: Number of non-whitespace characters\n* Time: Time in milliseconds to execute each part independently (separate runs)\n* Source: link to implementation\n* Headers: C++ includes used for solution\n\n## Leaderboard Highlights:\n\nDay | Part 1 | Part 2 | Points\n:--:|-------:|-------:|-------:\n02  | 31     | 90     | 81\n09  | 233    | 66     | 35\n10  | 50     | 44     | 108\n11  | 112    | 84     | 17\n12  | 31     | 19     | 152\n13  | 125    | 79     | 22\n14  | 145    | 79     | 22\n19  | 214    | 41     | 60\n20  | 131    | 40     | 61\n21  | 89     | 23     | 90\n22  | 60     | 61     | 81\n23  | 193    | 88     | 13\n24  | 25     | 21     | 156\n25  | 24     | 18     | 160\n--  |        |        | **1058**\n\n## Detailed Information\n\n Day | Lines | Code | Bytes | Chars | Time (ms) | Source | Headers\n:---:|:-----:|:----:|:-----:|:-----:| ---------:|:------:|:-------\n01|24|14|615|471|`0.5518`|[Day01.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day01.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `cmath` `set` `utility`\n02|41|24|1228|936|`0.3735`|[Day02.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day02.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `initializer_list` `type_traits` `utility`\n03|25|14|555|431|`3.8354`|[Day03.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day03.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `iterator` `vector`\n04|35|26|1107|819|`5.8549`|[Day04.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day04.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `vector`\n05|37|26|1145|922|`1040.5915`|[Day05.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day05.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp) `algorithm`\n06|18|12|511|422|`5.9470`|[Day06.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day06.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `array`\n07|38|26|942|714|`5.4559`|[Day07.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day07.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `cstring`\n08|37|28|1567|1262|`0.5520`|[Day08.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day08.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `unordered_map` `valarray`\n09|28|21|687|536|`0.3758`|[Day09.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day09.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)\n10|60|45|1698|1237|`1.4471`|[Day10.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day10.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `map` `vector`\n11|15|9|442|370|`0.3987`|[Day11.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day11.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `regex`\n12|9|4|227|200|`0.3566`|[Day12.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day12.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`assembunny.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/assembunny.hpp)\n13|34|21|1125|905|`0.6832`|[Day13.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day13.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) `array` `set`\n14|79|52|1893|1441|`1192.6846`|[Day14.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day14.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp) `algorithm` `array` `mutex` `set` `vector`\n15|41|26|1110|869|`0.4527`|[Day15.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day15.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `numeric` `vector`\n16|45|31|1197|960|`0.5364`|[Day16.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day16.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)\n17|34|21|1155|901|`38.7939`|[Day17.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day17.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp) `algorithm` `array` `list`\n18|20|13|615|508|`1.4500`|[Day18.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day18.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)\n19|11|6|409|346|`0.5743`|[Day19.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day19.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `cmath`\n20|28|19|769|614|`2.7715`|[Day20.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day20.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `set` `utility` `vector`\n21|40|31|1913|1557|`1.2612`|[Day21.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day21.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) `algorithm`\n22|30|22|915|706|`3.8691`|[Day22.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day22.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `array`\n23|9|4|228|201|`0.7739`|[Day23.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day23.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`assembunny.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/assembunny.hpp)\n24|73|52|2226|1611|`4.7776`|[Day24.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day24.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) `algorithm` `numeric` `vector`\n25|21|13|521|426|`45.9015`|[Day25.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day25.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`assembunny.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/assembunny.hpp)\n**TOTAL**|**832**|**560**|**24800**|**19365**|**2360.27**| |`  Solution.hpp`&nbsp;<sup>**`25`**</sup> ` algorithm`&nbsp;<sup>**`9`**</sup> ` vector`&nbsp;<sup>**`7`**</sup> ` array`&nbsp;<sup>**`5`**</sup> ` set`&nbsp;<sup>**`4`**</sup> ` md5.hpp`&nbsp;<sup>**`3`**</sup> ` assembunny.hpp`&nbsp;<sup>**`3`**</sup> ` io.hpp`&nbsp;<sup>**`3`**</sup> ` utility`&nbsp;<sup>**`3`**</sup> ` util.hpp`&nbsp;<sup>**`2`**</sup> ` cmath`&nbsp;<sup>**`2`**</sup> ` numeric`&nbsp;<sup>**`2`**</sup> ` regex`&nbsp;<sup>**`1`**</sup> ` cstring`&nbsp;<sup>**`1`**</sup> ` type_traits`&nbsp;<sup>**`1`**</sup> ` mutex`&nbsp;<sup>**`1`**</sup> ` valarray`&nbsp;<sup>**`1`**</sup> ` iterator`&nbsp;<sup>**`1`**</sup> ` map`&nbsp;<sup>**`1`**</sup> ` list`&nbsp;<sup>**`1`**</sup> ` unordered_map`&nbsp;<sup>**`1`**</sup> ` initializer_list`&nbsp;<sup>**`1`**</sup> ` `\n"}, {"author": "encse", "repo": "encse/adventofcode", "language": "C#", "language_all": {"C#": 375611}, "readme_contents": "\n# Advent of Code (2015-2019)\nC# solutions to the advent of code problems.\nCheck out http://adventofcode.com.\n![](demo.gif)\n## Dependencies\n\n- This project is based on `.NET Core 3.1`. It should work on Windows, Linux and OS X.\n- `AngleSharp` is used for problem download.\n\n## Running\n\nTo run the project:\n\n1. Install .NET Core\n2. Clone the repo\n3. Get help with `dotnet run`\n```\n\nUsage: dotnet run [arguments]\nSupported arguments:\n\n [year]/[day|last|all] Solve the specified problems\n [year]                Solve the whole year\n last                  Solve the last problem\n all                   Solve everything\n\nTo start working on new problems:\nlogin to https://adventofcode.com, then copy your session cookie, and export it in your console like this \n\n  export SESSION=73a37e9a72a87b550ef58c590ae48a752eab56946fb7328d35857279912acaa5b32be73bf1d92186e4b250a15d9120a0\n\nthen run the app with\n\n update [year]/[day]   Prepares a folder for the given day, updates the input, \n                       the readme and creates a solution template.\n update last           Same as above, but for the current day. Works in December only.  \n\n```\n"}, {"author": "tfausak", "repo": "tfausak/advent-of-code", "language": "Haskell", "language_all": {"Haskell": 103045}, "readme_contents": "# Advent of Code\n\nThese are my solutions to the [Advent of Code][]. There is a top-level folder\nfor each year. Inside each of those is a folder for each day. I write my\nsolutions in Haskell, and I recommend that you use [Stack][] to run them. For\nexample:\n\n``` sh\n$ cd 2017/1\n$ stack 1.hs\n1031\n```\n\nWhen working on solutions, I typically use [ghcid][] to get fast feedback. For\ninstance:\n\n``` sh\n$ cd 2017/1\n$ stack --resolver lts-13.0 exec --package ghcid -- \\\n  ghcid --test main 1.hs\n...\n```\n\nThese solutions aren't meant to show best practices. They're quick and dirty.\nThey are probably too clever for their own good.\n\nYou can find other solutions, both in Haskell and other languages, on this list:\n<https://github.com/Bogdanp/awesome-advent-of-code>.\n\n[Advent of Code]: https://adventofcode.com\n[Stack]: https://docs.haskellstack.org/en/stable/README/\n[ghcid]: https://github.com/ndmitchell/ghcid\n"}, {"author": "afonsojramos", "repo": "afonsojramos/advent-of-code-2018", "language": "Go", "language_all": {"Go": 21844}, "readme_contents": "# advent-of-code-2018\n### \ud83c\udf84 My submissions for this year's Advent of Code using Golang \ud83c\udf81\ud83c\udf85\n\n## **[Go Guide Me! \ud83c\udfc1](https://github.com/afonsojramos/advent-of-code-2018/blob/master/go-guide.md)** - small Golang guide made by me \ud83d\udc68\u200d\ud83d\udcbb \n\n## Advent of Code\nFrom the [Advent Of Code](https://adventofcode.com) page:\n\n*\"Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.\"*\n\n## Why Golang\nI've seen Golang being used in a lot of big projects, and since I've never programmed in Go I've decided to learn it! If you want to learn it too, I'm compiling a **[small introductory guide](https://github.com/afonsojramos/advent-of-code-2018/blob/master/go-guide.md)** for it!\n\n## Disclaimer\nThese solutions may be poorly implemented since I'm still learning how to use this language, but I expect an improvement over time. Furthermore, I do not have much free time, so some solutions might seem rushed. Still, I'll try to keep it clean.\n"}, {"author": "betaveros", "repo": "betaveros/advent-of-code-golf-2019", "language": null, "language_all": {}, "readme_contents": "Advent of Code Golf 2019\n========================\n\ntl;dr same setup as [last year](https://github.com/betaveros/advent-of-code-golf-2018). Let's see when I burn out.\n\n---\n\nThis repository contains [golfed](https://en.wikipedia.org/wiki/Code_golf) solutions to [Advent of Code 2019](https://adventofcode.com/2019) in my personal golfing programming language, [Paradoc](https://github.com/betaveros/paradoc), version 0.5.\n\n(These are not the solutions I compete on the leaderboard with; I think there are enough repos with such solutions and my solutions wouldn't be that different. I have also not been careful about preserving my code for level 1 before doing level 2 of each day.)\n\nI could obviously cheat at golf by adding built-ins to Paradoc tailored to each challenge after seeing it, so my programs here ought to run on Paradoc version 0.5, which was pushed just before this year's Advent of Code. I will be using the results here to guide improving Paradoc in the future, though.\n\nNote on byte count: Like a lot of the other golfing languages [seen on the Programming Puzzles & Code Golf StackExchange](https://codegolf.meta.stackexchange.com/questions/5878/what-character-encodings-may-a-submission-use/5879#5879), the byte counts here assume programs were encoded in the Paradoc code page. These programs will almost always take up more than the stated byte count as UTF-8 strings, and for the sake of easy viewability, they are UTF-8 encoded below and in the programs in this repository.\n\nDay-Level | Bytes | Code\n--- | -- | ----\n1-1 |  7 | `v]3\u00f7v\u00ab\u0161`\n1-2 | 14 | `v]{3\u00f7\u00ab0\u00c3}Iv\u00bbm\u0160`\n2-1 | 48 | `iIgHr2:\u000112HudHL,4/\u03b5Ht(3%\"Q+*\"=S{)\\Ht~}uPdHu};sHq`\n2-2 | 66 | `iIg\u2013Ak{\u2022Hr1h\u2030\u2021J\u00a8~HudHL,4/\u03b5Ht(3%\"Q+*\"=S{)\\Ht~}uPdHu};sHq19690720=}=`\n3-1 | 35 | `l{\",\"/\u00b5(17:)\u2021{\\|3%(}y\\I\u00b0~}\u00c1s}d&Lw\u0160m\u0152`\n3-2 | 43 | `l{\",\"/\u00b5(17:)\u2021{\\|3%(}y\\I\u00b0~}\u00c1sJ\u203a\u00f8\u203am}d+\u203a\u00f8\u00bbf\u2039\u0161m\u0152`\n4-1 | 15 | `iIg~M\u2026Sm$pf\u00db_-L`\n4-2 | 19 | `iIg~M\u2026Sm$pf{GLm2#}\u00e7`\n5-1 | 92 | `iIgHr{\\H=b\\|}\u2014G{\u2022)+vHt}\u2014T{\\ABD0+3T)Gzu\\a~Hu4}\u2014O0\u03bb\u00b7H=1h\u20309%[E_\u0160_Ob\u00de_Ob{1T~Ho2}{1T~G:P_&2}]=~\u2022+}`\n5-2 | 127 | `iIgHr{\\H=b\\|}\u2014G{\u2022)+vHt}\u2014T{\\ABD0+3T)Gzu\\a~Hu\u20224+}\u2014O{ABD0+2TGz~\u20223+}\u2014J0\u03bb\u00b7H=1h\u20309%[E_\u0160_Ob\u00de_Ob{1T~5Hu\u2022\u00bb}{1T~GP\u2022\u00bb}{J?}{J\\?}<p_Ob\u00ce_Ob]=~}`\n6-1 | 22 | `l]\")\"/v\u00d0Dc\u2013\u2022k\u2022z_IvLm\u00ab\u0161`\n6-2 | 31 | `l]\")\"/v\u00d0Dc\u2013\"YOU SAN\"W\u2022z_Iv\u00a8\u00d8\u00db\u00e7\u00ab`\n7   | -  | punted\n8-1 | 17 | `l150/'0#b\u0153\"12\"#y\u00de`\n8-2 | 19 | `l5\u00da150/\u2122 gm',\u00c125/Pe`\n"}, {"author": "mbutterick", "repo": "mbutterick/aoc-racket", "language": "Racket", "language_all": {"Racket": 1307869}, "readme_contents": "2015 edition\n-\n\nRacket solutions &amp; explanations for the [Advent of Code](http://adventofcode.com) puzzles. Written in Racket's literate-programming dialect, `scribble/lp2`.\n\nInstall from the command line:\n\n    raco pkg install aoc-racket\n\nExplanations will be installed automatically as part of the Scribble documentation.\n\n[Or just read the code and explanations online, right now.](http://pkg-build.racket-lang.org/doc/aoc-racket/)\n\n2016 & onward editions\n-\n\nSolutions in the respective annual subdirectories.\n"}, {"author": "tckmn", "repo": "tckmn/polyaoc-2019", "language": "Ruby", "language_all": {"Ruby": 10932, "Assembly": 1949, "C": 1587, "Haskell": 834, "Julia": 753, "JavaScript": 474, "Vim script": 216, "Python": 206, "Shell": 159}, "readme_contents": "|    | asm        | bash        | c        | dc         | haskell   | js        | julia     | mathematica | python    | ruby      | vim        |\n| -- | ---        | ----        | -        | --         | -------   | --        | -----     | ----------- | ------    | ----      | ---        |\n| 01 | [\u2713][01asm] |             |          | [\u2713][01dc]  | [\u2713][01hs] |           |           | [\u2713][01mma]  | [\u2713][01py] | [\u2713][01rb] |            |\n| 02 |            |             | [\u2713][02c] | [1][02dc]  |           |           |           |             |           | [\u2713][02rb] |            |\n| 03 |            |             |          |            |           |           | [\u2713][03jl] |             |           | [\u2713][03rb] |            |\n| 04 |            | [\u2713][04bash] | [\u2713][04c] |            | [\u2713][04hs] | [\u2713][04js] |           | [\u2713][04mma]  |           | [\u2713][04rb] | [\u2713][04vim] |\n| 05 |            |             |          | [\u2713][05dc]  |           |           |           |             |           | [\u2713][05rb] |            |\n| 06 |            |             |          |            |           |           |           |             |           | [\u2713][06rb] |            |\n| 07 |            |             |          |            |           |           |           |             |           | [\u2713][07rb] |            |\n| 08 |            |             |          |            |           |           |           |             |           | [\u2713][08rb] |            |\n| 09 |            |             |          |            |           |           |           |             |           | [\u2713][09rb] |            |\n| 10 |            |             |          |            |           |           |           |             |           | [\u2713][10rb] |            |\n| 11 |            |             |          |            |           |           |           |             |           | [\u2713][11rb] |            |\n\n[01asm]:  https://github.com/tckmn/polyaoc-2019/tree/master/01/asm\n[01dc]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/dc\n[01hs]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/hs\n[01mma]:  https://github.com/tckmn/polyaoc-2019/tree/master/01/mma\n[01py]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/py\n[01rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/rb\n[02c]:    https://github.com/tckmn/polyaoc-2019/tree/master/02/c\n[02dc]:   https://github.com/tckmn/polyaoc-2019/tree/master/02/dc\n[02rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/02/rb\n[03jl]:   https://github.com/tckmn/polyaoc-2019/tree/master/03/jl\n[03rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/03/rb\n[04bash]: https://github.com/tckmn/polyaoc-2019/tree/master/04/bash\n[04c]:    https://github.com/tckmn/polyaoc-2019/tree/master/04/c\n[04hs]:   https://github.com/tckmn/polyaoc-2019/tree/master/04/hs\n[04js]:   https://github.com/tckmn/polyaoc-2019/tree/master/04/js\n[04mma]:  https://github.com/tckmn/polyaoc-2019/tree/master/04/mma\n[04rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/04/rb\n[04vim]:  https://github.com/tckmn/polyaoc-2019/tree/master/04/vim\n[05dc]:   https://github.com/tckmn/polyaoc-2019/tree/master/05/dc\n[05rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/05/rb\n[06rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/06/rb\n[07rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/07/rb\n[08rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/08/rb\n[09rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/09/rb\n[10rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/10/rb\n[11rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/11/rb\n"}, {"author": "borkdude", "repo": "borkdude/aoc2017", "language": "Clojure", "language_all": {"Clojure": 64838, "Haskell": 4453}, "readme_contents": "# Advent of Code 2017\n\nSolutions in Clojure.\n\n## Run\n\nClone this repo and install [boot](http://boot-clj.com/).\n\nRun all completed solutions:\n\n    boot run-all\n\nor just one day:\n\n    boot run-day -d 1\n\nor just one part of a day:\n\n    boot run-day -d 1 -p 2\n"}, {"author": "tginsberg", "repo": "tginsberg/advent-2019-kotlin", "language": "Kotlin", "language_all": {"Kotlin": 48261}, "readme_contents": "## Advent of Code 2019 Solutions in Kotlin\n\n[![license](https://img.shields.io/github/license/tginsberg/advent-2019-kotlin)]()\n\nThis repo is my personal attempt at solving the [Advent of Code 2019](http://adventofcode.com/2019) set of problems with the Kotlin programming language.\n\nI am trying to solve these on the day they are posted with clear, idiomatic solutions. That means in some cases I will sacrifice performance for a more clear solution. Unlike [2017](https://github.com/tginsberg/advent-2017-kotlin) and [2018](https://github.com/tginsberg/advent-2018-kotlin), I have some travel commitments in December, so while I will endeavour to have these done day-of I can't promise it. We'll see how it goes! :)\n\nPast years, also in Kotlin:\n * 2017 - [GitHub](https://github.com/tginsberg/advent-2017-kotlin/) and [Blog Posts](https://todd.ginsberg.com/post/advent-of-code/2017/)\n * 2018 - [GitHub](https://github.com/tginsberg/advent-2018-kotlin/) and [Blog Posts](https://todd.ginsberg.com/post/advent-of-code/2018/)\n\n\n#### Daily Solution Index for 2019\n|   Day   | Title                                         |  Links                                       |\n| --------|-----------------------------------------------|--------------------------------------------- |\n|    1    | The Tyranny of the Rocket Equation            | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day1/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day01.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/1) |\n|    2    | 1202 Program Alarm                            | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day2/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day02.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/2) |\n|    2    | 1202 Program Alarm - IntCodeComputer Version  | [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day02IntCode.kt) |\n|    3    | Crossed Wires                                 | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day3/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day03.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/3) |\n|    4    | Secure Container                              | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day4/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day04.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/4) |\n|    5    | Sunny with a Chance of Asteroids              | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day5/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day05.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/5) |\n|    6    | Universal Orbit Map                           | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day6/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day06.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/6) |\n|    7    | Amplification Circuit                         | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day7/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day07.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/7) |\n|    8    | Space Image Format                            | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day8/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day08.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/8) |\n|    9    | Sensor Boost                                  | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day9/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day09.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/9) |\n|    10   | Monitoring Station                            | [\\[Blog Post\\]](https://todd.ginsberg.com/post/advent-of-code/2019/day10/) [\\[Code\\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day10.kt) [\\[AoC\\]](http://adventofcode.com/2019/day/10) |\n      \n\nCopyright &copy; 2019 by Todd Ginsberg.\n"}, {"author": "fhinkel", "repo": "fhinkel/AdventOfCode2018", "language": "JavaScript", "language_all": {"JavaScript": 80195}, "readme_contents": "# Advent of Code 2018 with Node.js 10\n\n[Advent of Code](https://adventofcode.com/2018/about) is an Advent\ncalendar of small programming puzzles\nfor a variety of skill sets and skill levels that can be\nsolved in any programming language you like.\n[47,000 people](https://adventofcode.com/2018/stats) are playing in 2018.\n\nSome of my solutions are live streamed and the recordings are available in this\n[playlist on YouTube](https://www.youtube.com/playlist?list=PL65pp6Tpk6913swH54jCu6VWGgWUV-5tV).\n\nHow did you solve the puzzles?"}, {"author": "ghaiklor", "repo": "ghaiklor/advent-of-code-2015", "language": "JavaScript", "language_all": {"JavaScript": 96106}, "readme_contents": "# Advent of Code 2015\n\nSolutions for Advent of Code which are written with NodeJS.\n\n## What is Advent of Code?\n\nAdvent of Code is a series of small programming puzzles for a variety of skill levels.\nThey are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code.\nEach puzzle calls upon different skills and has two parts that build on a theme.\n\n## Project structure\n\nEach solution is divided by folders and named as it is named in game.\n\n## Running\n\nThese solutions is written with NodeJS 4 and ES6, so you need to have NodeJS 4, at least, for running these solutions.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Eugene Obrezkov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"}, {"author": "sophiebits", "repo": "sophiebits/adventofcode", "language": "Python", "language_all": {"Python": 18604}, "readme_contents": "# Advent of Code Solutions\n\nMy solutions to [Advent of Code](https://adventofcode.com/).\n"}, {"author": "KrzaQ", "repo": "KrzaQ/AdventOfCode2017", "language": "Ruby", "language_all": {"Ruby": 25347, "C++": 4369}, "readme_contents": "[Advent of Code 2017](https://adventofcode.com) solutions by [KrzaQ][kq]\n========================\n\nI'm using various languages to provide solutions.\n\n| Day | Name                                           | D    | C++    | Ruby | Shakespeare |\n|:---:|:-----------------------------------------------|:----:|:------:|:----:|:-----------:|\n| 01  | [Inverse Captcha][day01]                       |      |        | [:heavy_check_mark:](./day01/main.rb)      |             |\n| 02  | [Corruption Checksum][day02]                   |      |        | [:heavy_check_mark:](./day02/main.rb)      |             |\n| 03  | [Spiral Memory][day03]                         |      |        | [:heavy_check_mark:](./day03/main.rb)      |             |\n| 04  | [High-Entropy Passphrases][day04]              |      | [:heavy_check_mark:](./day04/main.cpp) | [:heavy_check_mark:](./day04/main.rb)      |             |\n| 05  | [Maze of Twisty Trampolines, All Alike][day05] |      |        | [:heavy_check_mark:](./day05/main.rb)      |             |\n| 06  | [Memory Reallocation][day06]                   |      |        | [:heavy_check_mark:](./day06/main.rb)      |             |\n| 07  | [Recursive Circus][day07]                      |      |        | [:heavy_check_mark:](./day07/main.rb)      |             |\n| 08  | [I Heard You Like Registers][day08]            |      |        | [:heavy_check_mark:](./day08/main.rb)      |             |\n| 09  | [Stream Processing][day09]                     |      |        | [:heavy_check_mark:](./day09/main.rb)      |             |\n| 10  | [Knot Hash][day10]                             |      |        | [:heavy_check_mark:](./day10/main.rb)      |             |\n| 11  | [Hex Ed][day11]                                |      |        | [:heavy_check_mark:](./day11/main.rb)      |             |\n| 12  | [Digital Plumber][day12]                       |      |        | [:heavy_check_mark:](./day12/main.rb)      |             |\n| 13  | [Packet Scanners][day13]                       |      |        | [:heavy_check_mark:](./day13/main.rb)      |             |\n| 14  | [Disk Defragmentation][day14]                  |      |        | [:heavy_check_mark:](./day14/main.rb)      |             |\n| 15  | [Dueling Generators][day15]                    |      | [:heavy_check_mark:](./day15/main.cpp) | [:heavy_check_mark:](./day15/main.rb)      |             |\n| 16  | [Permutation Promenade][day16]                 |      |        | [:heavy_check_mark:](./day16/main.rb)      |             |\n| 17  | [Spinlock][day17]                              |      |        | [:heavy_check_mark:](./day17/main.rb)      |             |\n| 18  | [Duet][day18]                                  |      |        | [:heavy_check_mark:](./day18/main.rb)      |             |\n| 19  | [A Series of Tubes][day19]                     |      |        | [:heavy_check_mark:](./day19/main.rb)      |             |\n| 20  | [Particle Swarm][day20]                        |      |        | [:heavy_check_mark:](./day20/main.rb)      |             |\n| 21  | [Fractal Art][day21]                           |      |        | [:heavy_check_mark:](./day21/main.rb)      |             |\n| 22  | [Sporifica Virus][day22]                       |      |        | [:heavy_check_mark:](./day22/main.rb)      |             |\n| 23  | [Coprocessor Conflagration][day23]             |      |        | [:heavy_check_mark:](./day23/main.rb)      |             |\n| 24  | [Electromagnetic Moat][day24]                  |      |        | [:heavy_check_mark:](./day24/main.rb)      |             |\n| 25  | [The Halting Problem][day25]                   |      |        | [:heavy_check_mark:](./day25/main.rb)      |             |\n\n[day01]: https://adventofcode.com/2017/day/1\n[day02]: https://adventofcode.com/2017/day/2\n[day03]: https://adventofcode.com/2017/day/3\n[day04]: https://adventofcode.com/2017/day/4\n[day05]: https://adventofcode.com/2017/day/5\n[day06]: https://adventofcode.com/2017/day/6\n[day07]: https://adventofcode.com/2017/day/7\n[day08]: https://adventofcode.com/2017/day/8\n[day09]: https://adventofcode.com/2017/day/9\n[day10]: https://adventofcode.com/2017/day/10\n[day11]: https://adventofcode.com/2017/day/11\n[day12]: https://adventofcode.com/2017/day/12\n[day13]: https://adventofcode.com/2017/day/13\n[day14]: https://adventofcode.com/2017/day/14\n[day15]: https://adventofcode.com/2017/day/15\n[day16]: https://adventofcode.com/2017/day/16\n[day17]: https://adventofcode.com/2017/day/17\n[day18]: https://adventofcode.com/2017/day/18\n[day19]: https://adventofcode.com/2017/day/19\n[day20]: https://adventofcode.com/2017/day/20\n[day21]: https://adventofcode.com/2017/day/21\n[day22]: https://adventofcode.com/2017/day/22\n[day23]: https://adventofcode.com/2017/day/23\n[day24]: https://adventofcode.com/2017/day/24\n[day25]: https://adventofcode.com/2017/day/25\n\n[kq]: https://dev.krzaq.cc\n\n"}, {"author": "willkill07", "repo": "willkill07/AdventOfCode2015", "language": "C++", "language_all": {"C++": 43215, "CMake": 1049, "Makefile": 174, "Shell": 66}, "readme_contents": "# Advent of Code - 2015\n\nAll implementations are written in C++, ~~strictly~~ _sort of_ adhering to C++14 guidelines.\n\n## Prerequisites\n\n* clang (>= 3.5)\n* libc++ (>= 3.5)\n* CMake (>= 3.1)\n* macOS or Linux (only two systems I've tested on)\n\n## Compiling\n\n* A `compile.sh` script is provided\n* Just run it and it should be good to go!\n\n## Running\n\n* Invoke `./Advent` to execute all the days\n* To run a specific day, invoke `./Advent -f <dayXX>`\n* To run a specific part, invoke `./Advent -p <1,2>`\n* To see more detailed help, consult `./Advent --help`\n\n## Metrics\n\n* Lines: Number of lines given by `wc`\n* Code: `Lines` - `(# preprocessor lines)` - `(lines with no alphanumeric chars)`\n* Bytes: Number of total characters\n* Chars: Number of non-whitespace characters\n* Time: Time in milliseconds to execute each part independently (separate runs)\n* Source: link to implementation\n* Headers: C++ includes used for solution\n# Advent of Code - 2015\n\n## Leaderboard Highlights:\n\n* Day 5: Placed #60\n* Day 8: Placed #14\n* Day 10: Placed #64\n* Day 17: Placed #68\n* Day 20: Placed #33\n* Day 23: Placed #83\n* Day 24: Placed #62\n\n## Detailed Information\n\n Day | Lines | Code | Bytes | Chars | Time (ms) | Source | Headers\n:---:|:-----:|:----:|:-----:|:-----:| ---------:|:------:|:-------\n01|8|5|285|219|`1.1782`|[Day01.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day01.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)\n02|16|10|586|462|`6.3465`|[Day02.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day02.cpp)|`algorithm` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n03|25|15|622|479|`2.7311`|[Day03.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day03.cpp)|`map` `tuple` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n04|16|9|592|480|`310.0225`|[Day04.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day04.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp)\n05|45|31|1403|1053|`2.0288`|[Day05.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day05.cpp)|`array` `climits` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n06|25|17|957|723|`16.9409`|[Day06.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day06.cpp)|`array` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n07|61|42|2025|1488|`11.0841`|[Day07.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day07.cpp)|`unordered_map` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n08|18|12|546|412|`6.3003`|[Day08.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day08.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n09|38|26|1334|1051|`13.6350`|[Day09.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day09.cpp)|`limits` `set` `unordered_map` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n10|22|13|609|436|`32.3288`|[Day10.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day10.cpp)|`vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n11|35|23|916|650|`18.2054`|[Day11.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day11.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n12|34|26|1029|697|`1.2039`|[Day12.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day12.cpp)|`stack` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n13|36|25|1346|1064|`14.8666`|[Day13.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day13.cpp)|`limits` `set` `unordered_map` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n14|46|30|1549|1140|`1.0479`|[Day14.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day14.cpp)|`algorithm` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n15|48|31|1682|1321|`8.2416`|[Day15.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day15.cpp)|`numeric` `valarray` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n16|32|18|1292|1047|`7.2845`|[Day16.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day16.cpp)|`functional` `unordered_map` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp)\n17|26|18|908|693|`0.4104`|[Day17.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day17.cpp)|`algorithm` `array` `limits` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n18|36|23|1316|1016|`4.6127`|[Day18.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day18.cpp)|`array` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n19|28|22|1066|830|`2.1255`|[Day19.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day19.cpp)|`unordered_map` `unordered_set` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n20|16|9|523|387|`33.6636`|[Day20.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day20.cpp)|`array` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n21|28|20|1352|1012|`0.4910`|[Day21.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day21.cpp)|`array` `cmath` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n22|72|49|2257|1682|`5.3560`|[Day22.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day22.cpp)|`limits` `unordered_set` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)\n23|30|20|1314|1027|`1.2647`|[Day23.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day23.cpp)|`algorithm` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp)\n24|31|19|986|767|`9.6601`|[Day24.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day24.cpp)|`algorithm` `numeric` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp)\n25|24|16|736|536|`0.2636`|[Day25.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day25.cpp)|[`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)\n**TOTAL**|**796**|**529**|**27231**|**20672**|**511.294**| |`  Solution.hpp`&nbsp;<sup>**`25`**</sup> ` io.hpp`&nbsp;<sup>**`24`**</sup> ` vector`&nbsp;<sup>**`8`**</sup> ` array`&nbsp;<sup>**`6`**</sup> ` algorithm`&nbsp;<sup>**`5`**</sup> ` unordered_map`&nbsp;<sup>**`5`**</sup> ` limits`&nbsp;<sup>**`4`**</sup> ` util.hpp`&nbsp;<sup>**`3`**</sup> ` set`&nbsp;<sup>**`2`**</sup> ` numeric`&nbsp;<sup>**`2`**</sup> ` unordered_set`&nbsp;<sup>**`2`**</sup> ` map`&nbsp;<sup>**`1`**</sup> ` stack`&nbsp;<sup>**`1`**</sup> ` tuple`&nbsp;<sup>**`1`**</sup> ` climits`&nbsp;<sup>**`1`**</sup> ` cmath`&nbsp;<sup>**`1`**</sup> ` valarray`&nbsp;<sup>**`1`**</sup> ` md5.hpp`&nbsp;<sup>**`1`**</sup> ` functional`&nbsp;<sup>**`1`**</sup> ` `\n"}, {"author": "ferrolho", "repo": "ferrolho/advent-of-code", "language": "Python", "language_all": {"Python": 64874, "Julia": 27162}, "readme_contents": "# Advent of Code\n\n:santa: :christmas_tree: :gift:\n\nMy solutions for the Advent of Code problems.\n\nI might write something here, eventually.\n"}, {"author": "betaveros", "repo": "betaveros/advent-of-code-golf-2018", "language": null, "language_all": {}, "readme_contents": "Advent of Code Golf 2018\n========================\n\nThis repository contains [golfed](https://en.wikipedia.org/wiki/Code_golf) solutions to [Advent of Code 2018](https://adventofcode.com/2018) in my personal golfing programming language, [Paradoc](https://github.com/betaveros/paradoc).\n\n(These are not the solutions I compete on the leaderboard with; I think there are enough repos with such solutions and my solutions wouldn't be that different. I have also not been careful about preserving my code for level 1 before doing level 2 of each day.)\n\nI could obviously cheat at golf by adding built-ins to Paradoc tailored to each challenge after seeing it, so my programs here are all meant to run on Paradoc version v0.2.15, which was pushed (way) before this year's Advent of Code. I will be using the results here to guide improving Paradoc in the future, though. The programs also may not run on future versions.\n\nNote on byte count: Like a lot of the other golfing languages [seen on the Programming Puzzles & Code Golf StackExchange](https://codegolf.meta.stackexchange.com/questions/5878/what-character-encodings-may-a-submission-use/5879#5879), the byte counts here assume programs were encoded in the Paradoc code page. These programs will almost always take up more than the stated byte count as UTF-8 strings, and for the sake of easy viewability, they are UTF-8 encoded below and in the programs in this repository.\n\nDay-Level | Bytes | Code\n--- | -- | ----\n1-1 | 3  | `v]\u0160`\n1-2 | 14 | `v\u00ac1k*+s:U]z\u00dbg\u2039`\n2-1 | 18 | `l]\u03bc$GLmE4B#\u00df\u00c2m}\u00c1r\u00de`\n2-2 | 16 | `l]\u00b2\u00a8\u00dbf\u03bc\u2122\u00cef\u2039m}L_\u00c6`\n3-1 | 29 | `l\u00ac\u03bc\"\\d+\"El\u00a8Im\u00bb~\\u+\u00dfd*\u00a8}\u00a8$G\u00ab_#`\n3-2 | 42 | `l\u00ac\u03bc\"\\d+\"El\u00a8Im~\\u+\u00dfd*\u00a8\\+bm}\u00a8$\u00ab_G\u00bdf\u00a8\u203amU$J\u00dbg\u2039`\n4-1 | 50 | `l]$\u03b5\"\\d+\"El\u00a8Im4>:L\u00ce+x}]\u03bc2/(\u203a\\\u03bc~\u00a8}\u00a8\u2021\u00df}\u00a8$\u2039_{GL_\u00c6}\u00d7\u2039\u00de`\n4-2 | 45 | `l]$\u03b5\"\\d+\"El\u00a8Im4>:L\u00ce+x}]\u03bc2/(\u203a\\\u03bc~\u00a8}\u00a8\u2021\u00df}\u00a8$GL_\u00c6\u2039\u00de`\n5-1 | 17 | `l0\\\u03b5Xc=k\u00b8;_X?}]L(`\n5-2 | 31 | `lUa{{Ucu-}bf0\\\u03b5Xc=k\u00b8;_X?}]L(}\u00df\u0152`\n6-1 | 88 | `l]\u03bc',-WIm}.E\u2122\u03b5\u0152q\u00c6}{\u2026d*\u00a8}q\u2021d\u00a6\\{~\u2026*\u00a8}d\u00d0+{\u03bc;9k:E\u03b5Z\u00b1z\u0160<k;_{>kX&p\u00b8u\u00b8u\\}?};} f$G}d+$\u2039_G\u00ab_-\u00a8Lm\u00c6`\n"}, {"author": "jchristman", "repo": "jchristman/adventofcode", "language": "Python", "language_all": {"Python": 38238}, "readme_contents": "# Advent Of Code - Python One-Liner Challenge\n\nA fun way of making the Advent of Code a little more challenging and also a fun way to learn some intracacies of the python language! For an example of what is ok, see the day 1 solution. I have done several of them already, so spoilers in the individual folders!\n\nRules:\n\n- Reading input into a variable from another file or with an assignment is acceptable and does not count against your total for lines.\n- Your solution must take the form of 'print INSERT_CODE_HERE'\n- Formatting your print with a format string is acceptable so long as you are only substituting ONE value (multiple calculations are not allowed)\n- No global variables (outside of the input variable)\n"}, {"author": "carols10cents", "repo": "carols10cents/aoc-rs-2019", "language": "Rust", "language_all": {"Rust": 75146}, "readme_contents": "# Advent of Code 2019\n\nMy solutions, in Rust of course. I'm doing these for fun, not for leaderboard points, so my\nsolutions might be posted late or not at all.\n\nStarting on day 2, I tried to commit before doing `cargo test` or `cargo run`, and then not\nsquashing any commits, so that you can see all my mistakes!\n"}, {"author": "mariotacke", "repo": "mariotacke/advent-of-code-2018", "language": "JavaScript", "language_all": {"JavaScript": 74866}, "readme_contents": "# Advent of Code 2018 - My Solutions\n[![Build Status](https://github.com/mariotacke/advent-of-code-2018/workflows/build/badge.svg)](https://github.com/mariotacke/advent-of-code-2018/actions)\n[![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2018/master/.github/badges/completion.json)](https://github.com/mariotacke/advent-of-code-2018)\n[![Dependency Status](https://img.shields.io/david/mariotacke/advent-of-code-2018.svg)](https://david-dm.org/mariotacke/advent-of-code-2018)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/mariotacke/advent-of-code-2018/master/LICENSE)\n\n\"We've detected some temporal anomalies,\" one of Santa's Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. \"At 500-year intervals into the past, someone has been changing Santa's history!\"\n\n\"The good news is that the changes won't propagate to our time stream for another 25 days, and we have a device\" - she attaches something to your wrist - \"that will let you fix the changes with no such propagation delay. It's configured to send you 500 years further into the past every few days; that was the best we could do on such short notice.\"\n\n\"The bad news is that we are detecting roughly **fifty** anomalies throughout time; the device will indicate fixed anomalies with **stars**. The other bad news is that we only have one device and you're the best person for the job! Good lu--\" She taps a button on the device and you suddenly feel like you're falling. To save Christmas, you need to get all **fifty stars** by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants **one star**. Good luck!\n\n## Days\n\n- [Day 1: Chronal Calibration](day-01-chronal-calibration/)\n- [Day 2: Inventory Management System](day-02-inventory-management-system/)\n- [Day 3: No Matter How You Slice It](day-03-no-matter-how-you-slice-it/)\n- [Day 4: Repose Record](day-04-repose-record/)\n- [Day 5: Alchemical Reduction](day-05-alchemical-reduction/)\n- [Day 6: Chronal Coordinates](day-06-chronal-coordinates/)\n- [Day 7: The Sum of Its Parts](day-07-the-sum-of-its-parts/)\n- [Day 8: Memory Maneuver](day-08-memory-maneuver/)\n- [Day 9: Marble Mania](day-09-marble-mania/)\n- [Day 10: The Stars Align](day-10-the-stars-align/)\n- [Day 11: Chronal Charge](day-11-chronal-charge/)\n- [Day 12: Subterranean Sustainability](day-12-subterranean-sustainability/)\n- [Day 13: Mine Cart Madness](day-13-mine-cart-madness/)\n- [Day 14: Chocolate Charts](day-14-chocolate-charts/)\n- [Day 15: Beverage Bandits](day-15-beverage-bandits/)\n- [Day 16: Chronal Classification](day-16-chronal-classification/)\n- [Day 18: Settlers of The North Pole](day-18-settlers-of-the-north-pole/)\n\n## Running Tests\n\nEach day contains its own set of tests. To run them type `npm test`.\n\n## Previous Years\n- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2017/master/.github/badges/completion.json&label=2017)](https://github.com/mariotacke/advent-of-code-2017)\n- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2016/master/.github/badges/completion.json&label=2016)](https://github.com/mariotacke/advent-of-code-2016)\n- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2015/master/.github/badges/completion.json&label=2015)](https://github.com/mariotacke/advent-of-code-2015)\n\n## Visit\n- http://adventofcode.com/2018\n"}, {"author": "dmjio", "repo": "dmjio/AdventOfCode2018", "language": "Haskell", "language_all": {"Haskell": 3901}, "readme_contents": "# AdventOfCode2018\nhttps://adventofcode.com/2018\n"}, {"author": "FlorianCassayre", "repo": "FlorianCassayre/AdventOfCode-2018", "language": "Scala", "language_all": {"Scala": 42155}, "readme_contents": "_My solutions to the 2018 edition of [Advent Of Code](https://adventofcode.com)._\n\nCheck out [my 2017 participation](https://github.com/FlorianCassayre/AdventOfCode-2017)!\n\n\n## Problems & Solutions\n\n* [Day 1](https://adventofcode.com/2018/day/1): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day01.scala)\n* [Day 2](https://adventofcode.com/2018/day/2): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day02.scala)\n* [Day 3](https://adventofcode.com/2018/day/3): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day03.scala)\n* [Day 4](https://adventofcode.com/2018/day/4): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day04.scala)\n* [Day 5](https://adventofcode.com/2018/day/5): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day05.scala)\n* [Day 6](https://adventofcode.com/2018/day/6): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day06.scala)\n* [Day 7](https://adventofcode.com/2018/day/7): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day07.scala)\n* [Day 8](https://adventofcode.com/2018/day/8): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day08.scala)\n* [Day 9](https://adventofcode.com/2018/day/9): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day09.scala)\n* [Day 10](https://adventofcode.com/2018/day/10): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day10.scala)\n* [Day 11](https://adventofcode.com/2018/day/11): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day11.scala)\n* [Day 12](https://adventofcode.com/2018/day/12): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day12.scala)\n* [Day 13](https://adventofcode.com/2018/day/13): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day13.scala)\n* [Day 14](https://adventofcode.com/2018/day/14): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day14.scala)\n* [Day 15](https://adventofcode.com/2018/day/15): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day15.scala)\n* [Day 16](https://adventofcode.com/2018/day/16): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day16.scala)\n* [Day 17](https://adventofcode.com/2018/day/17): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day17.scala)\n* [Day 18](https://adventofcode.com/2018/day/18): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day18.scala)\n* [Day 19](https://adventofcode.com/2018/day/19): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day19.scala)\n* [Day 20](https://adventofcode.com/2018/day/20): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day20.scala)\n* [Day 21](https://adventofcode.com/2018/day/21): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day21.scala)\n* [Day 22](https://adventofcode.com/2018/day/22): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day22.scala)\n* [Day 23](https://adventofcode.com/2018/day/23): \u2013[](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day23.scala)\n* [Day 24](https://adventofcode.com/2018/day/24): \u2013[](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day24.scala)\n* [Day 25](https://adventofcode.com/2018/day/25): \u2013[](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day25.scala)\n\n\n## Testing\n\nYou'll need Scala `2.12.7` and sbt `1.2.6`.\n\nStart by entering the sbt shell:\n```\n$ sbt\n```\n\nTo run a solution - for instance **day 1** - you can conveniently use the following command:\n```\n> day 1\n```\n\nThe output will be printed to the console and stored to the corresponding file in `output/`.\n\n\n## License\n\nThis repository is licensed under the MIT License, please refer to the `LICENSE` file."}, {"author": "narimiran", "repo": "narimiran/AdventOfCode2018", "language": "Nim", "language_all": {"Nim": 29897}, "readme_contents": "# Advent of Code 2018\n\nAll my Advent of Code repos:\n\n* [AoC 2015 in Nim](https://github.com/narimiran/advent_of_code_2015)\n* [AoC 2016 in Python](https://github.com/narimiran/advent_of_code_2016)\n* [AoC 2017 in Nim, Python, OCaml](https://github.com/narimiran/AdventOfCode2017)\n* [AoC 2018 in Nim](https://github.com/narimiran/AdventOfCode2018) (this repo)\n* [AoC 2019 in OCaml](https://github.com/narimiran/AdventOfCode2019)\n\nThis year, I will do it once again in [Nim](https://nim-lang.org/), and later on maybe in some other language too.\n\nMy aim is to provide clean, readable, and idiomatic solutions.\nIf you have any comment/suggestion/advice, please let me know!\n\n\n&nbsp;\n\n\n## Solutions\n\nTask                                                                        | Solution                   | Comment\n---                                                                         | ---                        | ---\n[Day 1: Chronal Calibration](https://adventofcode.com/2018/day/1)           | [day01.nim](nim/day01.nim) | Dogfooding by using [itertools](https://github.com/narimiran/itertools) to `cycle` through the input. Using `IntSet` for fast lookups.\n[Day 2: Inventory Management System](https://adventofcode.com/2018/day/2)   | [day02.nim](nim/day02.nim) | The original solution used `zip`, but that allocates a new sequence.\n[Day 3: No Matter How You Slice It](https://adventofcode.com/2018/day/3)    | [day03.nim](nim/day03.nim) | No need for regex, `scanf` macro is great for these kinds of inputs. Using smaller integers instead of `int` gives noticeable speed boost. Using templates to keep the main part short and readable, without unnecessary repetitions.\n[Day 4: Repose Record](https://adventofcode.com/2018/day/4)                 | [day04.nim](nim/day04.nim) | [2018-12-04 06:00] Guard narimiran begins shift\n[Day 5: Alchemical Reduction](https://adventofcode.com/2018/day/5)          | [day05.nim](nim/day05.nim) | 4x speed improvement when using the already shortened polymer (first part) for the second part.\n[Day 6: Chronal Coordinates](https://adventofcode.com/2018/day/6)           | [day06.nim](nim/day06.nim) | The slowest task so far.\n[Day 7: The Sum of Its Parts](https://adventofcode.com/2018/day/7)          | [day07.nim](nim/day07.nim) | Using `heapqueue` is a no-brainer here.\n[Day 8: Memory Maneuver](https://adventofcode.com/2018/day/8)               | [day08.nim](nim/day08.nim) | Using recursion is a no-brainer here.\n[Day 9: Marble Mania](https://adventofcode.com/2018/day/9)                  | [day09.nim](nim/day09.nim) | Compile it with `--gc:regions` to get the most performance out of it.\n[Day 10: The Stars Align](https://adventofcode.com/2018/day/10)             | [day10.nim](nim/day10.nim) | The first usage of Nim templates this year. Using [unpack](https://github.com/technicallyagd/unpack) for `<-` sequence unpacking.\n[Day 11: Chronal Charge](https://adventofcode.com/2018/day/11)              | [day11.nim](nim/day11.nim) | Using [summed-area table](https://en.wikipedia.org/wiki/Summed-area_table) to have O(n^3) solution (na\u00efve solution is O(n^5)). Using threads gives 2x speed boost.\n[Day 12: Subterranean Sustainability](https://adventofcode.com/2018/day/12) | [day12.nim](nim/day12.nim) | Nothing to write home about.\n[Day 13: Mine Cart Madness](https://adventofcode.com/2018/day/13)           | [day13.nim](nim/day13.nim) | Using [complex plane](https://en.wikipedia.org/wiki/Complex_plane) is the obvious choice for the tasks like this, but `complex` in Nim is limited to floats, so I decided to use plain old tuples of integers.\n[Day 14: Chocolate Charts](https://adventofcode.com/2018/day/14)            | [day14.nim](nim/day14.nim) | Using `int8` to keep the memory usage down.\n[Day 15: Beverage Bandits](https://adventofcode.com/2018/day/15)            |                            | Ain't nobody got time for that.\n[Day 16: Chronal Classification](https://adventofcode.com/2018/day/16)      | [day16.nim](nim/day16.nim) | Nim bitsets don't have `pop`.\n[Day 17: Reservoir Research](https://adventofcode.com/2018/day/17)          | [day17.nim](nim/day17.nim) | Recursion keeps things nice and simple. Templates help with the readability.\n[Day 18: Settlers of The North Pole](https://adventofcode.com/2018/day/18)  | [day18.nim](nim/day18.nim) | Simplified boundary conditions by creating a border around the area.\n[Day 19: Go With The Flow](https://adventofcode.com/2018/day/19)            | [day19.nim](nim/day19.nim) | Figured out the inner loop, do it \"automatically\".\n[Day 20: A Regular Map](https://adventofcode.com/2018/day/20)               | [day20.nim](nim/day20.nim) | The initial solution first created a maze and then DFS-ed through it. Current solution immediately calculates the distances, for 3x performance gain.\n[Day 21: Chronal Conversion](https://adventofcode.com/2018/day/21)          | [day21.nim](nim/day21.nim) | The most interesting part of the task (figuring out what the instructions really do) was done on paper. [Here](inputs/21-annotated.txt) is a part of it.\n[Day 22: Chronal Conversion](https://adventofcode.com/2018/day/22)          | [day22.nim](nim/day22.nim) | The first time in four years that I use [`A*` algorithm](https://www.redblobgames.com/pathfinding/a-star/introduction.html#astar) for some AoC task.\n"}, {"author": "markheath", "repo": "markheath/advent-of-code-js", "language": "JavaScript", "language_all": {"JavaScript": 82820}, "readme_contents": "# Advent of Code JavaScript Solutions\n\nThis is a repository for me to attempt the [Advent of Code](http://adventofcode.com) challenges in JavaScript.\n\nIn past years I've solved them using C# and F#. [read about my solutions here](http://markheath.net/category/advent+of+code). This repository is for me to improve my JavaScript skills by solving the puzzles with node.js as ES6. I've ported my 2015 solutions to JavaScript, and in 2017 I just used JavaScript.\n\nTo get started:\n```\nnpm install\n```\n\nTo solve all puzzles for this year\n\n```\nnode index.js\n```\n\nTo run all tests for 2015:\n```\nnode index.js 2015\n```\n\nTo run tests for 2015 day 10\n```\nnode index.js 2015 10\n```\n\nTo run Jasmine unit tests\n```\nnpm test\n```\n\nTo run a subset of Jasmine unit tests\n```\nnpm test -- --filter=\"flatMap\"\n```\n\n## Blog posts about 2017 solutions\n\n- [Day 1](http://markheath.net/post/advent-of-code-2017-day-1)\n- [Day 2](http://markheath.net/post/advent-of-code-2017-day-2)\n- [Day 3](http://markheath.net/post/advent-of-code-2017-day-3)\n- [Day 4](http://markheath.net/post/advent-of-code-2017-day-4)\n- [Day 5](http://markheath.net/post/advent-of-code-2017-day-5)\n- [Day 6](http://markheath.net/post/advent-of-code-2017-day-6)\n- [Day 7](http://markheath.net/post/advent-of-code-2017-day-7)\n- [Day 8](http://markheath.net/post/advent-of-code-2017-day-8)\n- [Day 9](http://markheath.net/post/advent-of-code-2017-day-9)\n- [Day 10](http://markheath.net/post/advent-of-code-2017-day-10)\n- [Day 11](http://markheath.net/post/advent-of-code-2017-day-11)\n- [Day 12](http://markheath.net/post/advent-of-code-2017-day-12)\n- [Day 13](http://markheath.net/post/advent-of-code-2017-day-13)\n- [Day 14](http://markheath.net/post/advent-of-code-2017-day-14)\n- [Day 15](http://markheath.net/post/advent-of-code-2017-day-15)\n- [Day 16](http://markheath.net/post/advent-of-code-2017-day-16)\n- [Day 17](http://markheath.net/post/advent-of-code-2017-day-17)\n- [Day 18](http://markheath.net/post/advent-of-code-2017-day-18)\n- [Day 19](http://markheath.net/post/advent-of-code-2017-day-19)\n- [Day 20](http://markheath.net/post/advent-of-code-2017-day-20)\n- [Day 21](http://markheath.net/post/advent-of-code-2017-day-21)\n- [Day 22](http://markheath.net/post/advent-of-code-2017-day-22)\n- [Day 23](http://markheath.net/post/advent-of-code-2017-day-23)\n- [Day 24](http://markheath.net/post/advent-of-code-2017-day-24)\n- [Day 25](http://markheath.net/post/advent-of-code-2017-day-25)\n"}, {"author": "stephjs", "repo": "stephjs/advent-of-code-2019", "language": "JavaScript", "language_all": {"JavaScript": 21237}, "readme_contents": "#  \ud83c\udf84 Advent of Code 2019\n##### solutions by me \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb [@_steph.js](https://www.instagram.com/_steph.js/)\n\n[Advent of Code](https://adventofcode.com/2019) is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.\n\n## It's Christmas themed leetcode!\n##### here's the first question:\n--- Day 1: The Tyranny of the Rocket Equation ---\nSanta has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.\n\nThe Elves quickly load you into a spacecraft and prepare to launch.\n\nAt the first Go / No Go poll, every Elf is Go until the Fuel Counter-Upper. They haven't determined the amount of fuel required yet.\n\nFuel required to launch a given module is based on its mass. Specifically, to find the fuel required for a module, take its mass, divide by three, round down, and subtract 2.\n\nFor example:\n\nFor a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.\nFor a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.\nFor a mass of 1969, the fuel required is 654.\nFor a mass of 100756, the fuel required is 33583.\nThe Fuel Counter-Upper needs to know the total fuel requirement. To find it, individually calculate the fuel needed for the mass of each module (your puzzle input), then add together all the fuel values.\n\nWhat is the sum of the fuel requirements for all of the modules on your spacecraft?\n\n##### see? you can totally do this!\n\n## My Solutions\n\nThis year I'm solving the puzzles with JavaScript. To run my code, clone the repo locally \n\n```bash\ngit clone https://github.com/stephjs/advent-of-code-2019.git\n```\n\nNavigate into the puzzles folder\n\n```bash\ncd advent-of-code-2019/puzzles\n```\n\n... and run the puzzle you are interested in\n\n```bash\nnode day1-part1\n```\n\n### Merry Christmas! \ud83c\udf84\ud83c\udf81 \ud83c\udf89"}, {"author": "ephemient", "repo": "ephemient/aoc2019", "language": null, "language_all": {}, "readme_contents": "# [Advent of Code 2019](https://adventofcode.com/2019)\n### my answers\n\nDevelopment occurs on language-specific branches:\n\n  - [Haskell](https://github.com/ephemient/aoc2019/tree/hs)\n  - [Kotlin](https://github.com/ephemient/aoc2019/tree/kt)\n  - [Python](https://github.com/ephemient/aoc2019/tree/py)\n  - [Rust](https://github.com/ephemient/aoc2019/tree/rs)\n"}, {"author": "Ullaakut", "repo": "Ullaakut/aoc19", "language": "Go", "language_all": {"Go": 46248, "Shell": 2346, "Makefile": 2070, "Awk": 616}, "readme_contents": "# Advent of Code 2019\n\nThis repository contains my solutions for the advent of code puzzles of year 2019. If you're looking for 2018, [here it is](https://github.com/Ullaakut/aoc18).\n\nThe improvement over last year is that this year, I'm adding a handy **Makefile** which does the following:\n\n* **Automatically downloads** the challenge and input for the day (e.g.: `make download DAY=03`)\n    * In order to use this target, you need to specify your session cookie from `adventofcode.com` in `AOC_COOKIE`.\n    * Parses the challenge into a markdown file (adds Markdown style headers and code blocks).\n    * This part still needs a bit of work, as multiline code blocks are not supported yet, and formatting (bold, italics etc.) is lost.\n* Automatically **generates a folder structure** to contain a program for each part of each day\n* Runs the solutions for each day that was currently implemented (`make run`)\n* Runs all unit tests (`make test`)\n* Is self-documented (`make help`)\n\nYou can reuse this Makefile for other years by specifying the `YEAR` variable in your environment. By default, it is going to use `2019`.\n\nHere is an example of how it looks (the output is normally not cut, but puzzle descriptions are too long to fit on an example screenshot). It takes about one second to download and parse the challenge, download the input, and create the folders and files for solving them. Feel free to change the template to fit your way of solving AOC puzzles, if you want to reuse this repository :)\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/make_download.png\" />\n</p>\n\n## Recap\n\nDay | Completed | Project | Challenge | Language | Tests\n----|--------------|---------|-------|---------|------\n01 | :white_check_mark: | [day01](day01) | [Advent of Code 2019 - Day 01](https://adventofcode.com/2019/day/1)  | Go | :white_check_mark:\n02 | :white_check_mark: | [day02](day02) | [Advent of Code 2019 - Day 02](https://adventofcode.com/2019/day/2)  | Go | :white_check_mark:\n03 | :white_check_mark: | [day03](day03) | [Advent of Code 2019 - Day 03](https://adventofcode.com/2019/day/3)  | Go | :white_check_mark:\n04 | :white_check_mark: | [day04](day04) | [Advent of Code 2019 - Day 04](https://adventofcode.com/2019/day/4)  | Go | :white_check_mark:\n05 | :white_check_mark: | [day05](day05) | [Advent of Code 2019 - Day 05](https://adventofcode.com/2019/day/5)  | Go | :white_check_mark:\n06 | :white_check_mark: | [day06](day06) | [Advent of Code 2019 - Day 06](https://adventofcode.com/2019/day/6)  | Go | :white_check_mark:\n07 | :soon: | [day07](day07) | [Advent of Code 2019 - Day 07](https://adventofcode.com/2019/day/7)  | Go | :soon:\n08 | :soon: | [day08](day08) | [Advent of Code 2019 - Day 08](https://adventofcode.com/2019/day/8)  | Go | :soon:\n09 | :soon: | [day09](day09) | [Advent of Code 2019 - Day 09](https://adventofcode.com/2019/day/9)  | Go | :soon:\n10 | :soon: | [day10](day10) | [Advent of Code 2019 - Day 10](https://adventofcode.com/2019/day/10) | Go | :soon:\n11 | :soon: | [day11](day11) | [Advent of Code 2019 - Day 11](https://adventofcode.com/2019/day/11) | Go | :soon:\n12 | :soon: | [day12](day12) | [Advent of Code 2019 - Day 12](https://adventofcode.com/2019/day/12) | Go | :soon:\n13 | :soon: | [day13](day13) | [Advent of Code 2019 - Day 13](https://adventofcode.com/2019/day/13) | Go | :soon:\n14 | :soon: | [day14](day14) | [Advent of Code 2019 - Day 14](https://adventofcode.com/2019/day/14) | Go | :soon:\n15 | :soon: | [day15](day15) | [Advent of Code 2019 - Day 15](https://adventofcode.com/2019/day/15) | Go | :soon:\n16 | :soon: | [day16](day16) | [Advent of Code 2019 - Day 16](https://adventofcode.com/2019/day/16) | Go | :soon:\n17 | :soon: | [day17](day17) | [Advent of Code 2019 - Day 17](https://adventofcode.com/2019/day/17) | Go | :soon:\n18 | :soon: | [day18](day18) | [Advent of Code 2019 - Day 18](https://adventofcode.com/2019/day/18) | Go | :soon:\n19 | :soon: | [day19](day19) | [Advent of Code 2019 - Day 19](https://adventofcode.com/2019/day/19) | Go | :soon:\n20 | :soon: | [day20](day20) | [Advent of Code 2019 - Day 20](https://adventofcode.com/2019/day/20) | Go | :soon:\n21 | :soon: | [day21](day21) | [Advent of Code 2019 - Day 21](https://adventofcode.com/2019/day/21) | Go | :soon:\n22 | :soon: | [day22](day22) | [Advent of Code 2019 - Day 22](https://adventofcode.com/2019/day/22) | Go | :soon:\n23 | :soon: | [day23](day23) | [Advent of Code 2019 - Day 23](https://adventofcode.com/2019/day/23) | Go | :soon:\n24 | :soon: | [day24](day24) | [Advent of Code 2019 - Day 24](https://adventofcode.com/2019/day/24) | Go | :soon:\n25 | :soon: | [day25](day25) | [Advent of Code 2019 - Day 25](https://adventofcode.com/2019/day/25) | Go | :soon:\n\n## Day 1\n\n### Part 1\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0101.png\">\n    <img width=\"65%\" src=\"img/0101_test.png\">\n</p>\n\n### Part 2\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0102.png\">\n    <img width=\"65%\" src=\"img/0102_test.png\">\n</p>\n\n## Day 2\n\n### Part 1\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0201.png\">\n    <img width=\"65%\" src=\"img/0201_test.png\">\n</p>\n\n### Part 2\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0202.png\">\n    <img width=\"65%\" src=\"img/0202_test.png\">\n</p>\n\n## Day 3\n\n### Part 1\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0301.png\">\n    <img width=\"65%\" src=\"img/0301_test.png\">\n</p>\n\n### Part 2\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0302.png\">\n    <img width=\"65%\" src=\"img/0302_test.png\">\n</p>\n\n## Day 4\n\n### Part 1\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0401.png\">\n    <img width=\"65%\" src=\"img/0401_test.png\">\n</p>\n\n### Part 2\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0402.png\">\n    <img width=\"65%\" src=\"img/0402_test.png\">\n</p>\n\n## Day 5\n\n### Part 1\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0501.png\">\n    <img width=\"65%\" src=\"img/0501_test.png\">\n</p>\n\n### Part 2\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0502.png\">\n    <img width=\"65%\" src=\"img/0502_test.png\">\n</p>\n\n## Day 6\n\n### Part 1\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0601.png\">\n    <img width=\"65%\" src=\"img/0601_test.png\">\n</p>\n\n### Part 2\n\n<p align=\"center\">\n    <img width=\"65%\" src=\"img/0602.png\">\n    <img width=\"65%\" src=\"img/0602_test.png\">\n</p>\n"}, {"author": "moesol", "repo": "moesol/pony-advent-2016", "language": "Pony", "language_all": {"Pony": 511139}, "readme_contents": "# pony-advent-2016\n\nAdvent of Code 2016 implemented in the Pony Language\n\nEach day a new coding challenge comes here:\n\nhttp://adventofcode.com/2016\n\n"}, {"author": "amochtar", "repo": "amochtar/aoc-ranking", "language": "JavaScript", "language_all": {"JavaScript": 107614, "HTML": 3842, "CSS": 568}, "readme_contents": "# Advent of Code private leaderboard ranking extension\n\nVisualize the ranking over time of an [Advent of Code](https://www.adventofcode.com/) private leaderboard.\n\nSee https://amochtar.github.io/aoc-ranking/ for an interactive example.\n\n![#Global Leaderboard Ranking](example/ranking.png \"Private Leaderboard Ranking Example\")\n\n\n## Installation\n\n* Firefox - https://addons.mozilla.org/en-US/firefox/addon/aoc-ranking/\n* Chrome - https://chrome.google.com/webstore/detail/advent-of-code-ranking/jbnlafikncgjjhdkmfhokcplgahebmjl\n\n\n## Building locally\n\nTo build the extension locally, run `npm install && npm run build`. This will generate an exploded version of the extension in the `dist/` folder.\n\nUse [`web-ext run`](https://github.com/mozilla/web-ext) from the `dist/` folder to run it locally in Firefox, or `web-ext build` to create a package.\n"}, {"author": "AlexAegis", "repo": "AlexAegis/advent-of-code", "language": "TypeScript", "language_all": {"TypeScript": 178903, "Rust": 68139, "Smarty": 4412}, "readme_contents": "# [Advent of Code](https://adventofcode.com/)\n\n[![Build Status](https://travis-ci.com/AlexAegis/advent-of-code.svg?branch=master)](https://travis-ci.com/AlexAegis/advent-of-code) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/3dbac1abe814499882d2ed419cbe8a55)](https://app.codacy.com/app/AlexAegis/advent-of-code?utm_source=github.com&utm_medium=referral&utm_content=AlexAegis/advent-of-code&utm_campaign=Badge_Grade_Dashboard) [![Maintainability](https://api.codeclimate.com/v1/badges/5df3d3d67dfe389dc929/maintainability)](https://codeclimate.com/github/AlexAegis/advent-of-code/maintainability) [![Test Coverage](https://api.codeclimate.com/v1/badges/5df3d3d67dfe389dc929/test_coverage)](https://codeclimate.com/github/AlexAegis/advent-of-code/test_coverage) [![codecov](https://img.shields.io/codecov/c/github/AlexAegis/advent-of-code.svg?label=node%20coverage)](https://codecov.io/gh/AlexAegis/advent-of-code) [![Coverage Status](https://img.shields.io/coveralls/github/AlexAegis/advent-of-code.svg?label=rust%20coverage)](https://coveralls.io/github/AlexAegis/advent-of-code?branch=master) [![snyk: vulnerabilities](https://img.shields.io/snyk/vulnerabilities/github/AlexAegis/advent-of-code.svg?style=popout)](https://app.snyk.io/org/alexaegis/project/82929b9b-f679-4b1c-8804-bff40110b7dd) [![Greenkeeper badge](https://badges.greenkeeper.io/AlexAegis/advent-of-code.svg)](https://greenkeeper.io/) [![Last Commit on GitHub](https://img.shields.io/github/last-commit/AlexAegis/advent-of-code.svg)](https://github.com/AlexAegis/advent-of-code) [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n[![2019 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2019.json)](./src/2019/) [![2018 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2018.json)](./src/2018/) [![2017 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2017.json)](./src/2017/) [![2016 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2016.json)](./src/2016/) [![2015 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2015.json)](./src/2015/)\n\n### [Leaderboards](https://adventofcode.com/2019/leaderboard/private/view/515399)\n\nJoin me on my private leaderboard! You can find my invitation code [here](./.aoc/leaderboard.md).\n\n## [2019](https://adventofcode.com/2017/)\n\n[![2019 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2019.json)](./src/2019/)\n\n| Day                         | Part One                                          |                                             | Part Two                                          |                                             |\n| --------------------------- | ------------------------------------------------- | ------------------------------------------- | ------------------------------------------------- | ------------------------------------------- |\n|                             | TypeScript                                        | Rust                                        | TypeScript                                        | Rust                                        |\n| [Day 1](./src/2019/day01/)  | [0.3ms](./src/2019/day01/typescript/part_one.ts)  | [1.6\u03bcs\\*](./src/2019/day01/rust/src/lib.rs) | [0.39ms](./src/2019/day01/typescript/part_two.ts) | [3.6\u03bcs\\*](./src/2019/day01/rust/src/lib.rs) |\n| [Day 2](./src/2019/day02/)  | [0.25ms](./src/2019/day02/typescript/part_one.ts) | [2.2\u03bcs\\*](./src/2019/day02/rust/src/lib.rs) | [11ms](./src/2019/day02/typescript/part_two.ts)   | [1ms\\*](./src/2019/day02/rust/src/lib.rs)   |\n| [Day 3](./src/2019/day03/)  | [154ms](./src/2019/day03/typescript/part_one.ts)  |                                             | [151ms](./src/2019/day03/typescript/part_two.ts)  |                                             |\n| [Day 4](./src/2019/day04/)  | [62ms](./src/2019/day04/typescript/part_one.ts)   |                                             | [77ms](./src/2019/day04/typescript/part_two.ts)   |                                             |\n| [Day 5](./src/2019/day05/)  | [1.2ms](./src/2019/day05/typescript/part_one.ts)  |                                             | [1.25ms](./src/2019/day05/typescript/part_two.ts) |                                             |\n| [Day 6](./src/2019/day06/)  | [526ms](./src/2019/day06/typescript/part_one.ts)  |                                             | [35ms](./src/2019/day06/typescript/part_two.ts)   |                                             |\n| [Day 7](./src/2019/day07/)  | [9.4ms](./src/2019/day07/typescript/part_one.ts)  |                                             | [13.5ms](./src/2019/day07/typescript/part_two.ts) |                                             |\n| [Day 8](./src/2019/day08/)  | [2.3ms](./src/2019/day08/typescript/part_one.ts)  |                                             | [3.26ms](./src/2019/day08/typescript/part_two.ts) |                                             |\n| [Day 9](./src/2019/day09/)  | [1.62ms](./src/2019/day09/typescript/part_one.ts) |                                             | [107ms](./src/2019/day09/typescript/part_two.ts)  |                                             |\n| [Day 10](./src/2019/day10/) | [61ms](./src/2019/day10/typescript/part_one.ts)   |                                             | [64ms](./src/2019/day10/typescript/part_two.ts)   |                                             |\n| [Day 11](./src/2019/day11/) | [44ms](./src/2019/day11/typescript/part_one.ts)   |                                             | [10ms](./src/2019/day11/typescript/part_two.ts)   |                                             |\n| Day 12                      |                                                   |                                             |                                                   |                                             |\n| Day 13                      |                                                   |                                             |                                                   |                                             |\n| Day 14                      |                                                   |                                             |                                                   |                                             |\n| Day 15                      |                                                   |                                             |                                                   |                                             |\n| Day 16                      |                                                   |                                             |                                                   |                                             |\n| Day 17                      |                                                   |                                             |                                                   |                                             |\n| Day 18                      |                                                   |                                             |                                                   |                                             |\n| Day 19                      |                                                   |                                             |                                                   |                                             |\n| Day 20                      |                                                   |                                             |                                                   |                                             |\n| Day 21                      |                                                   |                                             |                                                   |                                             |\n| Day 22                      |                                                   |                                             |                                                   |                                             |\n| Day 23                      |                                                   |                                             |                                                   |                                             |\n| Day 24                      |                                                   |                                             |                                                   |                                             |\n| Day 25                      |                                                   |                                             |                                                   |                                             |\n\n## [2018](https://adventofcode.com/2018/)\n\n[![2018 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2018.json)](./src/2018/)\n\n| Day                         | Part One                                                    |                                          | Part Two                                                 |                                            |\n| --------------------------- | ----------------------------------------------------------- | ---------------------------------------- | -------------------------------------------------------- | ------------------------------------------ |\n|                             | TypeScript                                                  | Rust                                     | TypeScript                                               | Rust                                       |\n| [Day 1](./src/2018/day01/)  | [0.9ms](./src/2018/day01/typescript/part_one.ts)            | [13\u03bcs](./src/2018/day01/rust/src/lib.rs) | [ 10ms ](./src/2018/day01/typescript/part_two.ts)        | [12.2\u03bcs](./src/2018/day01/rust/src/lib.rs) |\n| [Day 2](./src/2018/day02/)  | [9ms](./src/2018/day02/typescript/part_one.ts)              |                                          | [ 9.6ms ](./src/2018/day02/typescript/part_two.ts)       |                                            |\n| [Day 3](./src/2018/day03/)  | [265ms](./src/2018/day03/typescript/part_one.ts)            |                                          | [ 234ms ](./src/2018/day03/typescript/part_two.ts)       |                                            |\n| [Day 4](./src/2018/day04/)  | [6ms](./src/2018/day04/typescript/part_one.ts)              |                                          | [ 4ms ](./src/2018/day04/typescript/part_two.ts)         |                                            |\n| [Day 5](./src/2018/day05/)  | [15ms](./src/2018/day05/typescript/collapse.function.ts) \ud83c\udf1f |                                          | [ 326ms ](./src/2018/day05/typescript/part_two.ts)       |                                            |\n| [Day 6](./src/2018/day06/)  | [230ms](./src/2018/day06/typescript/part_one.ts)            |                                          | [ 46ms ](./src/2018/day06/typescript/part_two.ts)        |                                            |\n| [Day 7](./src/2018/day07/)  | [1ms](./src/2018/day07/typescript/part_one.ts)              |                                          | [ 24ms ](./src/2018/day07/typescript/part_two.ts)        |                                            |\n| [Day 8](./src/2018/day08/)  | [6ms](./src/2018/day08/typescript/model/node.class.ts) \ud83c\udf1f   |                                          | [ 6ms ](./src/2018/day08/typescript/model/node.class.ts) |                                            |\n| [Day 9](./src/2018/day09/)  | [9ms ](./src/2018/day09/typescript/part_one.ts)             |                                          | [ 274ms ](./src/2018/day09/typescript/part_two.ts)       |                                            |\n| [Day 10](./src/2018/day10/) | [305ms](./src/2018/day10/typescript/task.ts)                |                                          | [ 305ms ](./src/2018/day10/typescript/task.ts)           |                                            |\n| [Day 11](./src/2018/day11/) | [165ms](./src/2018/day11/typescript/part_one.ts)            |                                          | [ 63007ms ](./src/2018/day11/typescript/part_two.ts)     |                                            |\n| [Day 12](./src/2018/day12/) | [0.8ms](./src/2018/day12/typescript/part_one.ts)            |                                          | [ 11ms ](./src/2018/day12/typescript/part_two.ts)        |                                            |\n| [Day 13](./src/2018/day13/) | [17ms](./src/2018/day13/typescript/model/cart.class.ts)     |                                          | [ 51ms ](./src/2018/day13/typescript/part_two.ts)        |                                            |\n| [Day 14](./src/2018/day14/) | [9.6ms](./src/2018/day14/typescript/part_one.ts)            |                                          | [ 900ms ](./src/2018/day14/typescript/part_two.ts)       |                                            |\n| [Day 15](./src/2018/day15/) |                                                             |                                          |                                                          |                                            |\n| Day 16                      |                                                             |                                          |                                                          |                                            |\n| Day 17                      |                                                             |                                          |                                                          |                                            |\n| Day 18                      |                                                             |                                          |                                                          |                                            |\n| Day 19                      |                                                             |                                          |                                                          |                                            |\n| Day 20                      |                                                             |                                          |                                                          |                                            |\n| Day 21                      |                                                             |                                          |                                                          |                                            |\n| Day 22                      |                                                             |                                          |                                                          |                                            |\n| Day 23                      |                                                             |                                          |                                                          |                                            |\n| Day 24                      |                                                             |                                          |                                                          |                                            |\n| Day 25                      |                                                             |                                          |                                                          |                                            |\n\n## [2017](https://adventofcode.com/2017/)\n\n[![2017 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2017.json)](./src/2017/)\n\n| Day                        | Part One                                         |                                            | Part Two                                         |                                            |\n| -------------------------- | ------------------------------------------------ | ------------------------------------------ | ------------------------------------------------ | ------------------------------------------ |\n|                            | TypeScript                                       | Rust                                       | TypeScript                                       | Rust                                       |\n| [Day 1](./src/2017/day01/) | [0.9ms](./src/2017/day01/typescript/part_one.ts) | [51\u03bcs\\*](./src/2017/day01/rust/src/lib.rs) | [0.9ms](./src/2017/day01/typescript/part_two.ts) | [59\u03bcs\\*](./src/2017/day01/rust/src/lib.rs) |\n| Day 2                      |                                                  |                                            |                                                  |                                            |\n| Day 3                      |                                                  |                                            |                                                  |                                            |\n| Day 4                      |                                                  |                                            |                                                  |                                            |\n| Day 5                      |                                                  |                                            |                                                  |                                            |\n| Day 6                      |                                                  |                                            |                                                  |                                            |\n| Day 7                      |                                                  |                                            |                                                  |                                            |\n| Day 8                      |                                                  |                                            |                                                  |                                            |\n| Day 9                      |                                                  |                                            |                                                  |                                            |\n| Day 10                     |                                                  |                                            |                                                  |                                            |\n| Day 11                     |                                                  |                                            |                                                  |                                            |\n| Day 12                     |                                                  |                                            |                                                  |                                            |\n| Day 13                     |                                                  |                                            |                                                  |                                            |\n| Day 14                     |                                                  |                                            |                                                  |                                            |\n| Day 15                     |                                                  |                                            |                                                  |                                            |\n| Day 16                     |                                                  |                                            |                                                  |                                            |\n| Day 17                     |                                                  |                                            |                                                  |                                            |\n| Day 18                     |                                                  |                                            |                                                  |                                            |\n| Day 19                     |                                                  |                                            |                                                  |                                            |\n| Day 20                     |                                                  |                                            |                                                  |                                            |\n| Day 21                     |                                                  |                                            |                                                  |                                            |\n| Day 22                     |                                                  |                                            |                                                  |                                            |\n| Day 23                     |                                                  |                                            |                                                  |                                            |\n| Day 24                     |                                                  |                                            |                                                  |                                            |\n| Day 25                     |                                                  |                                            |                                                  |                                            |\n\n## [2016](https://adventofcode.com/2016/)\n\n[![2016 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2016.json)](./src/2016/)\n\n| Day                        | Part One                                          |      | Part Two                                          |      |\n| -------------------------- | ------------------------------------------------- | ---- | ------------------------------------------------- | ---- |\n|                            | TypeScript                                        | Rust | TypeScript                                        | Rust |\n| [Day 1](./src/2015/day01/) | [0.37ms](./src/2016/day01/typescript/part_one.ts) |      | [0.48ms](./src/2016/day01/typescript/part_two.ts) |      |\n| Day 2                      |                                                   |      |                                                   |      |\n| Day 3                      |                                                   |      |                                                   |      |\n| Day 4                      |                                                   |      |                                                   |      |\n| Day 5                      |                                                   |      |                                                   |      |\n| Day 6                      |                                                   |      |                                                   |      |\n| Day 7                      |                                                   |      |                                                   |      |\n| Day 8                      |                                                   |      |                                                   |      |\n| Day 9                      |                                                   |      |                                                   |      |\n| Day 10                     |                                                   |      |                                                   |      |\n| Day 11                     |                                                   |      |                                                   |      |\n| Day 12                     |                                                   |      |                                                   |      |\n| Day 13                     |                                                   |      |                                                   |      |\n| Day 14                     |                                                   |      |                                                   |      |\n| Day 15                     |                                                   |      |                                                   |      |\n| Day 16                     |                                                   |      |                                                   |      |\n| Day 17                     |                                                   |      |                                                   |      |\n| Day 18                     |                                                   |      |                                                   |      |\n| Day 19                     |                                                   |      |                                                   |      |\n| Day 20                     |                                                   |      |                                                   |      |\n| Day 21                     |                                                   |      |                                                   |      |\n| Day 22                     |                                                   |      |                                                   |      |\n| Day 23                     |                                                   |      |                                                   |      |\n| Day 24                     |                                                   |      |                                                   |      |\n| Day 25                     |                                                   |      |                                                   |      |\n\n## [2015](https://adventofcode.com/2015/)\n\n[![2015 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2015.json)](./src/2015/)\n\n| Day                        | Part One                                                     |                                             | Part Two                                                   |                                             |\n| -------------------------- | ------------------------------------------------------------ | ------------------------------------------- | ---------------------------------------------------------- | ------------------------------------------- |\n|                            | TypeScript                                                   | Rust                                        | TypeScript                                                 | Rust                                        |\n| [Day 1](./src/2015/day01/) | [0.5ms](./src/2015/day01/typescript/part_one.ts)             | [6.2\u03bcs\\*](./src/2015/day01/rust/src/lib.rs) | [1.2ms](./src/2015/day01/typescript/part_two.ts)           | [1.9\u03bcs\\*](./src/2015/day01/rust/src/lib.rs) |\n| [Day 2](./src/2015/day02/) | [2ms](./src/2015/day02/typescript/part_one.ts)               | [194\u03bcs\\*](./src/2015/day02/rust/src/lib.rs) | [2.4ms](./src/2015/day02/typescript/part_two.ts)           | [196\u03bcs\\*](./src/2015/day02/rust/src/lib.rs) |\n| [Day 3](./src/2015/day03/) | [2.6ms](./src/2015/day03/typescript/part_one.ts)             | [231\u03bcs\\*](./src/2015/day03/rust/src/lib.rs) | [2.8ms](./src/2015/day03/typescript/part_two.ts)           | [256\u03bcs\\*](./src/2015/day03/rust/src/lib.rs) |\n| [Day 4](./src/2015/day04/) | [663ms](./src/2015/day04/typescript/hash-search.function.ts) | [506ms](./src/2015/day04/rust/src/lib.rs)   | [19s](./src/2015/day04/typescript/hash-search.function.ts) | [14s](./src/2015/day04/rust/src/lib.rs)     |\n| [Day 5](./src/2015/day05/) | [13ms](./src/2015/day05/typescript/part_one.ts)              | [193\u03bcs](./src/2015/day05/rust/src/lib.rs)   | [21ms](./src/2015/day05/typescript/part_two.ts)            | [4ms](./src/2015/day05/rust/src/lib.rs)     |\n| Day 6                      |                                                              |                                             |                                                            |                                             |\n| Day 7                      |                                                              |                                             |                                                            |                                             |\n| Day 8                      |                                                              |                                             |                                                            |                                             |\n| Day 9                      |                                                              |                                             |                                                            |                                             |\n| Day 10                     |                                                              |                                             |                                                            |                                             |\n| Day 11                     |                                                              |                                             |                                                            |                                             |\n| Day 12                     |                                                              |                                             |                                                            |                                             |\n| Day 13                     |                                                              |                                             |                                                            |                                             |\n| Day 14                     |                                                              |                                             |                                                            |                                             |\n| Day 15                     |                                                              |                                             |                                                            |                                             |\n| Day 16                     |                                                              |                                             |                                                            |                                             |\n| Day 17                     |                                                              |                                             |                                                            |                                             |\n| Day 18                     |                                                              |                                             |                                                            |                                             |\n| Day 19                     |                                                              |                                             |                                                            |                                             |\n| Day 20                     |                                                              |                                             |                                                            |                                             |\n| Day 21                     |                                                              |                                             |                                                            |                                             |\n| Day 22                     |                                                              |                                             |                                                            |                                             |\n| Day 23                     |                                                              |                                             |                                                            |                                             |\n| Day 24                     |                                                              |                                             |                                                            |                                             |\n| Day 25                     |                                                              |                                             |                                                            |                                             |\n\n> \\* measured on 8700k@4.8Ghz\n\n> All benchmarks are calculated with input parsing. I plan to refactor my solutions so I can bench without it.\n\n---\n\n## TypeScript\n\n1. Install [Node.js](https://nodejs.org/en/)\n\n2. Open with [VS Code](https://code.visualstudio.com/)\n\n3. Install the suggested extensions when prompted (Recommended)\n\n4. Install the required packages\n\n   ```bash\n   npm i\n   ```\n\n   > Select `Current TS File` launch option. **F5** runs the file you're focusing in debug mode.\n\n### Testing\n\nThere are tests on every task. You can run them with\n\n```bash\nnpm test\n```\n\nWith coverage report\n\n```bash\nnpm run test:coverage\n```\n\nor if you installed the recommended mocha extension you can run them with that\n\n## Rust\n\n1. Install [Rust](https://www.rust-lang.org/tools/install)\n\n2. Open with [VS Code](https://code.visualstudio.com/)\n\n3. Install the suggested extensions when prompted (Recommended)\n\n4. Install the required crates\n\n   ```bash\n   cargo build\n   ```\n\n   > Select `Current Rust Cargo` launch option. **F5** runs the cargo you're focusing in debug mode.\n\n   > Set Rust to default to `nightly`\n\n   ```bash\n   rustup default nightly\n   ```\n\n### Running individual days\n\n```bash\ncargo run -p aoc201601\n```\n\n### Testing\n\nRun in the cargo you'd like to test\n\n```bash\ncargo test\n```\n\nOr in the workspace cargo if you'd like to run all tests\n\n```bash\ncargo test --all\n```\n\n### Benchmarking\n\nRun a specific days benchmark\n\n```bash\ncargo bench -p aoc201501\n```\n\nOr in the workspace cargo if you'd like to run all benchmarks (Takes a while!)\n\n```bash\ncargo bench --all\n```\n\n## Scaffolding\n\n```bash\ncargo run -p scaffold 2016 01\n```\n\n## Notes\n\n> All times are measured on i7-8700k@4.8Ghz\n\n> \ud83c\udf1f marks my favourites\n\n> If you have material-icon-theme installed copy the \"material-icon-theme.folders.associations\" and \"material-icon-theme.files.associations\" to your user settings to see the custom icons\n\n> Right now the **CodeClimate** and **Codecov** coverage reporters only report the _Node_ test coverage and the **Coverall** reporter only the _Rust_ results. This is because for _Node_ `nyc` generates `lcov` reports and `Tarpaulin` generates `cobertura.xml` type reports. Once either _Rust_ gets a native coverage reporter that will output `lcov` or `Tarpaulin` supports `lcov`, these two reports can't be merged.\n\n---\n\n## Technologies ([TypeScript](#TypeScript))\n\n### [Node 12](https://nodejs.org/en/)\n\n> **JavaScript** runtime\n\n### [NPM](https://www.npmjs.com/)\n\n> **Package manager** for Node\n\n### [TypeScript](https://www.typescriptlang.org/)\n\n> **Typed superset** of JavaScript\n\n### [RxJS](http://reactivex.io/)\n\n> **Reactive** programming with observable streams\n\n### [Mocha](https://mochajs.org/)\n\n> **Behaviour driven testing** framework\n\n### [Chai](https://www.chaijs.com/)\n\n> **Assertion** library\n\n### [Istanbul](https://istanbul.js.org/)\n\n> **Code coverage** tool\n\n## Technologies ([Rust](#Rust))\n\n### [Rust](https://www.rust-lang.org/)\n\n> **Systems** programmin language\n\n### [Criterion](https://github.com/bheisler/criterion.rs)\n\n> **Benchmarking** tool\n\n### [Clippy](https://github.com/rust-lang/rust-clippy)\n\n> **Linter** for rust\n\n## Recommendations\n\n### [Visual Studio Code](https://code.visualstudio.com/)\n\n> **IDE** for everything. [Settings](./.vscode/)\n\n### [Fira Code](https://github.com/tonsky/FiraCode)\n\n> **Font** with ligatures\n\n## Services\n\n### [Travis](https://travis-ci.com/)\n\n> **Continuous Integration** solution\n\n### [Codacy](https://codacy.com/)\n\n> **Code Quality** monitoring\n\n### [Code Climate](https://codeclimate.com/)\n\n> **Maintainability and Coverage** reports\n\n### [Snyk](https://snyk.io/)\n\n> **Vulnerability** detection\n\n### [Libraries.io](https://libraries.io/)\n\n> **Dependency** watcher\n\n### [Shields.io](https://shields.io/#/)\n\n> **Badges** to look cool\n"}, {"author": "bewuethr", "repo": "bewuethr/advent-of-code", "language": "Perl", "language_all": {"Perl": 138429, "Awk": 60552, "Shell": 59915, "Go": 24937}, "readme_contents": "# Advent of Code\n\nMy solutions to [Advent of Code](https://adventofcode.com).\n\nSee the [aoc-stats](https://github.com/bewuethr/aoc-stats) repo for a static\nsite generator with extended statistics.\n\n## 2015\n\nI started out with Bash, but added some Perl to the mix when Bash just took too\nlong.\n\nI tried sticking to pure Bash without too much reliance on command line tools\n(reason: definitely not performance), but whenever pure Bash really was too\nslow or cumbersome (day 10, second part for example), I gladly took the\nmultiple orders of improved performance.\n\n## 2016\n\nEverything in awk, with the odd solution in Perl or Bash and utilities such as\ngrep or `sort`.\n\nFor MD5 hashing, I used [this awk\nextension](http://git.codu.in/sup/gawk-extensions) written in C.\n\n## 2017\n\nPerl for speed, Go to learn.\n\nUploads are \"polished\", but the oldest commit per file is the honest version\nused to solve the puzzle.\n\n## 2018\n\nPerl. First commits per day are the honest truth, afterwards I clean up.\n\n## 2019\n\nI thought \"probably Go\", but ended up with Perl again for day 1.\n"}, {"author": "jwoLondon", "repo": "jwoLondon/adventOfCode", "language": "Elm", "language_all": {"Elm": 19422, "CSS": 818}, "readme_contents": "---\nid: litvis\n---\n\n@import \"./css/aoc.less\"\n\n# Literate Elm Solutions\n\nSolutions to the [Advent of Code](http://adventofcode.com) programming challenges using _literate Elm_.\nThese are created in the [litvis environment](https://github.com/gicentre/litvis) and although viewable as normal markdown, to compute the answers and format output, they are best viewed in Atom/VSCode with litvis installed.\n\n| Day | 2015                                                       | 2016                                                | 2017                                                        | 2018                                                     | 2019                                                   |\n| --: | :--------------------------------------------------------- | :-------------------------------------------------- | :---------------------------------------------------------- | :------------------------------------------------------- | ------------------------------------------------------ |\n|   1 | [Not Quite Lisp](2015/d01_2015.md)                         | [No Time for a Taxicab](2016/d01_2016.md)           | [Inverse Captcha](2017/d01_2017.md)                         | [Chronal Calibration](2018/d01_2018.md)                  | [The Tyranny of the Rocket Equation](2019/d01_2019.md) |\n|   2 | [I Was Told There Would Be No Math](2015/d02_2015.md)      | [Bathroom Security](2016/d02_2016.md)               | [Corruption Checksum](2017/d02_2017.md)                     | [Inventory Management System](2018/d02_2018.md)          | [1202 Program Alarm](2019/d02_2019.md)                 |\n|   3 | [Perfectly Spherical Houses in a Vacuum](2015/d03_2015.md) | [Squares With Three Sides](2016/d03_2016.md)        | [Spiral Memory](2017/d03_2017.md)                           | [No Matter How You Slice It](2018/d03_2018.md)           | [Crossed Wires](2019/d03_2019.md)                      |\n|   4 | [The Ideal Stocking Stuffer](2015/d04_2015.md)             | [Security Through Obscurity](2016/d04_2016.md)      | [High-Entropy Passphrases](2017/d04_2017.md)                | [Repose Record](2018/d04_2018.md)                        | [Secure Container](2019/d04_2019.md)                   |\n|   5 | [Doesn't He Have Intern-Elves For This?](2015/d05_2015.md) | [How About a Nice Game of Chess?](2016/d05_2016.md) | [A Maze of Twisty Trampolines, All Alike](2017/d05_2017.md) | [Alchemical Reduction](2018/d05_2018.md)                 | [Sunny with a Chance of Asteroids](2019/d05_2019.md)   |\n|   6 | [Probably a Fire Hazard](2015/d06_2015.md)                 | [Signals and Noise](2016/d06_2016.md)               | [Memory Reallocation](2017/d06_2017.md)                     | [Chronal Coordinates](2018/d06_2018.md)                  | [Universal Orbit Map](2019/d06_2019.md)                |\n|   7 | [Some Assembly Required](2015/d07_2015.md)                 | [Internet Protocol Version 7](2016/d07_2016.md)     | [Recursive Circus](2017/d07_2017.md)                        | [The Sum of Its Parts](2018/d07_2018.md)                 | [Amplification Circuit](2019/d07_2019.md)              |\n|   8 | [Matchsticks](2015/d08_2015.md)                            | [Two-Factor Authentication](2016/d08_2016.md)       | [I Heard You Like Registers](2017/d08_2017.md)              | [Memory Maneuver](2018/d08_2018.md)                      | [Space Image Format](2019/d08_2019.md)                 |\n|   9 | [All in a Single Night](2015/d09_2015.md)                  | x                                                   | [Stream Processing](2017/d09_2017.md)                       | [Marble Mania](2018/d09_2018.md)                         | [?](2019/d09_2019.md)                                  |\n|  10 | [Elves Look, Elves Say](2015/d10_2015.md)                  | x                                                   | [Knot Hash](2017/d10_2017.md)                               | [The Stars Align](2018/d10_2018.md)                      | [?](2019/d10_2019.md)                                  |\n|  11 | [Corporate Policy](2015/d11_2015.md)                       | x                                                   | [Hex Ed](2017/d11_2017.md)                                  | [Chronal Charge](2018/d11_2018.md)                       | [?](2019/d11_2019.md)                                  |\n|  12 | [JSAbacusFramework.io](2015/d12_2015.md)                   | x                                                   | x                                                           | [Subterranean Sustainability](2018/d12_2018.md)          | [?](2019/d12_2019.md)                                  |\n|  13 | [Knights of the Dinner Table](2015/d13_2015.md)            | x                                                   | x                                                           | [Mine Cart Madness](2018/d13_2018.md)                    | [?](2019/d13_2019.md)                                  |\n|  14 | [Reindeer Olympics](2015/d14_2015.md)                      | x                                                   | [Disk Defragmentation](2017/d14_2017.md)                    | [Chocolate Charts](2018/d14_2018.md)                     | [?](2019/d14_2019.md)                                  |\n|  15 | [Science for Hungry People](2015/d15_2015.md)              | x                                                   | x                                                           | [Beverage Bandits](2018/d15_2018.md)                     | [?](2019/d15_2019.md)                                  |\n|  16 | [Aunt Sue](2015/d16_2015.md)                               | x                                                   | x                                                           | [Chronal Classification](2018/d16_2018.md)               | [?](2019/d16_2019.md)                                  |\n|  17 | [No Such Thing as Too Much](2015/d17_2015.md)              | x                                                   | x                                                           | [Reservoir Research](2018/d17_2018.md)                   | [?](2019/d17_2019.md)                                  |\n|  18 | [Like a GIF For Your Yard](2015/d18_2015.md)               | x                                                   | x                                                           | [Settlers of The North Pole](2018/d18_2018.md)           | [?](2019/d18_2019.md)                                  |\n|  19 | [Medicine for Rudolph](2015/d19_2015.md)                   | x                                                   | x                                                           | [ Go With The Flow](2018/d19_2018.md)                    | [?](2019/d19_2019.md)                                  |\n|  20 | [Infinite Elves and Infinite Houses](2015/d20_2015.md)     | x                                                   | x                                                           | [ A Regular Map](2018/d20_2018.md)                       | [?](2019/d20_2019.md)                                  |\n|  21 | [RPG Simulator 20XX](2015/d21_2015.md)                     | x                                                   | x                                                           | [Chronal Conversion](2018/d21_2018.md)                   | [?](2019/d21_2019.md)                                  |\n|  22 | x                                                          | x                                                   | x                                                           | [Mode Maze](2018/d22_2018.md)                            | [?](2019/d22_2019.md)                                  |\n|  23 | [Opening the Turing Lock](2015/d23_2015.md)                | x                                                   | x                                                           | [Experimental Emergency Teleportation](2018/d23_2018.md) | [?](2019/d23_2019.md)                                  |\n|  24 | x                                                          | x                                                   | x                                                           | [Immune System Simulator 20XX](2018/d24_2018.md)         | [?](2019/d24_2019.md)                                  |\n|  25 | x                                                          | x                                                   | x                                                           | [Four-Dimensional Adventure](2018/d25_2018.md)           | [?](2019/d25_2019.md)                                  |\n\n---\n\n## Completion Times\n\nPuzzle difficulty as measured by time taken by the 100th person on the global leader board to complete each puzzle.\n\n<img src=\"images/completionTimes2019.png\" width=49% />\n\n<img src=\"images/completionTimes2018.png\" width=49% /> <img src=\"images/completionTimes2017.png\" width=49% />\n\n<img src=\"images/completionTimes2016.png\" width=49% /> <img src=\"images/completionTimes2015.png\" width=49% />\u02dc\n"}, {"author": "BartMassey", "repo": "BartMassey/advent-of-code-2016", "language": "Rust", "language_all": {"Rust": 132061, "TeX": 2905, "Python": 2456, "Shell": 1462, "Haskell": 1238}, "readme_contents": "# Advent Of Code 2016: Tutorial Solutions in Rust\nCopyright (c) 2016 Bart Massey\n\nHerein lie solutions to all of the problems of the 2016\n[Advent of Code](http://adventofcode.com). Advent of Code is\na fantastic exercise, and I thank the author and others\ninvolved profusely for their excellent work. Thanks also to\n`relsqui` for pointing me at this last year.\n\nThe solutions are in directories named `day01` through\n`day25`. For each solution, I have included commented and\ncleaned-up Rust code. There is a `README.md` in every\nproblem directory containing descriptions, comments and\nusage instructions. I have also included the problem\ndescriptions (`part1.md` and `part2.md`) and my specific\n`input.txt` for posterity.\n\nThere is also a `libaoc` directory containing a library used\nby all solutions. It includes a mishmash of AoC-specific\nstuff and generally-useful functionality. Please see the\n`libaoc` rustdoc for the details.\n\nThere is a talk in `rust-aoc.p.md` that says some things\nabout all this.\n\nThere are not many tests written for this code. I regard\npassing both parts of a day's problem as strong validation.\nBut more should be there.\n\nI assume you have Rust running on a fast-ish UNIX box with a\nbunch of memory (although most everything should also work\non other operating systems).  A few problems are dependent\non common extra packages from Cargo.\n\nThe goals of these solutions are to:\n\n* Provide canonical correct solutions with reasonable\n  runtimes.\n\n* Illustrate reasonable solution strategies.\n\n* Illustrate the use of Rust in problem-solving.\n\nI learned a ton of Rust and a little bit of software\nengineering I should already have known writing these.\n\nThere's also some engineering infrastructure in the form of\nthe `template` directory, the `mkday.sh` and\n`process-aoc.sh` shell scripts and the `libaoc` crate.  This\nsped up each day's setup considerably. At the beginning of\nday 34 I would \"`sh mkday.sh 34`\". At the end of the day I\nwould select and copy the page source of the day 34 AoC page\nand then\n\n    xclip -selection CLIPBOARD -out | sh ../process-aoc.sh\n\nto get markdown into the problem files for posterity.\n\nTo generate the full rustdoc for a day, simply run this\nhighly intuitive command:\n\n    cargo rustdoc --open -- --no-defaults --passes collapse-docs \\\n      --passes unindent-comments --passes strip-priv-imports\n\nSee Issue\n[1520](https://github.com/rust-lang/cargo/issues/1520)\nfor an explanation.\n\nThese solutions deserve a much more thorough top-level\ndescription than I have the energy to write at this point.\nI will revise this file in the indefinite future.\n\nThere is more refactoring that should be done. Specifically:\n\n* The `try_pat()` function of days 21 and 22 should be\n  pulled to `libaoc` and used in other parts as well.\n\nI have run everything through\n[Clippy](http://crates.io/crates/clippy) at this point, and\ntaken much of its advice. I have generally left idiomatic\nloops alone, as the iterator versions suggested by Clippy\nseem less clear to me. It was gratifying to see the last\nthree days' solutions pass Clippy without warning:\napparently I learned some Rust.\n\nI am a novice Rust programmer. Feedback and pull requests\nare extremely welcome! Let me know what I should have done,\nand I'll try to make it right.\n\n\n---\n\nThis work is licensed under the \"MIT License\".  Please see\nthe file `COPYING` in the source distribution of this software\nfor license terms.\n"}, {"author": "emiflake", "repo": "emiflake/Advent-of-Code-2019", "language": "Haskell", "language_all": {"Haskell": 78014, "Kotlin": 6054}, "readme_contents": "# Advent of Code 2019\nThis repo contains my solutions for Advent of Code 2019\n"}, {"author": "hellopatrick", "repo": "hellopatrick/advent", "language": "OCaml", "language_all": {"OCaml": 87258, "Standard ML": 1108}, "readme_contents": "Advents of Code."}, {"author": "mstksg", "repo": "mstksg/advent-of-code-api", "language": "Haskell", "language_all": {"Haskell": 50436}, "readme_contents": "[advent-of-code-api][]\n======================\n\n[![advent-of-code-api on Hackage](https://img.shields.io/hackage/v/advent-of-code-api.svg?maxAge=86400)](https://hackage.haskell.org/package/advent-of-code-api)\n[![Build Status](https://travis-ci.org/mstksg/advent-of-code-api.svg?branch=master)](https://travis-ci.org/mstksg/advent-of-code-api)\n\nHaskell bindings for Advent of Code REST API.  Caches and throttles requests\nautomatically, and parses responses into meaningful data types.\n\n[advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api\n\nSpecify your requests with `AoC` and `AoCOpts`, and run them with\n`runAoC`.\n\nExamples:\n\n```haskell\n-- Fetch prompts for day 5\nrunAoC myOpts $ AoCPrompt (mkDay_ 5)\n\n-- Fetch input for day 8\nrunAoC myOpts $ AoCInput (mkDay_ 8)\n\n-- Submit answer \"hello\" for Day 10, Part 1\nrunAoC myOpts $ AoCSubmit (mkDay_ 10) Part1 \"hello\"\n```\n\nPlease use responsibly.  All actions are rate-limited to a default of one\nrequest every three seconds, with ability to adjust up to as fast as a\nhard-coded limit of one request per second.\n\nThe neatly exported bindings (handling cookies/authentication, cacheing,\nthrottling) are in *Advent*.\n\nSession Keys\n------------\n\nSession keys are required for most commands, but if you enter a bogus key\nyou should be able to get at least Part 1 from `AoCPrompt`.  Session keys are\nalso not needed for daily and global leaderboards.\n\nThe session key can be found by logging in on a web client and checking\nthe cookies.  You can usually check these with in-browser developer\ntools.\n\nServant API\n-----------\n\nA Servant API (for integrating with *servant* for features like mock servers,\ndocumentation and low-level client methods) is also exported in *Advent.API*.\nThe Servant API also parses into meaningful types, but lacks management of\ncookies/auth, cacheing, and throttling.  Please use especially responsibly.\n\n"}, {"author": "Vzaa", "repo": "Vzaa/advent_of_code_2019", "language": "Rust", "language_all": {"Rust": 40858}, "readme_contents": "# AoC 2019 `.unwrap()` Everywhere Edition\n"}, {"author": "stranac", "repo": "stranac/Advent-of-Code", "language": "Python", "language_all": {"Python": 47131}, "readme_contents": "My solutions for http://adventofcode.com"}, {"author": "MitjaBezensek", "repo": "MitjaBezensek/advent-of-code", "language": "Elixir", "language_all": {"Elixir": 36672}, "readme_contents": "# Advent of Code 2017\n\nLearning Elixir and solving Advent of code 2017 puzzles.\n"}, {"author": "passsy", "repo": "passsy/kotlin-advent-of-code", "language": "Kotlin", "language_all": {"Kotlin": 276334}, "readme_contents": "# [Advent of Code](http://adventofcode.com/) solutions in Kotlin\n\n[Advent of Code](http://adventofcode.com/) is a series of small programming puzzles for a variety of skill levels. They are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code. Each puzzle calls upon different skills and has two parts that build on a theme.\n\nThis repository contains the (work in progress) solutions written in Kotlin by me ([@passsy](https://twitter.com/passsy)). I try to solve all days via TDD"}, {"author": "adriennetacke", "repo": "adriennetacke/advent-of-code-2019", "language": "JavaScript", "language_all": {"JavaScript": 41567}, "readme_contents": "# advent-of-code-2019\nAdvent of Code 2019 \ud83c\udf84 JavaScript Solutions by \n`@adriennetacke` \ud83d\ude0a\n[Blog](https://blog.adrienne.io/)\n|\n[Twitter](https://twitter.com/adriennetacke)\n|\n[Instagram](https://www.instagram.com/adriennetacke)\n\n[![Build Status](https://github.com/adriennetacke/advent-of-code-2019/workflows/build/badge.svg)](https://github.com/adriennetacke/advent-of-code-2019/actions)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n\n## What is Advent of Code?\n[Advent of Code](http://adventofcode.com) is an online event created by [Eric Wastl](https://twitter.com/ericwastl). Each year, starting on Dec 1st, an advent calendar of small programming puzzles are unlocked once a day at midnight (EST/UTC-5). Developers of all skill sets are encouraged to solve them in any programming language they choose!\n\n## Advent of Code 2019 Story\nSanta has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nThe Elves quickly load you into a spacecraft and prepare to launch.\n\n## Progress\n\n| Day  | Part One | Part Two | \n|---|:---:|:---:|\n| \u2714 [Day 1: The Tyranny of the Rocket Equation](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-1-tyranny-of-rocket-equation)| \ud83c\udf1f| \ud83c\udf1f|\n| \u2714 [Day 2: 1202 Program Alarm](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-2-program-alarm)| \ud83c\udf1f| \ud83c\udf1f|\n| \u2714 [Day 3: Crossed Wires](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-3-crossed-wires)| \ud83c\udf1f| \ud83c\udf1f|\n| \u2714 [Day 4: Secure Container](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-4-secure-container)| \ud83c\udf1f| \ud83c\udf1f|\n| \u2714  [Day 5: Crossed Wires](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-5-sunny-with-a-chance-of-asteroids)| \ud83c\udf1f| \ud83c\udf1f|\n| \u2714  [Day 6: Universal Orbit Map](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-6-universal-orbit-map)| \ud83c\udf1f| \ud83c\udf1f|\n| \u2714  [Day 7: Amplification Circuit](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-7-amplification-circuit)| \ud83c\udf1f| \ud83c\udf1f|\n| \u2714  [Day 8: Space Image Format](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-8-space-image-format)| \ud83c\udf1f| \ud83c\udf1f|\n\n## Running Tests\n\nEach day contains its own set of tests. To run them type `npm test`.\n\n\n"}, {"author": "kubukoz", "repo": "kubukoz/advent-of-code", "language": "Scala", "language_all": {"Scala": 350131, "Haskell": 2304}, "readme_contents": null}, {"author": "JEG2", "repo": "JEG2/advent_of_code_2016", "language": "Elixir", "language_all": {"Elixir": 64564}, "readme_contents": null}, {"author": "jennybc", "repo": "jennybc/2018_advent-of-code", "language": "R", "language_all": {"R": 17014, "C++": 343}, "readme_contents": null}, {"author": "themattchan", "repo": "themattchan/advent-of-code", "language": "Haskell", "language_all": {"Haskell": 85882, "C": 28678, "Python": 9499, "C++": 4555, "Scala": 4322, "JavaScript": 2854, "Nix": 2099, "AMPL": 982, "Shell": 565, "HTML": 440, "JSONiq": 140, "Makefile": 64}, "readme_contents": "# Advent of Code\n\npointless combinators\n"}, {"author": "phaazon", "repo": "phaazon/advent-of-code-2k18", "language": "Rust", "language_all": {"Rust": 27959, "Haskell": 19197}, "readme_contents": null}, {"author": "freskog", "repo": "freskog/adventofcode2019", "language": "Scala", "language_all": {"Scala": 67954}, "readme_contents": null}, {"author": "emmericp", "repo": "emmericp/aoc19-intcode-jit", "language": "Rust", "language_all": {"Rust": 13216}, "readme_contents": "# Advent of Code 2019 Intcode JIT\n\nYour Intcode is running too slow? Use this x86 JIT compiler!\n\n# Performance\n\nThe [included example](./fibonacci.intcode) calculates Fibonacci numbers mod signed 64 bit ints, run it like this.\n\n```bash\ncargo +nightly run --release -- fibonacci.intcode 1000\n```\n\n(Requires a Rust nightly build, install with `rustup install nightly`)\n\nIt's super-fast: Calculating the 100000000th Fibonacci number only takes 420 milliseconds on my laptop, that's 1.6 billion Intcode instructions per second!\n\nMy [Intcode interpreter](https://github.com/emmericp/advent-of-code-2019/blob/d2e79463161871e086b7ef34cd03623b149eea26/src/intcode.rs) written in Rust runs for 4.5 seconds on the same input, so this JIT is more than 10 times faster. \n\n\n# Limitations\n\nDon't run this on your production starship computer, because:\n\n* indirect jumps are NYI\n* self-modifying code is not supported\n* all instructions must be \"aligned\", i.e., you cannot jump into the middle of an instruction to interpret parameters as opcodes\n* trailing data that looks like instructions is not handled, e.g., don't end your code with 1 data because the compiler will try to compile that as an `ADD` and complain about missing operands\n"}, {"author": "lynn", "repo": "lynn/aoc-2019", "language": "Haskell", "language_all": {"Haskell": 15570, "Elm": 6334, "Go": 4895, "Clojure": 2473, "Ada": 1674, "Dart": 1457, "VBA": 1154, "CSS": 368}, "readme_contents": "# aoc-2019\nAdvent of Code 2019 solutions in 25 different languages!\n"}, {"author": "SickheadGames", "repo": "SickheadGames/AdventureKit", "language": "C#", "language_all": {"C#": 358478}, "readme_contents": "   ![TGB Adventure Kit](/documentation/banner.jpg)\n\n\nThis is the full source code and assets of the TGB Adventure Kit by [Sickhead Games](http://www.sickhead.com/).\n\n**The kit is still being ported to work with latest version of [Torque2D](https://github.com/GarageGames/Torque2D).**\n\n\n### Documentation and Help\n\nThe kit documentation can be found [in the GitHub wiki](https://github.com/SickheadGames/AdventureKit/wiki).\n\nFor further help and questions feel free to [post an issue on GitHub](https://github.com/SickheadGames/AdventureKit/issues).\n\n\n## Support Sickhead!\n\nIf you found this code/art or anything else we've done useful, please consider  \nsending us a tip.  It really does help pay for coffee, soda, pizza, and beers. :)\n\n\n  [ ![Tip Sickhead!](/documentation/tip.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=3X589QTLX434G)\n\n  \nThanks for your support!\n"}, {"author": "Sketch-sh", "repo": "Sketch-sh/advent-of-code-2018", "language": null, "language_all": {}, "readme_contents": "# advent-of-code-2018\nAdvent of Code 2018 solutions on Sketch\n\n[Advent of Code](https://adventofcode.com/) is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.\n\n[Sketch.sh](https://sketch.sh/) is a platform for sharing runnable ReasonML and OCaml completely in your browser. \n\nFor promoting Sketch.sh and ReasonML in general, I created this repository so everyone can add their solution and compare it with each others. \n\n[@fstiffo](https://sketch.sh/u/fstiffo) solved last year Advent of Code entirely on Sketch. And you can take inspiration from [his account](https://sketch.sh/u/fstiffo)\n\n\nPlease send a PR to update this README with your Sketch link.\n\n---\n\n# Day 1\n\n[Input](https://sketch.sh/s/waLhXOOdMXf8e0PMxWsyvp/)\n\n- [thangngoc89](https://sketch.sh/s/0WHyOv5Xl37Y0PDO9tlgWq/)\n- [michael-sb](https://sketch.sh/s/oTQ3KlYCYi3YpbYAMuQHJR/)\n\n# Day 2\n\n[Input](https://sketch.sh/s/j83Iab6iogw81frAAKHAsI/)\n\n- [thangngoc89](https://sketch.sh/s/BF0oLfAXgSywvO43pVAjB5/)\n- [michael-sb](https://sketch.sh/s/krS3mLl6w6l0dwmmbqs7hO/)\n\n# Day 3\n\n[Input](https://sketch.sh/s/ukKfWR053UCRDAJLK2GDSh/)\n\n- [thangngoc89](https://sketch.sh/s/NC5sRbc3lfBf60BKkt4YVb/)\n\n# Day 4\n\n# Day 5\n\n# Day 6\n\n# Day 7\n\n# Day 8\n\n# Day 9\n\n# Day 10\n"}, {"author": "staylorwr", "repo": "staylorwr/elixir_aoc", "language": "Elixir", "language_all": {"Elixir": 20585, "HTML": 856}, "readme_contents": "# Elixir Advent of Code Skeleton\n\nA simple starter app for Advent of Code.\n\nUsing a fork of this repo you can run:\n\n```elixir\nmix aoc.gen DAY [--year YEAR]\n```\n\nRunning `mix aoc.gen 1` (at the start of the 2018 advent of code) will:\n\n* Generate a new module based on the title of the problem at\n  `lib/aoc/year_2018/day_01/problem_title.ex`\n* *Roughly* parse the html description of the problem into `@moduledoc` markdown.\n* Use your session token to download your unique problem input into `priv`\n* Generate a test file ready to solve the examples and pull in the saved problem\n  input with tags (so slow running, complex days can be skipped later on).\n\n## Installation\n\n* Fork this repo\n* Grab your browser's session key from [Advent Of Code](https://adventofcode.com) and set\n  it as an environment variable. (Chrome Developer Tools > Application > Cookies > session)\n\n## Using this Skeleton\n\n* Run `mix aoc.gen 1` to generate your content for the first day\n* Read the new module's docs, solve the first part of the problem with TDD :smile:.\n* Run `mix aoc.gen 1` again to append the second part of the problem to your moduledocs.\n* Get all the stars.\n"}, {"author": "Unix-0x01", "repo": "Unix-0x01/AdventOfCode", "language": "Java", "language_all": {"Java": 11993}, "readme_contents": "### AdventOfCode\n# AdventOfCode\n``https://adventofcode.com``\n"}, {"author": "FlorianCassayre", "repo": "FlorianCassayre/AdventOfCode-2017", "language": "Scala", "language_all": {"Scala": 32237}, "readme_contents": "_My solutions to the 2017 edition of [Advent Of Code](https://adventofcode.com)._\n\n\n## Problems & Solutions\n\n* [Day 1](https://adventofcode.com/2017/day/1): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day01.scala)\n* [Day 2](https://adventofcode.com/2017/day/2): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day02.scala)\n* [Day 3](https://adventofcode.com/2017/day/3): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day03.scala)\n* [Day 4](https://adventofcode.com/2017/day/4): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day04.scala)\n* [Day 5](https://adventofcode.com/2017/day/5): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day05.scala)\n* [Day 6](https://adventofcode.com/2017/day/6): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day06.scala)\n* [Day 7](https://adventofcode.com/2017/day/7): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day07.scala)\n* [Day 8](https://adventofcode.com/2017/day/8): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day08.scala)\n* [Day 9](https://adventofcode.com/2017/day/9): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day09.scala)\n* [Day 10](https://adventofcode.com/2017/day/10): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day10.scala)\n* [Day 11](https://adventofcode.com/2017/day/11): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day11.scala)\n* [Day 12](https://adventofcode.com/2017/day/12): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day12.scala)\n* [Day 13](https://adventofcode.com/2017/day/13): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day13.scala)\n* [Day 14](https://adventofcode.com/2017/day/14): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day14.scala)\n* [Day 15](https://adventofcode.com/2017/day/15): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day15.scala)\n* [Day 16](https://adventofcode.com/2017/day/16): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day16.scala)\n* [Day 17](https://adventofcode.com/2017/day/17): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day17.scala)\n* [Day 18](https://adventofcode.com/2017/day/18): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day18.scala)\n* [Day 19](https://adventofcode.com/2017/day/19): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day19.scala)\n* [Day 20](https://adventofcode.com/2017/day/20): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day20.scala)\n* [Day 21](https://adventofcode.com/2017/day/21): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day21.scala)\n* [Day 22](https://adventofcode.com/2017/day/22): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day22.scala)\n* [Day 23](https://adventofcode.com/2017/day/23): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day23.scala)\n* [Day 24](https://adventofcode.com/2017/day/24): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day24.scala)\n* [Day 25](https://adventofcode.com/2017/day/25): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day25.scala)\n\n\n## Testing\n\nYou'll need Scala `2.12` and SBT `0.13`.\n\nFirst enter the sbt terminal:\n```\n> sbt\n```\n\nCompile the sources (make sure you're at the root directory of the repository):\n```\n> compile\n```\n\nTo run a solution - for instance `day 1`:\n```\n> run-main adventofcode.solutions.Day01\n```\n\nThe output will be printed to the console and stored to the corresponding file in `output/`.\n\n\n## License\n\nThis repository is licensed under the MIT License, please refer to the `LICENSE` file."}, {"author": "CloudCoders", "repo": "CloudCoders/AdventOfCode2017", "language": "Mathematica", "language_all": {"Mathematica": 37090, "Python": 36924, "Scala": 26540, "Kotlin": 24988, "Ruby": 5084, "Java": 4495, "JavaScript": 3440, "MATLAB": 3013}, "readme_contents": "# AdventOfCode2017\nA repository for talking about solutions for https://adventofcode.com/2017 challenge\n"}, {"author": "BartMassey", "repo": "BartMassey/advent-of-code-2015", "language": "Haskell", "language_all": {"Haskell": 85260, "Makefile": 2696, "Go": 1281, "Shell": 180}, "readme_contents": "# Advent Of Code 2015: Tutorial Solutions in Haskell\nCopyright (c) 2015 Bart Massey\n\nHerein lie solutions to all of the problems of the 2015\n[Advent of Code](http://adventofcode.com). Advent of Code\nwas a fantastic exercise, and I thank the author and others\ninvolved profusely for their excellent work. Thanks also to\n`relsqui` for pointing me at this on about Day 9. I had some\ncatching up to do.\n\nFor each solution, I have included commented and cleaned-up\nHaskell code. The solution file will always be `soln.hs`,\nand the `Makefile` will compile it to `soln` using\n[GHC](http://www.haskell.org/ghc/).  There is a `README.md`\nin every problem directory containing descriptions and\ncomments. I have also included the problem descriptions\n(`problem-a.md` and `problem-b.md`) and my specific\n`input.txt` for posterity.\n\nI assume you have GHC running on a fast-ish UNIX box with a\nbunch of memory (although most everything should also work\non other operating systems).  For a few problems you will\nalso need to install extra packages from\n[Hackage](http://hackage.haskell.org). The easiest way to do\nthat is with\n[`cabal`](https://wiki.haskell.org/Cabal-Install) AKA\n`cabal-install`, so you will want to learn how to operate\nthat.\n\nThe goals of these solutions are to:\n\n* Provide canonical correct solutions with reasonable\n  runtimes.\n\n* Illustrate reasonable solution strategies.\n\n* Illustrate the use of Haskell in problem-solving,\n  including some \"advanced\" techniques that aren't really\n  advanced and should be part of every Haskell programmer's\n  repertoire.\n\nI learned a ton of Haskell and a little bit of software\nengineering I should already have known writing these.\n\nThese solutions deserve a much more thorough top-level\ndescription than I have the energy to write at this point.\nI will revise this file in the indefinite future.\n\nI am under no illusions that I am a superior Haskell\nprogrammer.  Indeed, I suspect certain members of the\nHaskell community will be more amused than impressed by my\nfairly straightforward solutions. Feedback and pull requests\nare extremely welcome! Let me know what I should have done,\nand I'll try to make it right.\n\nThis work is licensed under the \"MIT License\".  Please see\nthe file `COPYING` in the source distribution of this software\nfor license terms.\n\n"}, {"author": "AlexeSimon", "repo": "AlexeSimon/adventofcode", "language": "HTML", "language_all": {"HTML": 110354, "Python": 55453}, "readme_contents": "# adventofcode\n\nThis repo contains my personnal answers to all of the problems proposed by [AdventOfCode](https://adventofcode.com/).\nMost of it is missing and will be added as I complete them. You can check the commits or the list below to know which has been completed. I also propose to viewers to use init.py to copy this repo hierarchy and get down to coding themselves.\n\n## Copying the template\n\nYou can use init.py if you want to copy this repo template and answer the problems by yourself. \nIts functionnalities include making directories, downloading statements, downloading inputs, making code templates and making url links.\n\n### Prerequisites\n\nYou need python 3 and its module \"requests\" installed.\nTo install the module requests, use \n```shell\npip install requests\n```\n### Running init.py\nTo run init.py, follow these steps:\n* Create a new folder.\n* Download init.py and put it into the folder.\n* Open init.py in a text editor and put your session into **USER_SESSION_ID** (see below).\n* Change other user parameters in the init.py as desired (see below).\n* Change the date of the last advent of code year and day if needed.\n* Run init.py from within the folder with\n```shell\npython init.py\n```\n### Users Parameters\nThe init.py parameters come as follow:\n```python\n# USER SPECIFIC PARAMETERS\nbase_pos = \"./\"            # Folders will be created here. If you want to make a parent folder, change this to ex \"./adventofcode/\"\nUSER_SESSION_ID = \"\"       # Get your session by inspecting the session cookie content in your web browser while connected to adventofcode and paste it here as plain text in between the \". Leave at is to not download inputs.\nDOWNLOAD_STATEMENTS = True # Set to false to not download statements. Note that only part one is downloaded (since you need to complete it to access part two)\nDOWNLOAD_INPUTS = True     # Set to false to not download inputs. Note that if the USER_SESSION_ID is wrong or left empty, inputs will not be downloaded.\nMAKE_CODE_TEMPLATE = True  # Set to false to not make code templates. Note that even if OVERWRITE is set to True, it will never overwrite codes.\nMAKE_URL = True            # Set to false to not create a direct url link in the folder.\nauthor = \"\"                # Name automatically put in the code templates.\nOVERWRITE = False          # If you really need to download the whole thing again, set this to true. As the creator said, AoC is fragile; please be gentle. Statements and Inputs do not change. This will not overwrite codes.\n\n# DATE SPECIFIC PARAMETERS\ndate = \"December 2018\"              # Date automatically put in the code templates.\nstarting_advent_of_code_year = 2017 # You can go as early as 2015.\nlast_advent_of_code_year = 2018     # The setup will download all advent of code data up until that date included\nlast_advent_of_code_day = 6         # If the year isn't finished, the setup will download days up until that day included for the last year\n```\nThe only important parameter is **USER_SESSION_ID**, which has to be set correctly for the script to download your personnal problems input.\nTo recover your session:\n* Go to [AdventOfCode](https://adventofcode.com/).\n* Log in by any means (GitHub, Google, ...).\n* Check for a cookie named **session**. This step depends on the browser used. It can be done through network inspection or, in advanced browser like Chrome, by simply clicking on the **View site information** button directly left of the url (shown as a padlock), then clicking **Cookies**.\n* Copy this cookie content and paste it in init.py in between the \". It might be automatically formated upon being copied and look different, do not worry.\nOther parameters are self explanatory.\n\n## Running this repo code\nSimply download the wanted solution folders.\nScript can be run from a parent directory:\n```shell\npython 2018/2/code.py\n```\nOr set current directory to wanted solution folder:\n```shell\ncd 2018/2\npython code.py\n```\nPlease do not rename the *code.py* nor the *input.txt* files, as both their names are hardcoded in the solutions.\n\n## Advent of code problems solved\n* 2015\n    * /\n* 2016\n    * /\n* 2017\n    * Days 1 - 17\n\t* Day 19\n* 2018\n    * Days 1 - 8\n\n## Contributing\nAny constructive pull request directly correcting errors or improving the code is welcomed.\n"}, {"author": "S0Ulle33", "repo": "S0Ulle33/Advent-of-Code-2018", "language": "Python", "language_all": {"Python": 32472}, "readme_contents": "# My solutions to the Advent of Code 2018\n\nSo, I decided to participate in [AOC 2018](https://adventofcode.com/2018). My main priorities in solving the task of the day:\n* **Do not use third-party modules**\n* **Simplicity**\n* **Readability** _(e.g., do not write one-liners)_\n\n## Usage\n\nIt's pretty simple, although so far without the extra features.\n```shell\ngit clone https://github.com/S0Ulle33/Advent-of-Code-2018.git\ncd Advent-of-Code-2018\n```\n* `python run_all.py` \u2014 run all solutions.\n* `python solution.py` \u2014 or run individually from `Day n/` folder.\n\n# \ud83c\udf93 License\n\n[![License: Unlicense](https://img.shields.io/badge/license-Unlicense-blue.svg)](http://unlicense.org/)\n"}, {"author": "xSke", "repo": "xSke/aoc15", "language": "Rust", "language_all": {"Rust": 59699}, "readme_contents": null}, {"author": "bildzeitung", "repo": "bildzeitung/2016adventofcode", "language": "Python", "language_all": {"Python": 28248, "C": 2750}, "readme_contents": "# 2016 Advent of Code\nRepo with solutions for the [Advent of Code][aoc], 2016 edition.\n\n[aoc]:http://adventofcode.com/2016\n"}, {"author": "yamnikov-oleg", "repo": "yamnikov-oleg/adventofcode2017", "language": "Java", "language_all": {"Java": 18879, "Pony": 10762, "Elixir": 7348, "Kotlin": 7322, "Vala": 6220, "Scala": 6087, "Dart": 6082, "TypeScript": 5732, "C++": 5586, "Idris": 5174, "Haskell": 4886, "Ruby": 4752, "C#": 4393, "C": 3964, "D": 3181, "OCaml": 2866, "Lua": 2847, "JavaScript": 2839, "Rust": 2649, "F#": 2374, "Nim": 2128, "Crystal": 2034, "Go": 1533, "Pascal": 1468, "Python": 1037, "Makefile": 60}, "readme_contents": "# Advent of Code 2017\n\nSolving [Advent of Code 2017](https://adventofcode.com/2017) in a different language every day using only standard library.\n\n|Day|Language|\n|---|---|\n|[Day 1 - Inverse Captcha](Day%201%20-%20Inverse%20Captcha)|Python|\n|[Day 2 - Corruption Checksum](Day%202%20-%20Corruption%20Checksum)|JavaScript|\n|[Day 3 - Spiral Memory](Day%203%20-%20Spiral%20Memory)|Haskell|\n|[Day 4 - High-Entropy Passphrases](Day%204%20-%20High-Entropy%20Passphrases)|Go|\n|[Day 5 - A Maze of Twisty Trampolines, All Alike](Day%205%20-%20A%20Maze%20of%20Twisty%20Trampolines%2C%20All%20Alike)|Rust|\n|[Day 6 - Memory Reallocation](Day%206%20-%20Memory%20Reallocation)|C#|\n|[Day 7 - Recursive Circus](Day%207%20-%20Recursive%20Circus)|Kotlin|\n|[Day 8 - I Heard You Like Registers](Day%208%20-%20I%20Heard%20You%20Like%20Registers)|C++|\n|[Day 9 - Stream Processing](Day%209%20-%20Stream%20Processing)|Pascal|\n|[Day 10 - Knot Hash](Day%2010%20-%20Knot%20Hash)|Idris|\n|[Day 11 - Hex Ed](Day%2011%20-%20Hex%20Ed)|C|\n|[Day 12 - Digital Plumber](Day%2012%20-%20Digital%20Plumber)|Lua|\n|[Day 13 - Packet Scanners](Day%2013%20-%20Packet%20Scanners)|F#|\n|[Day 14 - Disk Defragmentation](Day%2014%20-%20Disk%20Defragmentation)|TypeScript|\n|[Day 15 - Dueling Generators](Day%2015%20-%20Dueling%20Generators)|D|\n|[Day 16 - Permutation Promenade](Day%2016%20-%20Permutation%20Promenade)|Scala|\n|[Day 17 - Spinlock](Day%2017%20-%20Spinlock)|Nim|\n|[Day 18 - Duet](Day%2018%20-%20Duet)|Java|\n|[Day 19 - A Series of Tubes](Day%2019%20-%20A%20Series%20of%20Tubes)|OCaml|\n|[Day 20 - Particle Swarm](Day%2020%20-%20Particle%20Swarm)|Ruby|\n|[Day 21 - Fractal Art](Day%2021%20-%20Fractal%20Art)|Pony|\n|[Day 22 - Sporifica Virus](Day%2022%20-%20Sporifica%20Virus)|Elixir|\n|[Day 23 - Coprocessor Conflagration](Day%2023%20-%20Coprocessor%20Conflagration)|Dart|\n|[Day 24 - Electromagnetic Moat](Day%2024%20-%20Electromagnetic%20Moat)|Crystal|\n|[Day 25 - The Halting Problem](Day%2025%20-%20The%20Halting%20Problem)|Vala|\n"}, {"author": "rolandtritsch", "repo": "rolandtritsch/scala-aoc-2017", "language": "Scala", "language_all": {"Scala": 187990, "Shell": 798}, "readme_contents": "![Build Status](https://travis-ci.org/rolandtritsch/scala-aoc-2017.svg?branch=master) [![GitHub issues](https://img.shields.io/github/issues/rolandtritsch/scala-aoc-2017.svg)](https://github.com/rolandtritsch/scala-aoc-2017/issues)\n\n# [Advent of Code](https://adventofcode.com) - 2017 (Scala Edition)\n\nNote: There are implementations of this in [Scala](https://github.com/rolandtritsch/scala-aoc-2017) (JVM and native), [Kotlin](https://github.com/rolandtritsch/kotlin-aoc-2017), [Haskell](https://github.com/rolandtritsch/haskell-aoc-2017) and [Eta](https://github.com/rolandtritsch/eta-aoc-2017). If you like any of these ... star it :).\n\nThis is a JVM/Native crossproject. To make this work you need to ...\n\n* install git (`brew install git`)\n* install sbt (`brew install sbt`)\n* clone the repo (`git clone ...`)\n* run the tests (`sbt aocJVM/test`)\n  * this will run all tests (ScalaTest, ScalaCheck, ScalaMeter) and this might take a while (60 - 90 mins)\n  * you can run specific tests with `sbt \"aocJVM/testOnly aoc.Day01Spec\"`\n  * you can run `sbt \"aocJVM/testOnly aoc.Day*Spec -- -l aoc.SlowTest\"` to only run the *fast* tests (exclude the slow tests)\n  * you can run `sbt \"aocJVM/testOnly aoc.Day*Spec -- -n aoc.SolutionTest\"` to only run the tests that will test for the correct solutions\n* run the JVM main (`sbt aocJVM/run`)\n* run the Native main (`sbt aocNative/run`)\n* generate the [doc](http://www.tritsch.org/scala-aoc-2017) (`sbt doc`) and look at it (`open target/scala-2.10/api/index.html`)\n\nNote: To [make Scala Native work](http://www.scala-native.org/en/latest/user/setup.html) you probably need to install a couple more packages.\n\nHave fun!!!\n\n## Benchmark\n\nI also [benchmarked](https://docs.google.com/spreadsheets/d/1kHugZ-8mJczlmQRcda23YGvAgeqlJLt1I7cYlDD3Tws/edit?usp=sharing) the solutions [against each other](https://github.com/rolandtritsch/scala-aoc-2017/tree/master/results) (Scala, Native, Kotlin, Haskell, Eta).\n\n![Benchmark](https://www.dropbox.com/s/5sfnqgl9u57kekp/benchmark.png?dl=0&raw=1)\n"}, {"author": "dmjio", "repo": "dmjio/aoc2017", "language": "Haskell", "language_all": {"Haskell": 12964}, "readme_contents": "advent of code\n======================\n\n"}, {"author": "benediktwerner", "repo": "benediktwerner/intcode", "language": "Rust", "language_all": {"Rust": 65432}, "readme_contents": "# Intcode compiler, assembler and VM\n\nCompiler, assembler and VM for the [intcode computer](https://adventofcode.com/2019/day/9)\nfrom Advent of Code 2019. This is mainly for fun and to try out some different Rust parsing\nlibraries.\n\nThere are four crates in this project:\n\n- `intcode`: Wrapper binary for executing the compiler, assembler or VM\n- `vm`: An intcode VM that can run intcode files: `intcode run input.int`\n- `asm`: An intcode assembler that can assemble intcode programs from intcode assembly: `intcode asm input.asm`\n- `compiler`: An intcode compiler that can compile intcode programs from a higher-level language: `intcode compile input.asm`\n\n## Building and Installing\n\nBuilding or installing requires a working [Rust Installation](https://www.rust-lang.org/).\n\n```\n$ cargo install --path intcode\n$ intcode\n```\n\nTo build from source:\n\n```\n$ git clone https://github.com/benediktwerner/intcode\n$ cd intcode\n$ cargo build\n$ ./target/debug/intcode\n```\n\n## Compiler\n\nThe compiler can compile code written in a simple high-level language to intcode:\n\n```\n// Comment\n\nvar x;              // Variables must be declared before their first use. Globals are initialized to zero.\nvar y = 13;         // but they can also be declared on the first assignment\n\nvar z = input();    // Get input\nprint(y);           // Produce output\n\nfunc fib(x) {       // Arguments and variables declared in functions are seperate for each call\n    y = 42;         // Modify a global variabl\n    if x < 2 {\n        return 1;\n    }\n    return fib(x - 1) * x;  // Recursion is possible\n}\n\nprint(fib(z));\nprint(x);           // Still zero because the function has its own scope\nprint(y);           // Changed to 42\n\nconst LENGTH = 6 * 7;   // Constants are computed at compile time\n\narray a[LENGTH];        // Declare a new array with the given length. Only constant expressions can be used to specify the length\n\nvar index = 0;\nwhile index < LENGTH {\n    a[index] = fib(index);\n}\n\nprint(a[LENGTH - 1]);\n```\n\nAn extension for syntax highlighting in Visual Studio Code can be found in [`vscode-syntax-highlighting`](vscode-syntax-highlighting).\nIt works if the file has the `.ic` extension.\n\n## Assembler\n\n### Example\n\nThis program computes Day 1 Part 1 in intcode:\n\n```\n# Comments start with '#'\nstart:                  # Label for jump\n    in x                # Read to memory location x. The assembler automatically 'allocates' this memory after the program.\n    eq x 0 tmp          # Check if input == 0. If yes, stop and print the result.\n    jmp_true tmp :end   # Label targets must be prefixed with a ':' (to get the address instead of the value)\n    div x 3 x\n    sub x 2 x\n    add total x total\n    jmp :start\n\nend:\n    out total\n    hlt\n\n# Initialize 'total' to 0. The assembler does this automatically so\n# this isn't really neccessary, but it shows the concept.\ntotal: data 0\n```\n\nMore examples can be found in the `examples` directory.\n\n### Instructions\n\n|        Operation         |                   Effect                   |                          Note                           |\n| :----------------------: | :----------------------------------------: | :-----------------------------------------------------: |\n|      `mov a target`      |                `target = a`                |                                                         |\n|     `add a b target`     |              `target = a + b`              |                                                         |\n|     `sub a b target`     |              `target = a - b`              |                                                         |\n|     `mul a b target`     |              `target = a * b`              |                                                         |\n|     `div a b target`     |             `target = a // b`              | Can be quite slow, only works for positive numbers atm. |\n|     `mod a b target`     |              `target = a % b`              | Can be quite slow, only works for positive numbers atm  |\n| `divmod a b target rest` |       `target, rest = divmod(a, b)`        | Can be quite slow, only works for positive numbers atm  |\n|       `in target`        |             `target = input()`             |                                                         |\n|         `out a`          |                 `print(a)`                 |                                                         |\n|       `jmp target`       |               `goto target`                |                                                         |\n|      `jnz a target`      |          `if a != 0: goto target`          |                     Alias: `jtrue`                      |\n|      `jz a target`       |          `if a == 0: goto target`          |                     Alias: `jfalse`                     |\n|     `eq a b target`      |             `target = a == b`              |                                                         |\n|     `neq a b target`     |             `target = a != b`              |                                                         |\n|     `lt a b target`      |              `target = a < b`              |                                                         |\n|     `leq a b target`     |             `target = a <= b`              |                                                         |\n|     `gt a b target`      |              `target = a > b`              |                                                         |\n|     `geq a b target`     |             `target = a >= b`              |                                                         |\n|     `and a b target`     |             `target = a and b`             |                                                         |\n|     `or a b target`      |             `target = a and b`             |                                                         |\n|      `not a target`      |              `target = not a`              |                                                         |\n|     `add_rel_base a`     |              `rel_base += a`               |                                                         |\n|     `load a target`      |            `target = memory[a]`            |                                                         |\n|     `store a target`     |            `memory[target] = a`            |                                                         |\n|          `hlt`           |                  `exit()`                  |                      Alias: `halt`                      |\n|         `data x`         |           stores `x` as raw data           |    Accepts multiple arguments, e.g. `data 1 5 13 42`    |\n|     `array val len`      |    stores `val` `len` times as raw data    |    Accepts multiple arguments, e.g. `data 1 5 13 42`    |\n|        `push val`        |  `memory[rel_base] = val; rel_base += 1`   |                                                         |\n|       `pop target`       | `rel_base -= 1; target = memory[rel_base]` |                                                         |\n|      `call target`       |                 `push(ip)`                 |                                                         |\n|          `ret`           |               `goto pop(ip)`               |                                                         |\n\nThe predifined label `__end` can be used to get the address after all the generated code.\nThis is useful for putting a stack after the program: `add_rel_base :__end`. Simply putting\na label at the end of the program will not work if the program contains\nundeclared labels/variables because they will be put after the program.\n\n### Parameter types\n\n- Identifier positional: `some_name`\n- Identifier immediate: `:some_name`\n- Identifier relative: `%some_name`\n- Value positional: `[42]`\n- Value immediate: `42`\n- Value relative: `%42`\n"}, {"author": "derNiklaas", "repo": "derNiklaas/Advent-of-Code-2019", "language": "Java", "language_all": {"Java": 172674, "JavaScript": 3325}, "readme_contents": "# Advent of Code 2019\n[![About](https://img.shields.io/badge/Advent%20of%20Code-2019-brightgreen)](https://adventofcode.com/2019/about)\n[![Language](https://img.shields.io/badge/Language-Java-orange)](https://www.java.com/)\n[![Language](https://img.shields.io/badge/Language-JavaScript/NodeJS-orange)](https://nodejs.org/en/)\n[![Days completed](https://img.shields.io/badge/Days%20completed-11-red)](https://github.com/derNiklaas/Advent-of-Code-2019/tree/master/src/de/derniklaas/adventofcode)\n![Days completed](https://img.shields.io/badge/Stars-22-yellow)\n\n### Check out other solutions\n+ Hax's [advent-of-code](https://github.com/Schlauer-Hax/advent-of-code)\n+ Trojaner's [AdventofCode](https://github.com/TrojanerHD/AdventofCode)\n+ networkException's [AdventOfCode](https://github.com/dejakobniklas/AdventOfCode)\n+ LeMoonStar's [AdventOfCode2019Solutions](https://github.com/LeMoonStar/AdventOfCode2019Solutions)\n+ DCDragonCoder's [AdventOfCode2019](https://github.com/DragonCoder01/AdventOfCode2019)\n+ joblo2213's [AdventOfCode2019](https://github.com/joblo2213/AdventOfCode2019)\n+ FeldiM's [AdventOfCode19](https://github.com/feldim2425/AdventOfCode19)\n+ derkalaender's [AdventOfCode](https://github.com/derkalaender/AdventOfCode)\n+ Daan Breur's [AdventOfCode2019](https://github.com/daanbreur/AdventOfCode2019)\n+ 1Turtle's [AdventOfCode-for-Computercraft](https://github.com/1Turtle/AdventOfCode-for-Computercraft)\n"}, {"author": "dainnilsson", "repo": "dainnilsson/adventofcode-2017", "language": "Python", "language_all": {"Python": 13441, "Shell": 146}, "readme_contents": "# Advent of Code 2017\nSolutions for Advent of Code 2017 (http://adventofcode.com/2017) in Python 3.\nSolutions are for the most part optimized for brevity, at the cost of readability (for funsies).\n\n\n## Requirements\nPython 3\n\n## Instructions\nEach day's puzzle solution lives in a file named dayX.py, with its associated input in inputX.txt.\nA solution expects its input to be given on stdin, for example:\n\n  $ cat input1.txt | ./day1.py\n\nTo run through all solution using the inputX.txt files, run:\n\n  $ ./run.sh\n"}, {"author": "KrzaQ", "repo": "KrzaQ/AdventOfCode2019", "language": "Ruby", "language_all": {"Ruby": 14819, "HTML": 993}, "readme_contents": "[Advent of Code 2019](https://adventofcode.com) solutions by [KrzaQ][kq]\n========================\n\nI'm using various languages to provide solutions.\n\n| Day | Name | Ruby |\n|:---:|:---|:---:|\n| 01 | [The Tyranny of the Rocket Equation][day01] | [:heavy_check_mark:](solutions/day01/main.rb) |\n| 02 | [1202 Program Alarm][day02] | [:heavy_check_mark:](solutions/day02/main.rb) |\n| 03 | [Crossed Wires][day03] | [:heavy_check_mark:](solutions/day03/main.rb) |\n| 04 | [Secure Container][day04] | [:heavy_check_mark:](solutions/day04/main.rb) |\n| 05 | [Sunny with a Chance of Asteroids][day05] | [:heavy_check_mark:](solutions/day05/main.rb) |\n| 06 | [Universal Orbit Map][day06] | [:heavy_check_mark:](solutions/day06/main.rb) |\n| 07 | [Amplification Circuit][day07] | [:heavy_check_mark:](solutions/day07/main.rb) |\n| 08 | [Space Image Format][day08] | [:heavy_check_mark:](solutions/day08/main.rb) |\n| 09 | [Sensor Boost][day09] | [:heavy_check_mark:](solutions/day09/main.rb) |\n| 10 | [Monitoring Station][day10] | [:heavy_check_mark:](solutions/day10/main.rb) |\n\n[day01]: https://adventofcode.com/2019/day/1\n[day02]: https://adventofcode.com/2019/day/2\n[day03]: https://adventofcode.com/2019/day/3\n[day04]: https://adventofcode.com/2019/day/4\n[day05]: https://adventofcode.com/2019/day/5\n[day06]: https://adventofcode.com/2019/day/6\n[day07]: https://adventofcode.com/2019/day/7\n[day08]: https://adventofcode.com/2019/day/8\n[day09]: https://adventofcode.com/2019/day/9\n[day10]: https://adventofcode.com/2019/day/10\n\n[kq]: https://dev.krzaq.cc\n\nReadme generated on 2019-12-10 08:28:50 +0100"}, {"author": "BartoszMilewski", "repo": "BartoszMilewski/AdventOfCode18", "language": "Haskell", "language_all": {"Haskell": 4468}, "readme_contents": "# AdventOfCode18\nSolutions to some of the advent of code problems\n"}, {"author": "derekslager", "repo": "derekslager/advent-of-code-2015", "language": "Clojure", "language_all": {"Clojure": 26884}, "readme_contents": "# Advent of Code\n\nMy solutions to [Advent of Code](http://adventofcode.com/) puzzles\nusing Clojure.\n\nGeneral implementation notes:\n\n* I'm not striving for perfect or particularly impressive\n  solutions. This is supposed to be fun, after all!\n* I'm not trying to make my code as small as possible, though I\n  embrace concision when suitable to the problem at hand.\n* I give no consideration to performance except when absolutely\n  necessary.\n* I've done all development within a REPL, so not all examples will run\n  unmodified.\n"}, {"author": "nnja", "repo": "nnja/advent_of_code_2018", "language": "Python", "language_all": {"Python": 25783}, "readme_contents": "# 2018 Advent of Code Solutions - Python 3\n\nMy [Advent of Code](https://adventofcode.com/) solutions for 2018, written in Python 3.\n\nI'll do my best to finish each exercise daily, but there's no guarantee.\n\nSeveral utility functions are included in `util.py`, including a function that will grab the given input for a day. To use this function, the `AOC_SESSION_KEY` must be set. This key can be found in the site cookies, after you've logged in successfully. Input files are cached to the file system to reduce strain on the AoC server.\n\nMy input files, along with my unique answers are provided in each file. Occasionally, I'll go back and rewrite or refactor a solution. I'll try to include both versions for each day -- the quick and dirty, and the slightly more readable or more efficient. \n\nDisclaimer -- this code is meant to be written and run quickly, with minimal configuration. Therefore, the solutions may not always be the most Pythonic or idiomatic. "}, {"author": "scy", "repo": "scy/advent-of-code", "language": "JavaScript", "language_all": {"JavaScript": 52042, "Rust": 51002, "PHP": 1412, "Python": 865}, "readme_contents": "# scy\u2019s Advent of Code\n\n\ud83d\udc47 *Nach dem ersten Abschnitt geht\u2019s komplett auf Deutsch weiter!* \ud83d\udc47\n\n## Information in English\n\nThis repository contains my solutions to some [Advent of Code](https://adventofcode.com/) puzzles.\nI\u2019m using Advent of Code to learn new programming languages or to improve my proficiency in those I already know.\n\nAlso, each year in December, when the puzzles come out, I\u2019m doing live video streams while solving them.\nThat way, people can look over my shoulder, ask questions or suggest other ways to build the solution.\n\nWhile the code I\u2019m writing uses English names and comments, **the streams are in German**, my mother tongue.\nThis allows me to think and speak more fluently, but more importantly it provides a way for German speakers who are not very good at English to follow along.\nIn other words, I\u2019m trying to lower the entry barrier for people who struggle with English.\n\nTherefore, the documentation and announcements in this repository that deal with the streams is in German as well.\nFeel free to browse the code though! \ud83d\ude09\n\nYou can contact me on Mastodon ([@scy@scy.name](https://mastodon.scy.name/@scy)), Twitter ([@scy](https://twitter.com/scy)) or visit [our Discord community](https://discord.gg/GVqzyEV).\n\n## Worum geht\u2019s?\n\nDieses Git-Repository enth\u00e4lt meine L\u00f6sungen zu einigen Aufgaben (\u201ePuzzles\u201c) aus dem [Advent of Code](https://adventofcode.com/), einem j\u00e4hrlich stattfindenden \u201eProgrammier-Adventskalender\u201c.\nJeden Tag erscheinen zwei neue Aufgaben (die zweite baut auf der ersten auf), die man in einer beliebigen Programmiersprache l\u00f6sen kann.\nDas nehme ich gern zum Anlass, um eine neue Sprache zu lernen oder meine Kenntnisse in anderen zu vertiefen.\n\nIm Dezember, wenn neue Puzzles rauskommen, mache ich \u00fcblicherweise Live-Videostreams, w\u00e4hrend ich sie l\u00f6se.\nAuf die Art k\u00f6nnen mir Leute \u00fcber die Schulter schauen, Fragen stellen oder alternative L\u00f6sungswege vorschlagen.\n\nIm Code benutze ich englische Namen f\u00fcr Variablen, Funktionen etc., aber **die Streams sind auf Deutsch**, meiner Muttersprache.\nDadurch kann ich fl\u00fcssiger denken und reden, aber zus\u00e4tzlich (noch viel wichtiger) gibt es Leuten, die nicht so gut Englisch sprechen, die M\u00f6glichkeit, mit dabei zu sein.\nIch versuche also den Einstieg f\u00fcr Menschen zu vereinfachen, die mit Englisch Probleme haben.\n\nAus diesem Grund sind in diesem Repository die Dokumentation und Ank\u00fcndigungen, die sich mit den Streams befassen, auf Deutsch.\n\n## \u2728 Advent of Code 2019! \u2728\n\nEndlich ist Dezember, der Advent of Code hat wieder angefangen!\nMein Plan ist:\n\n* Jeden Tag ein Stream auf YouTube.\n* Dieses Jahr programmiere ich in **[Rust](https://www.rust-lang.org/)**. Ich bin totaler Newbie und hatte bis November noch keine Zeile Code darin geschrieben. Es gab Vorab-Streams, in denen ich Rust aufgesetzt habe und [Rust by Example](https://doc.rust-lang.org/rust-by-example/) ein St\u00fcck weit durchgearbeitet, siehe [vergangene Streams](#vergangene-streams).\n* Aktuelle Ank\u00fcndigungen und die M\u00f6glichkeit, miteinander zu quatschen, gibt\u2019s in [unserer Discord-Community](https://discord.gg/GVqzyEV); alternativ auf Mastodon ([@scy@scy.name](https://mastodon.scy.name/@scy)) und Twitter ([@scy](https://twitter.com/scy)).\n* Abonniert [meinen YouTube-Kanal](https://www.youtube.com/channel/UC2a5Ca5tgel0Ebq5ZgeUbRA) und aktiviert die Glocke, um benachrichtigt zu werden.\n\n### \ud83d\udcc5 Streamkalender \ud83d\udcc5\n\n* **Mi 2019-12-11 15:00:** [Tag 11](https://youtu.be/Q9Zy0lyZo7E)\n* **Do 2019-12-12 17:30:** Tag 12\n\n*Alle Zeitangaben in Mitteleurop\u00e4ischer Normalzeit (MEZ, CET).*\n\n#### Vergangene Streams\n\nWenn ihr die 2019er Streams von vorn bis hinten durchschauen wollt, gibt es hier die Playlist:\n[Advent of Code 2019](https://www.youtube.com/playlist?list=PLmsG3H3Vzkf-CMt-3GY7sG8D_6pGh1cA7)\n\n* Mi 2019-11-20: [Bauen am Streaming-Setup](https://youtu.be/qIXtNoK_bH0)\n* Do 2019-11-21: [\u201eRust by Example\u201c Teil 1: Installation, Hello World, Stringformatierung](https://youtu.be/nBgGx9z9xTA)\n* Fr 2019-11-22: [\u201eRust by Example\u201c Teil 2: Primitive, Tupel, Arrays, Slices, Enums](https://youtu.be/Sb0CbKU4D5o)\n* Di 2019-11-26: [pythoneer\u2019s Rust-Tutorial: Ownership, Borrows, Move und Lifetimes](https://youtu.be/vuKHcaTEkdo)\n* So 2019-12-01: [Tag 1](https://youtu.be/h-Zgni6L680) (Raumschiff-Treibstoff)\n* Mo 2019-12-02: [Tag 2](https://youtu.be/_DnboNZCm0s) (erstes Intcode-Programm: Addition/Multiplikation)\n* Di 2019-12-03: [Tag 3](https://youtu.be/wteaJdGEu1I) (Schnittpunkte zwischen zwei Dr\u00e4hten)\n* Mi 2019-12-04: [Tag 4](https://youtu.be/-llJ5Cq_PQM) (\u201ePassw\u00f6rter\u201c aus Ziffern mit G\u00fcltigkeitsregeln)\n* Do 2019-12-05: [Tag 5](https://youtu.be/-ISgDEmrbLs) (Intcode-Erweiterungen: Parameter-Modus \u201eImmediate\u201c, Jump, Compare)\n* Fr 2019-12-06: [Tag 6](https://youtu.be/6JJ8ZTOlPCI) (Graphtraversierung bzw. \u201eOrbitaltransfers\u201c)\n* Sa 2019-12-07: [Tag 7](https://youtu.be/AuqY50f1rAU) (Verkettung von Intcode-Maschinen, Warten auf Input)\n* So 2019-12-08: [Tag 8](https://youtu.be/3pbzOg2QCTc) (Passwort-Bild aus teils transparenten Layern)\n* Mo 2019-12-09: [Tag 9](https://youtu.be/L_rm1t1ZtOI) (Relative Adressierung und mehrere Outputs im Intcode)\n* Di 2019-12-10: [Tag 10](https://youtu.be/TjcIJJKWxKU) (Asteroiden: Sichtbarkeit und Abschuss im Uhrzeigersinn)\n\n## Advent of Code 2018\n\n2018 lag mein Fokus auf modernem JavaScript, sprich \u2265 ES6.\nDaf\u00fcr habe ich mich mit dem hervorragenden [JavaScript.info](https://javascript.info/) eingearbeitet und dort auch immer wieder nachgeschlagen.\n\nLeider ist am 13.12. (wann auch sonst) meine Platte abgeraucht und ich habe die Streams nicht fortgesetzt.\n\nDie Streams der ersten zw\u00f6lf Tage findet ihr in dieser YouTube-Playlist: [Advent of Code 2018](https://www.youtube.com/playlist?list=PLmsG3H3Vzkf_HZppROt70VbflbSEJtj1K), den Code nat\u00fcrlich hier im Repo im Ordner [2018](2018).\n\n## FAQ\n\n### Warum streamst du nicht auf Twitch?\n\nIch versuche seit ca. nem Jahr, so wenig mit Amazon (denen ja Twitch geh\u00f6rt) zu tun zu haben wie m\u00f6glich.\nDie Arbeitsbedingungen dort sind ausbeuterisch, deren CEO Jeff Bezos hordet sein Geld lieber, anstatt damit Gutes zu tun und generell sind sie mir einfach unsympathisch.\nGoogle ist jetzt aus antikapitalistischer Sicht nur marginal besser, aber freie oder dezentrale Streamingplattformen gibt\u2019s eben noch nicht so wirklich.\nVielleicht wird das 2020 besser\u2026?\n\n### Warum benutzt du nicht den YouTube-Chat, sondern Discord?\n\nErstens hei\u00dft du im YouTube-Chat so wie dein \u201eKanal\u201c, was \u00fcblicherweise deinem Google-Namen und damit oft deinem Passnamen entspricht.\nSich einen Nickname auszusuchen, ist nicht so einfach, au\u00dfer du benennst deinen \u201eKanal\u201c um.\nUnd wenn du dich mit deinem Nickname identifizierst, f\u00fchlt sich der Passname einfach bl\u00f6d an.\nAbgesehen davon f\u00e4llt\u2019s mir schwer, dich zuzuordnen, wenn ich dich nur unter deinem Nick kenne.\n\nZweitens m\u00f6chte ich aber auch eine Community abseits von den paar Stunden Stream hochziehen, von daher macht\u2019s eben einfach Sinn, nen Dienst zu benutzen, der auch abseits der Streams genutzt werden kann.\n\nUnd drittens h\u00e4tte ich Bock, Stammg\u00e4ste auch mal in den Stream dazu zu holen, das geht halt mit Discord auch direkt.\n"}, {"author": "def-", "repo": "def-/nim-advent-of-code-2015", "language": "Nimrod", "language_all": {"Nim": 10724}, "readme_contents": null}, {"author": "ejhobbs", "repo": "ejhobbs/Advent-Of-Code", "language": "Elixir", "language_all": {"Elixir": 12325}, "readme_contents": "# Advent of Code Helper [![Build Status](https://travis-ci.org/ejhobbs/Advent-Of-Code.svg?branch=master)](https://travis-ci.org/ejhobbs/Advent-Of-Code) [![codecov](https://codecov.io/gh/ejhobbs/Advent-Of-Code/branch/master/graph/badge.svg)](https://codecov.io/gh/ejhobbs/Advent-Of-Code) [![Hex.pm](https://img.shields.io/hexpm/v/advent_of_code_helper.svg?style=plastic)](https://hex.pm/packages/advent_of_code_helper)\n\nThis elixir package allows you to quickly grab inputs for advent of code puzzles, and not have to worry about manually pasting them in! After you've got a puzzle input for the first time, the result is stored on disk so every subsequent request bypasses the need to download it from the server again.\n\n## Usage\n\nThere are only two functions you need to use this module:\n\n```elixir\nAdventOfCodeHelper.get_input(year,day) # Specify year and day for puzzle\n\nAdventOfCodeHelper.get_input(day) # Automatically gets puzzle from most recent year\n\n```\nBoth of these functions will simply return a tuple `{:ok, value}` if they succeed, where `value` is the puzzle input in the form of a `BitString`, or `{:fail, message}` if there was something wrong.\n\nThere are two configuration directives that are also needed to make this package work correctly. Simply add the following to your `config/config.exs`\n\n```elixir\nconfig :advent_of_code_helper,\nsession: \"<session string>\",\ncache_dir: \".cache/\" # this is a sensible default, but feel free to put it wherever you have write access\n```\n\nThe session string will need to be taken from [adventofcode.com](https://adventofcode.com), it will be under cookies as `session`. You can extract the value using the inspector in your browser of choice.\n\n\n## Installation\n\nThis package can be installed by adding `advent_of_code_helper` to your list of dependencies in `mix.exs`:\n\n```elixir\ndef deps do\n  [\n    {:advent_of_code_helper, \"~> 0.1.0\"}\n  ]\nend\n```\n"}, {"author": "nickbclifford", "repo": "nickbclifford/advent-of-code-2018", "language": "Crystal", "language_all": {"Crystal": 16081}, "readme_contents": "# Advent of Code 2018 Solutions\nWritten in Crystal. Build each file with `crystal build --release dayN.cr` and run with `./dayN` for optimal execution time."}, {"author": "1Computer1", "repo": "1Computer1/advent", "language": "Haskell", "language_all": {"Haskell": 42391, "Python": 503}, "readme_contents": "# Advent of Code Solutions\n\nI'm probably not gonna do all the problems, but I'm gonna pretend like I'm gonna.  \n\nThis workspace is convenient, kinda:  \n\n- `generate.py <year> <start> <end>` makes all the files between two days for a year.\n- `Boilerplate` generates a `run` function that runs the solution given the year, day, and subproblem (A or B).\n- `Advent.Types` has a `Solution` type that encapsulates a solution.\n\nFeel free to use this as a template for yourself, maybe add tests and benchmarks or something.  \nCheckout the `no-solutions` branch for the workspace with no spoilers that you can use right away.  \n"}, {"author": "danthedaniel", "repo": "danthedaniel/Advent-of-Code-2017", "language": "Java", "language_all": {"Java": 4204, "Assembly": 2365, "C": 1895, "Rust": 1893, "Python": 1735, "Elixir": 1573, "JavaScript": 1466, "Ruby": 814, "Makefile": 332}, "readme_contents": "Advent of Code 2017\n===\n\n>*On the first day of Christmas, my true love gave to me*\n>\n>*A checksum script in Ruby*\n\n[Official site](http://adventofcode.com/).\n\n### Personal Rules\n\n* Every day's problems must be completed in a unique programming language.\n* Problems need not be completed on the day they are assigned.\n* Problems can be completed in any order.\n\n### Languages Used\n\n* Day 1 - Ruby\n* Day 2 - Python\n* Day 3 - C\n* Day 4 - Rust\n* Day 5 - 32 bit MIPS Assembly\n* Day 6 - Elixir\n* Day 7 - JavaScript\n* Day 8 - Java\n"}, {"author": "JEG2", "repo": "JEG2/advent_of_code_2018", "language": "Elixir", "language_all": {"Elixir": 60467}, "readme_contents": null}, {"author": "armstnp", "repo": "armstnp/advent-of-code-2019", "language": "Clojure", "language_all": {"Clojure": 69827}, "readme_contents": null}, {"author": "rosa", "repo": "rosa/advent-of-code", "language": "Elixir", "language_all": {"Elixir": 182215, "Ruby": 44657, "Lua": 7471, "Kotlin": 5100, "C": 4866, "Swift": 3278, "Prolog": 3123, "Haskell": 3044, "Scala": 2070, "Common Lisp": 1911, "Perl": 1795, "Shell": 449, "Awk": 443}, "readme_contents": "# Advent of Code\n\nAdvent of Code is an Advent calendar of small programming puzzles that can be solved in any language. It's been happening every December since 2015, and it's a lot of fun. Every day from 1st December to 25th December, a new puzzle with 2 parts gets unblocked. The goal is to solve all of them to save Christmas. The big story linking the problems together is great too. I've used AoC to learn some Elixir, it's a nice way to get some practice in a new language or to even try several ones!\n\nLearn more and sign up for next edition at the [official website](https://adventofcode.com/).\n"}, {"author": "orez-", "repo": "orez-/Advent-of-Code-2017", "language": "Python", "language_all": {"Python": 189865}, "readme_contents": "# Advent of Code 2017\n\nMy solutions for [Advent of Code 2017](http://adventofcode.com/2017).\n\n`original.py` on each day is my as-fast-as-possible solution to the problem, with only minor cleanup.\n\nSome interesting notes:\n- I ended up golfing [Day 1: Inverse Captcha](day01/golf.py) ([?](https://adventofcode.com/2017/day/1))\n- I'm fond of my solution for [Day 21: Fractal Art](day21/original.py) ([?](https://adventofcode.com/2017/day/21))\n\nI placed [ninth overall](https://adventofcode.com/2017/leaderboard), missing eighth by _one point_ \ud83d\ude29\n\n- [Advent of Code 2019](https://github.com/orez-/Advent-of-Code-2019)\n- [Advent of Code 2018](https://github.com/orez-/Advent-of-Code-2018)\n- Advent of Code 2017\n- [Advent of Code 2016](https://github.com/orez-/Advent-of-Code-2016)\n- [Advent of Code 2015](https://github.com/orez-/Advent-of-Code-2015)\n"}, {"author": "katemihalikova", "repo": "katemihalikova/advent-of-code", "language": "JavaScript", "language_all": {"JavaScript": 213558, "F#": 5268, "PHP": 5041, "Ruby": 795}, "readme_contents": "# *Advent of Code* \n> Solutions of [*Advent of Code*](http://adventofcode.com/) puzzles\n\nJump to: [2015](https://github.com/katemihalikova/advent-of-code/tree/latest/2015), [2016](https://github.com/katemihalikova/advent-of-code/tree/latest/2016), [2017](https://github.com/katemihalikova/advent-of-code/tree/latest/2017), [2018](https://github.com/katemihalikova/advent-of-code/tree/latest/2018), [2019](https://github.com/katemihalikova/advent-of-code/tree/latest/2019)\n"}, {"author": "shekhargulati", "repo": "shekhargulati/adventofcode-2016", "language": "Java", "language_all": {"Java": 88305}, "readme_contents": "# adventofcode-2016\nAdvent Of Code 2016 Java 8 Solutions http://adventofcode.com/\n"}, {"author": "leebyron", "repo": "leebyron/advent-of-code-2016", "language": "JavaScript", "language_all": {"JavaScript": 82454}, "readme_contents": "Spoiler alert!\n--------------\n\nThese are my solutions to the [Advent of Code 2016](http://adventofcode.com/2016). I've saved them here for posterity. You should really just go play along though!\n"}, {"author": "adventofcode", "repo": "adventofcode/2015solutions", "language": "C", "language_all": {"C": 104592, "Java": 70741, "Rust": 70646, "Haskell": 34934, "Elixir": 28367, "JavaScript": 17162, "Python": 7261, "Ruby": 3438, "Go": 867}, "readme_contents": "### Advent Of Code solutions\n\nGot a solution? Put it in a pull request! I'll accept it so long as it's\npossibly a solution.\n\nGot a code critique? Same deal. Make your edits in a pull request and see what\nhappens.\n\nHappy coding.\n\n##### Naming convention\nThe 1 or 2 in the name depends on part 1 or part 2.\n- p[1-2][a-z].[ext] - the code file. ext is c for C, cpp for C++, sh for POSIX sh...\n\t[a-z] are to differentiate between different solutions in the same \n\tlanguage.\n- input[a-z]? - the input provided by the problem. Not all the inputs are the \n  same.\n- p[1-2] - compiled binary. Not to be included in the repo, as per gitignore.\n\n##### Disclaimer\nThis repository and this organization are not in any way linked to \n[adventofcode.com](http://adventofcode.com/) except through sharing of a name.\n"}, {"author": "wimglenn", "repo": "wimglenn/advent-of-code-wim", "language": "Python", "language_all": {"Python": 186089}, "readme_contents": "```\n                                   *                              \n                                   |                              \n                                 +-|---+                          \n                                /  |  /|                          \n                               +-----+ |                          \n                               |:::::| |                          \n                       +----+  |:::::| |---+      +-----------+   \n                      /    / \\ |:::::| |  /|     / \\\\\\\\\\\\ [] /|   \n                     /    / / \\|:::::| | / |    / \\\\\\\\\\\\ [] / |   \n                    /    / / / \\:::::|/ /  |   +-----------+  |   \n                   +----+ / / / \\------+ ------|:::::::::::|  |   \n                   |-----\\ / / / \\=====| ------|:::::::::::|  |   \n                   |------\\ / / / \\====|   |   |:::::::::::|  |   \n                   |-------\\ / / / +===|   |   |:::::::::::|  |   \n                   |--------\\ / / /|===|   |   |:::::::::::|  |   \n                   |---------\\ / / |===|   |  /|:::::::::::|  |   \n                   |----------\\ /  |===|  /  //|:::::::::::| /    \n                   +-----------+   |===| /  //||:::::::::::|/     \n                   |:::::::::::|   |===|/__//___________________  \n                   |:::::::::::|   |______//|_____...._________   \n                   |:::::::::::|   |     //| ____/ /_/___         \n                ---|:::::::::::|   |--------|[][]|_|[][]_\\------  \n               ----|:::::::::::|   |---------------------------   \n                || |:::::::::::|   |  //| ||  / / / ||      ||    \n                || |:::::::::::|   | //|  || /   /  ||      ||    \n                   |:::::::::::|   |//|     / / /                 \n                   |:::::::::::|   //|     /   /   ____________   \n                   |:::::::::::|  //|     / / /___/ /#/ /#/#/ /   \n                   ==============//======+...+====================\n                   - - - - - - -// - - -/   / - - - - - - - - - - \n                 ==============//|==============================  \n                              //|                                 \n```\n"}, {"author": "dejakobniklas", "repo": "dejakobniklas/AdventOfCode", "language": "Java", "language_all": {"Java": 129889}, "readme_contents": "# AdventOfCode\n\n[![About](https://img.shields.io/badge/Advent%20of%20Code-2019-brightgreen)](https://adventofcode.com/2019/about)\n[![Language](https://img.shields.io/badge/Language-Java-orange)](https://www.java.com/)\n[![Days completed](https://img.shields.io/badge/Days%20completed-9-red)](https://github.com/dejakobniklas/AdventOfCode/)\n[![Stars](https://img.shields.io/badge/Stars-18-yellow)](https://github.com/dejakobniklas/AdventOfCode/)\n\nnetworkException's Advent of Code challenges\n\n### Check out other solutions :D\n+ Hax's [advent-of-code](https://github.com/Schlauer-Hax/advent-of-code)\n+ Trojaner's [AdventofCode](https://github.com/TrojanerHD/AdventofCode)\n+ derNiklaas' [Advent-of-Code-2019](https://github.com/derNiklaas/Advent-of-Code-2019)\n+ LeMoonStar's [AdventOfCode2019Solutions](https://github.com/LeMoonStar/AdventOfCode2019Solutions)\n+ DCDragonCoder's [AdventOfCode2019](https://github.com/DragonCoder01/AdventOfCode2019)\n+ joblo2213's [AdventOfCode2019](https://github.com/joblo2213/AdventOfCode2019)\n+ FeldiM's [AdventOfCode19](https://github.com/feldim2425/AdventOfCode19)\n+ derkalaender's [AdventOfCode](https://github.com/derkalaender/AdventOfCode)\n+ Daan Breur's [AdventodCode2019](https://github.com/daanbreur/AdventofCode2019)\n+ 1Turtle's [AdventOfCode-for-Computercraft](https://github.com/1Turtle/AdventOfCode-for-Computercraft)\n"}, {"author": "KrzaQ", "repo": "KrzaQ/AdventOfCode2015", "language": "Ruby", "language_all": {"Ruby": 11181, "D": 4529, "Haskell": 1274, "Python": 763, "Makefile": 641}, "readme_contents": "[Advent of Code 2015](http://adventofcode.com/2015) solutions by [KrzaQ][kq]\n=======================\n\nI'm using various languages to provide solutions.\n\n| Day | Name                                           | D    | Haskell | Python | Ruby | Shakespeare |\n|:---:|:-----------------------------------------------|:----:|:----:|:------:|:-------:|:-----------:|\n| 01  | [Not Quite Lisp][day1]                         |[\u2713](./day01/main.d)|[\u2713](./day01/main.hs)|[\u2713](./day01/main.py)|[\u2713](./day01/main.rb)|[\u2713](./day01/shakespeare)|\n| 02  | [I Was Told There Would Be No Math][day2]      |[\u2713](./day02/main.d)|[\u2713](./day02/main.hs)|[\u2713](./day02/main.py)|[\u2713](./day02/main.rb)||\n| 03  | [Perfectly Spherical Houses in a Vacuum][day3] |[\u2713](./day03/main.d)|||[\u2713](./day03/main.rb)||\n| 04  | [The Ideal Stocking Stuffer][day4]             |[\u2713](./day04/main.d)||[\u2713](./day04/main.py)|[\u2713](./day04/main.rb)||\n| 05  | [Doesn't He Have Intern-Elves For This?][day5] |[\u2713](./day05/main.d)|||[\u2713](./day05/main.rb)||\n| 06  | [Probably a Fire Hazard][day6]                 ||||[\u2713](./day06/main.rb)||\n| 07  | [Some Assembly Required][day7]                 |[\u2713](./day07/main.d)|||[\u2713](./day07/main.rb)||\n| 08  | [Matchsticks][day8]                            ||||[\u2713](./day08/main.rb)||\n| 09  | [All in a Single Night][day9]                  ||||[\u2713](./day09/main.rb)||\n| 10  | [Elves Look, Elves Say][day10]                 ||||[\u2713](./day10/main.rb)||\n| 11  | [Corporate Policy][day11]                      ||||[\u2713](./day11/main.rb)||\n| 12  | [JSAbacusFramework.io][day12]                  ||||[\u2713](./day12/main.rb)||\n| 13  | [Knights of the Dinner Table][day13]           ||||[\u2713](./day13/main.rb)||\n| 14  | [Reindeer Olympics][day14]                     ||||[\u2713](./day14/main.rb)||\n| 15  | [Science for Hungry People][day15]             ||||[\u2713](./day15/main.rb)||\n| 16  | [Aunt Sue][day16]                              ||||[\u2713](./day16/main.rb)||\n| 17  | [No Such Thing as Too Much][day17]             ||||[\u2713](./day17/main.rb)||\n| 18  | [Like a GIF For Your Yard][day18]              ||||[\u2713](./day18/main.rb)||\n\n[day1]:  http://adventofcode.com/2015/day/1\n[day2]:  http://adventofcode.com/2015/day/2\n[day3]:  http://adventofcode.com/2015/day/3\n[day4]:  http://adventofcode.com/2015/day/4\n[day5]:  http://adventofcode.com/2015/day/5\n[day6]:  http://adventofcode.com/2015/day/6\n[day7]:  http://adventofcode.com/2015/day/7\n[day8]:  http://adventofcode.com/2015/day/8\n[day9]:  http://adventofcode.com/2015/day/9\n[day10]: http://adventofcode.com/2015/day/10\n[day11]: http://adventofcode.com/2015/day/11\n[day12]: http://adventofcode.com/2015/day/12\n[day13]: http://adventofcode.com/2015/day/13\n[day14]: http://adventofcode.com/2015/day/14\n[day15]: http://adventofcode.com/2015/day/15\n[day16]: http://adventofcode.com/2015/day/16\n[day17]: http://adventofcode.com/2015/day/17\n[day18]: http://adventofcode.com/2015/day/18\n\n[kq]: https://dev.krzaq.cc\n"}, {"author": "taylorwood", "repo": "taylorwood/advent-of-code", "language": "Clojure", "language_all": {"Clojure": 107114}, "readme_contents": "<img src=\"doc/img/santa.jpg\" align=\"right\" width=\"450\" />\n\n# Advent of Code\n\nSolutions to [Advent of Code](https://adventofcode.com) challenges.\n\n## 2019\n\n- [Day One](src/advent_of_code/2019/1.clj)\n- [Day Two](src/advent_of_code/2019/2.clj)\n- [Day Three](src/advent_of_code/2019/3.clj)\n- [Day Four](src/advent_of_code/2019/4.clj)\n\n## 2018\n\nThis year I'm visualizing some of the solutions with [Quil](http://quil.info).\n\n- [Day One](src/advent_of_code/2018/1.clj)\n- [Day Two](src/advent_of_code/2018/2.clj) ([visualized](https://youtu.be/Y_UuASYf6bM))\n- [Day Three](src/advent_of_code/2018/3.clj) ([visualized](doc/img/2018/3.png))\n- [Day Four](src/advent_of_code/2018/4.clj) ([visualized](https://youtu.be/9OfLNCWM_yA))\n- [Day Five](src/advent_of_code/2018/5.clj)\n- [Day Six](src/advent_of_code/2018/6.clj) ([visualized](doc/img/2018/6.png))\n- [Day Seven](src/advent_of_code/2018/7.clj)\n- [Day Eight](src/advent_of_code/2018/8.clj)\n- [Day Nine](src/advent_of_code/2018/9.clj)\n- [Day Ten](src/advent_of_code/2018/10.clj) ([visualized](https://youtu.be/4YtCXEalgTw))\n- [Day Eleven](src/advent_of_code/2018/11.clj)\n- [Day Twelve](src/advent_of_code/2018/12.clj)\n- [Day Thirteen](src/advent_of_code/2018/13.clj) ([visualized](https://youtu.be/hnDNNvy8gww))\n- [Day Fourteen](src/advent_of_code/2018/14.clj)\n\n## 2017\n\n- [Day One](src/advent_of_code/2017/1.clj)\n- [Day Two](src/advent_of_code/2017/2.clj)\n- [Day Three](src/advent_of_code/2017/3.clj)\n- [Day Four](src/advent_of_code/2017/4.clj)\n- [Day Five](src/advent_of_code/2017/5.clj)\n- [Day Six](src/advent_of_code/2017/6.clj)\n- [Day Seven](src/advent_of_code/2017/7.clj)\n- [Day Eight](src/advent_of_code/2017/8.clj)\n- [Day Nine](src/advent_of_code/2017/9.clj)\n- [Day Ten](src/advent_of_code/2017/10.clj)\n- [Day Eleven](src/advent_of_code/2017/11.clj)\n- [Day Twelve](src/advent_of_code/2017/12.clj)\n- [Day Thirteen](src/advent_of_code/2017/13.clj)\n- [Day Fourteen](src/advent_of_code/2017/14.clj)\n- [Day Fifteen](src/advent_of_code/2017/15.clj)\n- [Day Sixteen](src/advent_of_code/2017/16.clj)\n- [Day Seventeen](src/advent_of_code/2017/17.clj)\n- [Day Eighteen](src/advent_of_code/2017/18.clj)\n- [Day Nineteen](src/advent_of_code/2017/19.clj)\n- [Day Twenty](src/advent_of_code/2017/20.clj)\n- [Day Twenty One](src/advent_of_code/2017/21.clj)\n- [Day Twenty Two](src/advent_of_code/2017/22.clj)\n- [Day Twenty Three](src/advent_of_code/2017/23.clj)\n\n## 2016\n\n- [Day One](src/advent_of_code/2016/1.clj)\n- [Day Two](src/advent_of_code/2016/2.clj)\n- [Day Three](src/advent_of_code/2016/3.clj)\n- [Day Four](src/advent_of_code/2016/4.clj)\n- [Day Five](src/advent_of_code/2016/5.clj)\n- [Day Six](src/advent_of_code/2016/6.clj)\n- [Day Seven](src/advent_of_code/2016/7.clj)\n- [Day Eight](src/advent_of_code/2016/8.clj)\n- [Day Nine](src/advent_of_code/2016/9.clj)\n- [Day Ten](src/advent_of_code/2016/10.clj)\n"}, {"author": "jennybc", "repo": "jennybc/2017_advent-of-code", "language": "R", "language_all": {"R": 23499, "C++": 545}, "readme_contents": null}, {"author": "dstockto", "repo": "dstockto/AdventOfCode2015", "language": "PHP", "language_all": {"PHP": 58107}, "readme_contents": "#Advent of Code 2015 - TDD in PHP\n---------------------------------\n\nThis repo contains (or will contain) examples of how to solve each of the 2015 Advent of Code challenges using PHP by following a TDD methodology using phpspec. You are welcome to use the code in any way you see fit, but the intention is for learning. \n\nTo see each of the examples developed live, please see my youtube channel at https://www.youtube.com/user/dstockto\n\nDue to the time required to record each video and since I didn't know about the project until day 7, it is likely this repo and the videos will be at least a few days behind.\n\nTo log in and try the Advent of Code, please go to [http://adventofcode.com/](http://adventofcode.com/). Thank you to Eric Wastl [@ericwastl](https://twitter.com/ericwastl) for creating this challenge.\n\n## Design Decisions\n\nThe purpose of this repo and the examples is to help people learn TDD with PHP. That means that for each of the Advent days, the design of the code may not be the fastest, most efficient or the most clever. If the description of the problem sounds like a simulation of some sort, I'll likely be building a simulation even though it may take more memory or more time than an optimized procedural solution. For instance, the first puzzle for day 1 could be solved with a text editor's find functionality or with a couple of regular expressions.\n\n## Initial Repository Contents\n\nTo start, the repo contains only composer.json, composer.lock and `runner.php`. The composer files are used to install phpspec and set up an autoloader so I don't need to write a bunch of `require_once` bits. The `runner.php` script will load a puzzle for a specific day and execute it. The solutions will output on the command line. Each day's classes will be namespaced with the day and the Puzzle1 and Puzzle2 classes will set up the classes and input and __invoke will result in the output. The runner script will execute this. Other than phpspec, I'm not planning on using any other frameworks or components, so the solutions will be plain PHP. \n\nIf you end up following along and have any questions or comments, please feel free to open issues on github. I'll try to respond as quickly as I can.\n\n## Videos\n\nPlaylist of All of these [https://www.youtube.com/playlist?list=PLHVWnS588z7rEjzg7QojrUS04gT2jCp1K](https://www.youtube.com/playlist?list=PLHVWnS588z7rEjzg7QojrUS04gT2jCp1K)\n\nDay 1 Puzzle 1 - [https://www.youtube.com/watch?v=JzUnN_J3DVI](https://www.youtube.com/watch?v=JzUnN_J3DVI)  \nDay 1 Puzzle 2 - [https://www.youtube.com/watch?v=7GEE781hCkk](https://www.youtube.com/watch?v=7GEE781hCkk)  \nDay 2 Puzzle 1 - [https://www.youtube.com/watch?v=JrbVR3qrj0Y](https://www.youtube.com/watch?v=JrbVR3qrj0Y)  \nDay 2 Puzzle 2 - [https://www.youtube.com/watch?v=h14wi9l6yvk](https://www.youtube.com/watch?v=h14wi9l6yvk)  \nDay 3 Puzzle 1 - [https://www.youtube.com/watch?v=2HOCmEPXC68](https://www.youtube.com/watch?v=2HOCmEPXC68)  \nDay 3 Puzzle 2 - [https://www.youtube.com/watch?v=CnSgCLgAcPU](https://www.youtube.com/watch?v=CnSgCLgAcPU)  \nDay 4 Puzzle 1 & 2 - [https://www.youtube.com/watch?v=O3ySnkTr9DI](https://www.youtube.com/watch?v=O3ySnkTr9DI)  \nDay 5 Puzzle 1 & 2 - [https://www.youtube.com/watch?v=RT0NwGxMjWA](https://www.youtube.com/watch?v=RT0NwGxMjWA&feature=youtu.be)  \nDay 6 Puzzle 1 - [https://www.youtube.com/watch?v=h_xGqkntntc](https://www.youtube.com/watch?v=h_xGqkntntc)  \nDay 6 Puzzle 2 - [https://www.youtube.com/watch?v=5iz12ZnOnw8](https://www.youtube.com/watch?v=5iz12ZnOnw8)  \nDay 7 Puzzle 1 - [https://www.youtube.com/watch?v=qLkNhFe30GA](https://www.youtube.com/watch?v=qLkNhFe30GA)  \nDay 7 Puzzle 2 - [https://www.youtube.com/watch?v=QL5hELorW3w](https://www.youtube.com/watch?v=QL5hELorW3w)  \nDay 8 Puzzle 1 - [https://www.youtube.com/watch?v=4GQy3bTAfeA](https://www.youtube.com/watch?v=4GQy3bTAfeA)  \nDay 8 Puzzle 2 - [https://www.youtube.com/watch?v=V1vQjLs-nfg](https://www.youtube.com/watch?v=V1vQjLs-nfg) \n\n\n\n"}, {"author": "Larkenx", "repo": "Larkenx/AdventOfCode2018", "language": "C#", "language_all": {"C#": 6255, "Ruby": 5352, "Lua": 4331, "Perl": 3779, "PowerShell": 3019, "Racket": 2815, "Java": 2410, "Clojure": 2299, "Swift": 2239, "Go": 1868, "Kotlin": 740}, "readme_contents": "# AdventOfCode2018\nThese are all of my solutions for [Advent of Code 2018](https://adventofcode.com/2018)! I'm trying to do each challenge in a different programming language everday. So far, here is the the master list of languages I've used:\n\n1. [Kotlin Script](https://github.com/Larkenx/AdventOfCode2018/tree/master/1)\n2. [Racket](https://github.com/Larkenx/AdventOfCode2018/blob/master/2/solution.rkt)\n3. [Java](https://github.com/Larkenx/AdventOfCode2018/blob/master/3/Solution.java)\n4. [Perl 6](https://github.com/Larkenx/AdventOfCode2018/blob/master/4/solution.p6)<sup>1</sup>\n5. [Swift](https://github.com/Larkenx/AdventOfCode2018/blob/master/5/AdventofCode2018/main.swift)\n6. [~~Powershell~~](https://github.com/Larkenx/AdventOfCode2018/blob/master/6/failed-solution.ps1) [Lua](https://github.com/Larkenx/AdventOfCode2018/blob/master/6/solution.lua)\n7. [Ruby](https://github.com/Larkenx/AdventOfCode2018/tree/master/7)\n8. [Go](https://github.com/Larkenx/AdventOfCode2018/blob/master/8/solution.go)\n9. [C#](https://github.com/Larkenx/AdventOfCode2018/blob/master/9/Solution/ConsoleApp1/Program.cs)\n\n<sup>1</sup>I wrote a Perl 6 [crash course guide here](https://gist.github.com/Larkenx/de8738aab358ca6f62931d91ae499982)!\n"}, {"author": "believer", "repo": "believer/advent-of-code", "language": "Reason", "language_all": {"Reason": 241865, "C++": 12273, "JavaScript": 234, "Shell": 99}, "readme_contents": "# Advent of Code\n\n## What is Advent of Code?\n\nAdvent of Code is an online event created by Eric Wastl. Each year, starting on Dec 1st, an advent calendar of small programming puzzles are unlocked once a day at midnight (EST/UTC-5). Developers of all skill sets are encouraged to solve them in any programming language they choose!\n\n## Years\n\n- [2019](/2019)\n- [2019 (ReasonML Native)](/advent-of-native)\n- [2018](/2018)\n- [2015](/2015)\n\n"}, {"author": "malmers", "repo": "malmers/AdventOfCode-2017", "language": "Haskell", "language_all": {"Haskell": 6873}, "readme_contents": "# Malm's Advent of Code 2017\n\nWritten in Haskell for some reason. No guarantees for efficient or good looking code\n"}, {"author": "mrgoodrich", "repo": "mrgoodrich/AdventOfCode2018", "language": "JavaScript", "language_all": {"JavaScript": 713732}, "readme_contents": "# AdventOfCode2018\n\n* [Private leaderboard tool](https://github.com/simmonmt/advent-of-code/blob/master/utils/dump_leaderboard.go)\n* [AoC 2018](https://adventofcode.com/2018)\n* [Google Boulder 2018 leaderboard](https://adventofcode.com/2018/leaderboard/private/view/275172)\n* [Catawiki leaderboard](https://adventofcode.com/2018/leaderboard/private/view/370453)\n\n![global_2018_final](https://github.com/mrgoodrich/AdventOfCode2018/blob/master/global_stats.png?raw=true)\n"}, {"author": "ChrisPenner", "repo": "ChrisPenner/advent-of-code-haskell", "language": "Haskell", "language_all": {"Haskell": 47961}, "readme_contents": "# Advent of Code Haskell\n\nAdvent of code solutions in Haskell\n"}, {"author": "M0nica", "repo": "M0nica/advent-of-code", "language": "JavaScript", "language_all": {"JavaScript": 17044}, "readme_contents": "# Advent of Code \n>  Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.\n\nThis repository contains my solutions to Advent of Code 2019\n\nhttps://adventofcode.com/\n\nPrevious years: \n- [http://adventofcode.com/2018](http://adventofcode.com/2018)\n- [http://adventofcode.com/2017](http://adventofcode.com/2017)\n- [http://adventofcode.com/2016](http://adventofcode.com/2016)\n- [http://adventofcode.com/2015](http://adventofcode.com/2015)\n\n\n### 2019\n| Challenge                                                                        | Status |\n| -------------------------------------------------------------------------------- | :----: |\n| Day 01: [The Tyranny of the Rocket Equation](http://adventofcode.com/2019/day/1) |  \\*\\*  |\n| Day 02: [1202 Program Alarm](https://adventofcode.com/2019/day/2)                |   \\*   |\n| Day 04: [Secure Container](http://adventofcode.com/2019/day/1)                   |  \\*\\*  |"}, {"author": "nicuveo", "repo": "nicuveo/advent-of-code", "language": "Haskell", "language_all": {"Haskell": 283234, "Rust": 7068, "Shell": 1459, "Emacs Lisp": 413}, "readme_contents": "# Advent of Code\n\nSorted by year and language.\n"}, {"author": "christofhaerens", "repo": "christofhaerens/advent_of_code", "language": "Python", "language_all": {"Python": 182912}, "readme_contents": "# advent_of_code\npuzzles and solutions from http://adventofcode.com\n\n"}, {"author": "maislinger", "repo": "maislinger/advent_of_code", "language": "Rust", "language_all": {"Rust": 159859, "Kotlin": 8423, "Shell": 207}, "readme_contents": null}, {"author": "Harleqin", "repo": "Harleqin/advent-of-code-2017", "language": "Common Lisp", "language_all": {"Common Lisp": 69390}, "readme_contents": null}, {"author": "roman01la", "repo": "roman01la/advent-of-code-2018", "language": "Clojure", "language_all": {"Clojure": 8146}, "readme_contents": "# [Advent of Code 2018](https://adventofcode.com/2018)\n"}, {"author": "ksmithut", "repo": "ksmithut/advent-of-code", "language": "JavaScript", "language_all": {"JavaScript": 23409}, "readme_contents": "# advent-of-code\n\nA cli to help initialize/run JavaScript advent-of-code challenges.\n\n# Installation\n\n```sh\nyarn add advent-of-code\n# or install globally\nyarn global add advent-of-code\n```\n\n# Configuration\n\nYou can configure the `advent` cli using the command line arguments (documented\nbelow) or some of the arguments can be configured via a `package.json` file.\n\nBelow are the available configuration options. If you pass in command-line\narguments, they will override your `package.json` configuration.\n\n```js\n{\n  \"adventConfig\": {\n    \"year\": \"2016\",\n    \"nameTemplate\": \"day{{num}}.js\",\n    \"templateFile\": \"node_modules/advent-of-code/src/templates/day.js\"\n  }\n}\n```\n\n| `package.json` key          | CLI argument                     | Default                                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| --------------------------- | -------------------------------- | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `adventConfig.year`         | `-y, --year [year]`              | currentMonth === December ? currentYear : currentYear - 1 | When pulling input from adventofcode.com, this year will be used.                                                                                                                                                                                                                                                                                                                                                                      |\n| -                           | `-s, --session [cookie]`         | `process.env.ADVENT_SESSION`                              | The session cookie to use when making requests to adventofcode.com. You can get this by logging into adventofcode.com and inspecting the request in your devtools and see what your cookie value is. Should start with `session=`.                                                                                                                                                                                                     |\n| `adventConfig.nameTemplate` | `-n, --name-template [template]` | `'day{{num}}.js'`                                         | The filename template to use when running and creating new day files. Wherever `{{num}}` is in the string, it will be replaced with a two digit (leading `0`s) representation of the number will be input. So if the day is `1`, using the default template, the filename will be `day01.js`.                                                                                                                                          |\n| `adventConfig.templateFile` | `-t, --template-file [filepath]` | `'node_modules/advent-of-code/src/templates/day.js'`      | The template file to use when initializing a new day file. It is recommended that you have your own that fits your style. The only requirement is that you export 2 functions: `exports.part1` and `exports.part2`, or just `module.exports = { part1, part2 }`. You may also export an `options` object to configure how input is parsed. `options.noTrim` lets you choose whether or not the input gets trimmed. Default is `false`. |\n| -                           | `-f, --force`                    | `false`                                                   | A flag used if you want to override an existing file with the template when calling `advent init`                                                                                                                                                                                                                                                                                                                                      |\n\n# Usage\n\n## Display help\n\n```sh\nadvent help\n```\n\n## Initialize a day\n\n```sh\nadvent init <day>\n```\n\n### Options\n\n* `<day>` - The day to initialize. Will create a file using your `nameTemplate`\n  configuration. You can run `advent init <day>` again and it won't do anything\n  unless you pass the `--force` flag.\n* `--name-template [template]` - See configuration above\n* `--template-file [filepath]` - See configuration above\n* `--force` - See configuration above\n\n## Run a day's code\n\n```sh\n$ advent run <day> <part> <input>\n```\n\n### Options\n\n* `<day>` - The day to initialize. Will use the file in the configuration you\n  set for `nameTemplate`\n* `<part>` - The part to run. The day file should export a property called\n  `part1` and `part2`.\n* `<input>` - The input to give the function. If `-` is passed, stdin will be\n  used as the input. If `+` is passed, and you have a session set, then it will\n  pull the input from adventofcode.com, or the cached value once it pulls from\n  adventofcode.com the first time.\n* `--year [year]` - See configuration above\n* `--session [session]` - See configuration above\n* `--name-template [template]` - See configuration above\n\n# Notes\n\n* This module leverages the [debug](https://www.npmjs.com/package/debug) module.\n  Setting `DEBUG=advent` will print out debug information, such as when this\n  module is pulling from local cache, which days it's trying to run/initialize,\n  and so forth. When reporting bugs, please have the output from this handy so\n  that I can more quickly determine the issue.\n\n* One thing I liked to do with my local stuff was to store my answers locally\n  along with example inputs (from the descriptions). The goal for this project\n  was to make it easy for someone to upload their solutions to github, and\n  others could pull it down and have it work with their inputs, but if there is\n  interest in providing a \"test suite\" to test against example inputs and such,\n  then I will do so.\n\n# Disclaimer\n\nI am not affiliated with [adventofcode.com](http://adventofcode.com) or any of\ntheir sponsors, employees, pets, or anything relating to them. I am an active\nparticipant, and I wanted to make a tool to make it easier to setup and run\nadvent of code things. Please don't abuse adventofcode.com. This tool could be\nused to make a lot of automated requests to their site, which is why this tool\nleverages caching. If you find that you're making too many requests to\nadventofcode.com because of this module, please let me know so I can resolve any\nissues. If this module is used to abuse adventofcode.com, I will unpublish it\nfrom npm and remove this code from github.\n"}, {"author": "Harleqin", "repo": "Harleqin/advent-of-code-2017", "language": "Common Lisp", "language_all": {"Common Lisp": 69390}, "readme_contents": null}, {"author": "roman01la", "repo": "roman01la/advent-of-code-2018", "language": "Clojure", "language_all": {"Clojure": 8146}, "readme_contents": "# [Advent of Code 2018](https://adventofcode.com/2018)\n"}, {"author": "ksmithut", "repo": "ksmithut/advent-of-code", "language": "JavaScript", "language_all": {"JavaScript": 23409}, "readme_contents": "# advent-of-code\n\nA cli to help initialize/run JavaScript advent-of-code challenges.\n\n# Installation\n\n```sh\nyarn add advent-of-code\n# or install globally\nyarn global add advent-of-code\n```\n\n# Configuration\n\nYou can configure the `advent` cli using the command line arguments (documented\nbelow) or some of the arguments can be configured via a `package.json` file.\n\nBelow are the available configuration options. If you pass in command-line\narguments, they will override your `package.json` configuration.\n\n```js\n{\n  \"adventConfig\": {\n    \"year\": \"2016\",\n    \"nameTemplate\": \"day{{num}}.js\",\n    \"templateFile\": \"node_modules/advent-of-code/src/templates/day.js\"\n  }\n}\n```\n\n| `package.json` key          | CLI argument                     | Default                                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| --------------------------- | -------------------------------- | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `adventConfig.year`         | `-y, --year [year]`              | currentMonth === December ? currentYear : currentYear - 1 | When pulling input from adventofcode.com, this year will be used.                                                                                                                                                                                                                                                                                                                                                                      |\n| -                           | `-s, --session [cookie]`         | `process.env.ADVENT_SESSION`                              | The session cookie to use when making requests to adventofcode.com. You can get this by logging into adventofcode.com and inspecting the request in your devtools and see what your cookie value is. Should start with `session=`.                                                                                                                                                                                                     |\n| `adventConfig.nameTemplate` | `-n, --name-template [template]` | `'day{{num}}.js'`                                         | The filename template to use when running and creating new day files. Wherever `{{num}}` is in the string, it will be replaced with a two digit (leading `0`s) representation of the number will be input. So if the day is `1`, using the default template, the filename will be `day01.js`.                                                                                                                                          |\n| `adventConfig.templateFile` | `-t, --template-file [filepath]` | `'node_modules/advent-of-code/src/templates/day.js'`      | The template file to use when initializing a new day file. It is recommended that you have your own that fits your style. The only requirement is that you export 2 functions: `exports.part1` and `exports.part2`, or just `module.exports = { part1, part2 }`. You may also export an `options` object to configure how input is parsed. `options.noTrim` lets you choose whether or not the input gets trimmed. Default is `false`. |\n| -                           | `-f, --force`                    | `false`                                                   | A flag used if you want to override an existing file with the template when calling `advent init`                                                                                                                                                                                                                                                                                                                                      |\n\n# Usage\n\n## Display help\n\n```sh\nadvent help\n```\n\n## Initialize a day\n\n```sh\nadvent init <day>\n```\n\n### Options\n\n* `<day>` - The day to initialize. Will create a file using your `nameTemplate`\n  configuration. You can run `advent init <day>` again and it won't do anything\n  unless you pass the `--force` flag.\n* `--name-template [template]` - See configuration above\n* `--template-file [filepath]` - See configuration above\n* `--force` - See configuration above\n\n## Run a day's code\n\n```sh\n$ advent run <day> <part> <input>\n```\n\n### Options\n\n* `<day>` - The day to initialize. Will use the file in the configuration you\n  set for `nameTemplate`\n* `<part>` - The part to run. The day file should export a property called\n  `part1` and `part2`.\n* `<input>` - The input to give the function. If `-` is passed, stdin will be\n  used as the input. If `+` is passed, and you have a session set, then it will\n  pull the input from adventofcode.com, or the cached value once it pulls from\n  adventofcode.com the first time.\n* `--year [year]` - See configuration above\n* `--session [session]` - See configuration above\n* `--name-template [template]` - See configuration above\n\n# Notes\n\n* This module leverages the [debug](https://www.npmjs.com/package/debug) module.\n  Setting `DEBUG=advent` will print out debug information, such as when this\n  module is pulling from local cache, which days it's trying to run/initialize,\n  and so forth. When reporting bugs, please have the output from this handy so\n  that I can more quickly determine the issue.\n\n* One thing I liked to do with my local stuff was to store my answers locally\n  along with example inputs (from the descriptions). The goal for this project\n  was to make it easy for someone to upload their solutions to github, and\n  others could pull it down and have it work with their inputs, but if there is\n  interest in providing a \"test suite\" to test against example inputs and such,\n  then I will do so.\n\n# Disclaimer\n\nI am not affiliated with [adventofcode.com](http://adventofcode.com) or any of\ntheir sponsors, employees, pets, or anything relating to them. I am an active\nparticipant, and I wanted to make a tool to make it easier to setup and run\nadvent of code things. Please don't abuse adventofcode.com. This tool could be\nused to make a lot of automated requests to their site, which is why this tool\nleverages caching. If you find that you're making too many requests to\nadventofcode.com because of this module, please let me know so I can resolve any\nissues. If this module is used to abuse adventofcode.com, I will unpublish it\nfrom npm and remove this code from github.\n"}, {"author": "lisa", "repo": "lisa/adventofcode", "language": "Go", "language_all": {"Go": 190381, "Shell": 148}, "readme_contents": "# Advent of Code\n\nAdvent of Code adventures and solutions for [adventofcode.com](https://adventofcode.com/)\n"}, {"author": "joelgrus", "repo": "joelgrus/advent2017", "language": "Python", "language_all": {"Python": 73575}, "readme_contents": "# advent2017\n\nLivecoding my way through [Advent of Code 2017](http://adventofcode.com/)\n\nAll of the videos [are on YouTube](https://www.youtube.com/playlist?list=PLeDtc0GP5IClpoQ6ZnsIk8nzNHaoR76hh).\n"}, {"author": "Lokeh", "repo": "Lokeh/advent-2019", "language": "Clojure", "language_all": {"Clojure": 20812}, "readme_contents": "* Advent of Code 2019\n\nThe past two years of Advent of Code, I have used it as an opportunity to learn\nnew programming languages. The first one I did, I [[https://codeburst.io/25-days-of-reasonml-a4b20a7e8c6][learned ReasonML/OCaml]] and \nused the bucklescript toolchain. Last year, I attempted to do dual Clojure\n(which I already knew) and Rust solutions, but didn't get very far due to time.\n\nThis year I want to try something different. This year, I will be attempting\nAdvent of Code in a literate programming fashion using Clojure and Emacs' org-\nmode.\n\nThis means that I will be writing my Code within .org files alongside my\nthoughts and docs, evaluating code blocks and untangling them into the final\nsource.\n\nFor instance, this is a source block which I can run in a live CIDER session:\n\n#+begin_src clojure :results pp\n(+ 1 1)\n#+end_src\n\n#+RESULTS:\n: 2\n\n\nI can also pipe STDOUT to the results in org-mode as well:\n\n#+begin_src clojure :results output\n(prn *ns*)\n#+end_src\n\n#+RESULTS:\n: #namespace[user]\n"}, {"author": "thatlegoguy", "repo": "thatlegoguy/AoC2016", "language": null, "language_all": {}, "readme_contents": "# AoC2016\nAdvent of Code Solutions 2016\nAoC Solutions..in Excel!\nEnjoy!\n"}, {"author": "mikasjp", "repo": "mikasjp/adventofcode2017", "language": "Python", "language_all": {"Python": 30297, "C": 893}, "readme_contents": "# My [Advent of Code 2017](http://adventofcode.com/2017) solutions\nJust for practice and fun. Thank You [Eric](http://was.tl/)!\n\n---\n\n| Day     | Name                                                    | Python                         | C                            |\n|:-------:|:--------------------------------------------------------|:------------------------------:|:----------------------------:|\n| 01      | [Inverse Captcha][day01]                                | [:heavy_check_mark:][py01]     |                              |\n| 02      | [Corruption Checksum][day02]                            | [:heavy_check_mark:][py02]     |                              |\n| 03      | [Spiral Memory][day03]                                  | [:heavy_check_mark:][py03]     |                              |\n| 04      | [High-Entropy Passphrases][day04]                       | [:heavy_check_mark:][py04]     |                              |\n| 05      | [A Maze of Twisty Trampolines, All Alike][day05]        | [:heavy_check_mark:][py05]     |                              |\n| 06      | [Memory Reallocation][day06]                            | [:heavy_check_mark:][py06]     |                              |\n| 07      | [Recursive Circus][day07]                               | [:heavy_check_mark:][py07]     |                              |\n| 08      | [I Heard You Like Registers][day08]                     | [:heavy_check_mark:][py08]     |                              |\n| 09      | [Stream Processing][day09]                              | [:heavy_check_mark:][py09]     |                              |\n| 10      | [Knot Hash][day10]                                      | [:heavy_check_mark:][py10]     |                              |\n| 11      | [Hex Ed][day11]                                         | [:heavy_check_mark:][py11]     |                              |\n| 12      | [Digital Plumber][day12]                                | [:heavy_check_mark:][py12]     |                              |\n| 13      | [Packet Scanners][day13]                                | [:heavy_check_mark:][py13]     |                              |\n| 14      | [Disk Defragmentation][day14]                           | [:heavy_check_mark:][py14]     |                              |\n| 15      | [Dueling Generators][day15]                             | [:heavy_check_mark:][py15]     | [:heavy_check_mark:][c15]    |\n| 16      | [Permutation Promenade][day16]                          | [:heavy_check_mark:][py16]     |                              |\n| 17      | [Spinlock][day17]                                       | [:heavy_check_mark:][py17]     |                              |\n| 18      | [Duet][day18]                                           | [:heavy_check_mark:][py18]     |                              |\n| 19      | [A Series of Tubes][day19]                              | [:heavy_check_mark:][py19]     |                              |\n| 20      | [Particle Swarm][day20]                                 | [:heavy_check_mark:][py20]     |                              |\n| 21      | [Fractal Art][day21]                                    | [:heavy_check_mark:][py21]     |                              |\n| 22      | [Sporifica Virus][day22]                                | [:heavy_check_mark:][py22]     |                              |\n| 23      | [Coprocessor Conflagration][day23]                      | [:heavy_check_mark:][py23]     |                              |\n| 24      | [Electromagnetic Moat][day24]                           | [:heavy_check_mark:][py24]     |                              |\n| 25      | [The Halting Problem][day25]                            | [:heavy_check_mark:][py25]     |                              |\n\n[day01]: https://adventofcode.com/2017/day/1\n[day02]: https://adventofcode.com/2017/day/2\n[day03]: https://adventofcode.com/2017/day/3\n[day04]: https://adventofcode.com/2017/day/4\n[day05]: https://adventofcode.com/2017/day/5\n[day06]: https://adventofcode.com/2017/day/6\n[day07]: https://adventofcode.com/2017/day/7\n[day08]: https://adventofcode.com/2017/day/8\n[day09]: https://adventofcode.com/2017/day/9\n[day10]: https://adventofcode.com/2017/day/10\n[day11]: https://adventofcode.com/2017/day/11\n[day12]: https://adventofcode.com/2017/day/12\n[day13]: https://adventofcode.com/2017/day/13\n[day14]: https://adventofcode.com/2017/day/14\n[day15]: https://adventofcode.com/2017/day/15\n[day16]: https://adventofcode.com/2017/day/16\n[day17]: https://adventofcode.com/2017/day/17\n[day18]: https://adventofcode.com/2017/day/18\n[day19]: https://adventofcode.com/2017/day/19\n[day20]: https://adventofcode.com/2017/day/20\n[day21]: https://adventofcode.com/2017/day/21\n[day22]: https://adventofcode.com/2017/day/22\n[day23]: https://adventofcode.com/2017/day/23\n[day24]: https://adventofcode.com/2017/day/24\n[day25]: https://adventofcode.com/2017/day/25\n\n[py01]: ./01/solution.py\n[py02]: ./02/solution.py\n[py03]: ./03/solution.py\n[py04]: ./04/solution.py\n[py05]: ./05/solution.py\n[py06]: ./06/solution.py\n[py07]: ./07/solution.py\n[py08]: ./08/solution.py\n[py09]: ./09/solution.py\n[py10]: ./10/solution.py\n[py11]: ./11/solution.py\n[py12]: ./12/solution.py\n[py13]: ./13/solution.py\n[py14]: ./14/solution.py\n[py15]: ./15/solution.py\n[py16]: ./16/solution.py\n[py17]: ./17/solution.py\n[py18]: ./18/solution.py\n[py19]: ./19/solution.py\n[py20]: ./20/solution.py\n[py21]: ./21/solution.py\n[py22]: ./22/solution.py\n[py23]: ./23/solution.py\n[py24]: ./24/solution.py\n[py25]: ./25/solution.py\n\n[c15]: ./15/solution.c \n"}, {"author": "natemago", "repo": "natemago/adventofcode2016", "language": "Python", "language_all": {"Python": 93627, "Shell": 80}, "readme_contents": null}, {"author": "kodsnack", "repo": "kodsnack/advent_of_code_2019", "language": "Python", "language_all": {"Python": 156690, "Rust": 104235, "C++": 71484, "F#": 68551, "Nim": 30557, "Haskell": 25641, "Kotlin": 14600, "REXX": 13854, "OCaml": 12448, "Go": 11995, "C": 9751, "Swift": 8043, "C#": 2978, "JavaScript": 1750, "PowerShell": 866, "CMake": 659, "AppleScript": 493, "Shell": 255}, "readme_contents": "# Advent of code 2019\nContribute your solutions to [Advent of Code 2019](https://adventofcode.com) and be inspired by others.\n\nBidra med dina l\u00f6sningar p\u00e5 problemen i Advent of code, i vilket spr\u00e5k du vill. V\u00e4lj ett du kan, eller ett du vill l\u00e4ra dig! Vi har ocks\u00e5 en ledarbr\u00e4da (leaderboard) p\u00e5 Advent of code: koden till ledarbr\u00e4dan \u00e4r 194162-e06e748d.\n\nVi har ocks\u00e5 en Slackkanal dit alla \u00e4r v\u00e4lkomna att snacka Advent of code, eller egentligen allt mellan himmel och jord med lite koppling till kod. Maila info@kodsnack.se eller twittra din epost till @kodsnack s\u00e5 sl\u00e4pper vi in er.\n\nDina l\u00f6sningar f\u00e5r g\u00e4rna checkas in i en mapp med namn p\u00e5 formen #anv\u00e4ndarnamn-spr\u00e5k#, s\u00e5 blir det lite l\u00e4ttare f\u00f6r alla att f\u00e5 \u00f6verblick.\n\nL\u00f6sningarna kan komma att diskuteras i avsnitt av Kodsnack, s\u00e5 l\u00e4gg med en readme.md med en notis om du inte vill riskera att bli omn\u00e4mnd.\n"}, {"author": "kodsnack", "repo": "kodsnack/advent_of_code_2015", "language": "C#", "language_all": {"C#": 81750, "Haskell": 79080, "OCaml": 69300, "Python": 9654, "PHP": 9060, "Kotlin": 8722, "Elixir": 8472, "Swift": 8410, "Rust": 8364, "Java": 7720, "JavaScript": 7626, "Scala": 4448, "Prolog": 4284, "Pascal": 1594, "Shell": 85}, "readme_contents": "# advent_of_code_2015\nL\u00f6sningar p\u00e5 [Advent of code 2015](http://adventofcode.com) - en adventskalender med problem som kan l\u00f6sas i vilket programmeringsspr\u00e5k man vill.\n\nAlla \u00e4r varmt v\u00e4lkomna att diskutera, fr\u00e5ga, och g\u00f6ra pull requests med s\u00e5v\u00e4l l\u00f6sningar i nya spr\u00e5k som fler och andra l\u00f6sningar i de spr\u00e5k som redan finns representerade.\n"}, {"author": "jkoenig134", "repo": "jkoenig134/AdventOfCode-2019", "language": "Java", "language_all": {"Java": 15283, "Haskell": 8986, "Go": 8252, "Clojure": 7434, "JavaScript": 6474, "Scala": 2360, "Kotlin": 2327, "Batchfile": 932, "Shell": 709, "Smarty": 151}, "readme_contents": "# AdventOfCode-2019\n\nA repository of solutions for the [AdventOfCode](https://adventofcode.com/) challenges, implemented in different languages.\n\n## Use\n\nIn your terminal, run `solve <language> <day> <path-to-input-file>`. The following languages are available so far:\n\n-   Clojure\n-   Go\n-   Haskell\n-   Scala\n-   Java\n-   Kotlin\n-   NodeJS\n\nFor `day`, input `Day01`, `Day02` etc.\n\nThe input file is the one you receive from the challenge website. If no value is given, it is assumed to be located in `./input/<day>.txt`, where `<day>` is the second parameter.\n\n## How to contribute\n\n-   Click \"Fork\" in this repository and fork it into your account\n\n-   In your terminal, run `git clone https://github.com/<yourname>/AdventOfCode-2019.git`\n\n-   Choose your language and make a directory with its name - if there already is a directory for the language, name it differently (for example \"java2\" if \"java\" already exists)\n\n-   Place a \"run.bat\" and \"run.sh\" file in the newly created directory and write a script that takes the day that ought to be solved and the input file as a command parameter input and executes whatever action is required to run your solutions. For example, this is what this script for java might look like (batch):\n\n```java\n:: %1 is the first argument, e.g. \"Day01\"\nset file_name=%1.java\n:: compile the code\njavac %file_name%\n:: run the code - %2 is the input file\njava %1 %2\n```\n\n-   Add a readme to your directory depicting the requirements to run your script.\n\n-   Write your script in a way that is compatible with the naming convention (\"Day01\", \"Day02\", ...)\n\n-   To keep it structured, use a different file for each day.\n\n-   Open a Pull Request whenever you want; make sure [your fork is up to date](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork)\n"}, {"author": "juliendelplanque", "repo": "juliendelplanque/AdventOfCode2017WithPharo", "language": null, "language_all": {}, "readme_contents": "# Advent Of Code 2017 with Pharo\nThe repository in which Pharo community will store their solutions to the [Advent of Code 2017'](http://adventofcode.com)s programming puzzles.\n\nThe main goal is to centralize solutions of Pharo community for learning purpose. People will then be able to check how AOC puzzles can be solved in Pharo with different styles.\n\nAnother goal of this repository is to get a feedback on Pharo's Collection framework. If you find a missing method in one of the Pharo's collection during the implementation of a solution, please say it in your solution file\n\n## How to participate\n1. Fork this repository\n2. Create a directory named according to your name (for example mine is `juliendelplanque`)\n3. You can use this directory to store your puzzles solutions. \n4. Each time you solved a puzzle, commit your solution's markdown file into your personal fork of this repository and create a pull request.\n\n### Pharo version\nIf you participate, please use Pharo 6.1 that you can get using the following command:\n```\nwget -O- get.pharo.org/61+vm | bash\n```\n\nOnce the download is complete, launch Pharo using:\n```\n./pharo Pharo.image\n```\n\n### Structure of a solution\nThe solutions to AOC puzzles will take the form of Markdowns files. For each solution, use the `template.md` file as a basis.\n\nAn example of solution (which is a solution of AOC 2016 first puzzle) is available at `example/aoc2016-1.md`. Your solutions should be formatted similarly.\n\n"}, {"author": "albertobastos", "repo": "albertobastos/advent-of-code-2018-nodejs", "language": "JavaScript", "language_all": {"JavaScript": 65478}, "readme_contents": "# Advent of Code 2018  Node.js\nNode.js solutions for [Advent of Code 2018](https://adventofcode.com/2018)\n\n# How to run\nExecute each example using \"npm run day XX\" at the root folder.\n\n# Example\n$ npm run day XX\n\n```\nRunning day at ./src/d02.js...\n\nAnswer (part II): answer_for_part_II\nAnswer (part I): answer_for_part_I\nd02: 24.605ms\n```"}, {"author": "narnolddd", "repo": "narnolddd/adventOfCode", "language": "Python", "language_all": {"Python": 125649, "Go": 118011, "Rust": 82411, "Scala": 20775, "C": 1634, "Shell": 791, "Smarty": 166}, "readme_contents": "# adventOfCode\n"}, {"author": "hsz", "repo": "hsz/AdventOfCode2015", "language": "JavaScript", "language_all": {"JavaScript": 12925, "PHP": 4973, "Perl": 1783, "Python": 951}, "readme_contents": "Advent of Code 2015 <sub>hsz 36<sup>:star:</sup></sub>\n=================================================\n\nHere are presented my solutions for the [Advent of Code](http://adventofcode.com/2015) programming puzzles.\n\nFor every day I present the solutions in various languages: `NodeJS`,`PHP`, `Python` and `Perl`.\n\nTo run specified solution, just call:\n\n    npm run TYPE DAY\n    \nwhere `TYPE` is the type of the solution and `DAY` is numeric value in range `1-25`, i.e:\n\n    npm run node 3\n\nAvailable types are the language's name in the lowercase:\n\n- `nodejs`\n- `php`\n- `python`\n- `perl`\n\n\nBelow there is a quick list of all available solutions:\n\n \n| Day | Name                                        | NodeJS                     | PHP                         | Python                        | Perl                       |\n|:---:| ------------------------------------------- |:--------------------------:|:---------------------------:|:-----------------------------:|:--------------------------:|\n| 01  | [Not Quite Lisp][1]                         | [:star:](./day01/index.js) | [:star:](./day01/index.php) | [:star:](./day01/__init__.py) | [:star:](./day01/index.pl) |\n| 02  | [I Was Told There Would Be No Math][2]      | [:star:](./day02/index.js) | [:star:](./day02/index.php) |                               | [:star:](./day02/index.pl) |\n| 03  | [Perfectly Spherical Houses in a Vacuum][3] | [:star:](./day03/index.js) | [:star:](./day03/index.php) |                               |                            |\n| 04  | [The Ideal Stocking Stuffer][4]             | [:star:](./day04/index.js) | [:star:](./day04/index.php) |                               |                            |\n| 05  | [Doesn't He Have Intern-Elves For This?][5] | [:star:](./day05/index.js) | [:star:](./day05/index.php) |                               |                            |\n| 06  | [Probably a Fire Hazard][6]                 | [:star:](./day06/index.js) | [:star:](./day06/index.php) |                               |                            |\n| 07  | [Some Assembly Required][7]                 | [:star:](./day07/index.js) | [:star:](./day07/index.php) |                               |                            |\n| 08  | [Matchsticks][8]                            | [:star:](./day08/index.js) |                             |                               | [:star:](./day08/index.pl) |\n| 09  | [All in a Single Night][9]                  | [:star:](./day09/index.js) |                             |                               |                            |\n| 10  | [Elves Look, Elves Say][10]                 | [:star:](./day10/index.js) |                             |                               |                            |\n| 11  | [Corporate Policy][11]                      | [:star:](./day11/index.js) |                             |                               | [:star:](./day11/index.pl) |\n| 12  | [JSAbacusFramework.io][12]                  | [:star:](./day12/index.js) |                             |                               |                            |\n| 13  | [Knights of the Dinner Table][13]           | [:star:](./day13/index.js) |                             |                               |                            |\n| 14  | [Reindeer Olympics][14]                     | [:star:](./day14/index.js) |                             |                               |                            |\n| 15  | [Science for Hungry People][15]             | [:star:](./day15/index.js) |                             |                               |                            |\n| 16  | [Aunt Sue][16]                              | [:star:](./day16/index.js) |                             |                               |                            |\n| 17  | [No Such Thing as Too Much][17]             | [:star:](./day17/index.js) |                             |                               |                            |\n| 18  | [Like a GIF For Your Yard][17]              | [:star:](./day18/index.js) |                             |                               |                            |\n\n[1]: http://adventofcode.com/2015/day/1\n[2]: http://adventofcode.com/2015/day/2\n[3]: http://adventofcode.com/2015/day/3\n[4]: http://adventofcode.com/2015/day/4\n[5]: http://adventofcode.com/2015/day/5\n[6]: http://adventofcode.com/2015/day/6\n[7]: http://adventofcode.com/2015/day/7\n[8]: http://adventofcode.com/2015/day/8\n[9]: http://adventofcode.com/2015/day/9\n[10]: http://adventofcode.com/2015/day/10\n[11]: http://adventofcode.com/2015/day/11\n[12]: http://adventofcode.com/2015/day/12\n[13]: http://adventofcode.com/2015/day/13\n[14]: http://adventofcode.com/2015/day/14\n[15]: http://adventofcode.com/2015/day/15\n[16]: http://adventofcode.com/2015/day/16\n[17]: http://adventofcode.com/2015/day/17\n[18]: http://adventofcode.com/2015/day/18\n"}, {"author": "unleashed-coding", "repo": "unleashed-coding/advent-of-code", "language": "Ruby", "language_all": {"Ruby": 6418, "Haskell": 6307, "Python": 5033, "Rust": 2800, "Idris": 645, "C": 344}, "readme_contents": "# Solving puzzles from [Advent of Code](http://adventofcode.com)\n\nClick [here](https://github.com/unleashed-coding/advent-of-code/blob/master/CONTRIBUTING.md) to see how to contribute.\n"}, {"author": "liuyubobobo", "repo": "liuyubobobo/Play-Advent-of-Code", "language": "C++", "language_all": {"C++": 128524, "CMake": 7467, "Java": 5913}, "readme_contents": "## My solutions to Advent of Code\n\nI will put my solutions to [Advent of Code](http://adventofcode.com/) in this repo. Every problem will be solved in C++; part of the problems will be solved in Java and Python or other languages also. I will try my best to support more language in the future :)\n\nPlease feel free to contact me if you have any problems with this repo:)\n\nemail: [liuyubobobo@gmail.com](mailto:liuyubobobo@gmail.com)\n\n---\n\n\u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u8054\u7cfb\u6211\uff1a\uff09\n\n**\u4e2a\u4eba\u7f51\u7ad9**\uff1a[liuyubobobo.com](http://liuyubobobo.com)\n\n**\u7535\u5b50\u90ae\u4ef6**\uff1a[liuyubobobo@gmail.com](mailto:liuyubobobo@gmail.com)\n\n**\u5fae\u535a**: [\u5218\u5b87\u6ce2bobo http://weibo.com/liuyubobobo](http://weibo.com/liuyubobobo)\n\n**\u77e5\u4e4e**: [\u5218\u5b87\u6ce2 http://www.zhihu.com/people/liuyubobobo](http://www.zhihu.com/people/liuyubobobo)\n\n**\u77e5\u4e4e\u4e13\u680f\uff1a**[\u662f\u4e0d\u662f\u5f88\u9177 https://zhuanlan.zhihu.com/liuyubobobo](https://zhuanlan.zhihu.com/liuyubobobo)\n\n**\u4e2a\u4eba\u516c\u4f17\u53f7\uff1a\u662f\u4e0d\u662f\u5f88\u9177**\uff1a\uff09\n\n![QRCode](qrcode.jpg)\n\n---\n\n| Year | Codes | Status \n| --- | :---: | :---: |\n| **Advent of Code 2018** | [codes](2018/) | in Progresssing |\n| **Advent of Code 2017** | [codes](2017/) | Completed |\n| **Advent of Code 2017** | [codes](2016/) | in Progressing |\n| **Advent of Code 2017** | codes | Not Started |\n"}, {"author": "rrdelaney", "repo": "rrdelaney/advent-of-code-2017", "language": "OCaml", "language_all": {"OCaml": 12288, "C++": 924}, "readme_contents": "# Advent of Code 2017\n\n> Solutions for the [Advent of Code 2017](http://adventofcode.com/2017) written\n> in native Reason\n\nEach day has a solution file (`<day>.re`) and a test file (`<day>_test.re`). To\nrun all the tests run\n\n```\n$ jbuilder runtest\n```\n\nAnd for a specific day use\n\n```\n$ jbuilder runtest <day>\n```\n\nTo set up a watcher while writing code use\n[Watchman](https://facebook.github.io/watchman)\n\n```\n$ watchman-make -p \"*.re\" --run \"jbuilder runtest\"\n```\n"}, {"author": "aturley", "repo": "aturley/advent-of-code-2018", "language": "Pony", "language_all": {"Pony": 56208}, "readme_contents": "# Advent of Code 2018\n\nThis is a repository of my solutions to\nthe [2018 Advent of Code](https://adventofcode.com/2018/) problems. I\nwill be doing these in [Pony](https://ponylang.io).\n\n## About the Code\n\nI created [some helper code](https://github.com/aturley/aoc-tools)\nbased on my experience with last year's AoC. My solutions to this\nyears problems will probably all use this library.\n\n## Building the Solution\n\nEach day's solution lives in a directory that is named for the day\n(`day1`, `day2`, etc). You will need to have\nthe [Pony compiler](https://github.com/ponylang/ponyc)\nand [Stable](https://github.com/ponylang/pony-stable) (the Pony dependency\nmanager installed) in order to build the solutions. To build a\nsolution, go into its directory and run the following commands:\n\n```\nstable fetch\nstable env ponyc\n```\n\nThis will create an executable with the same name as the directory\nthat you are in.\n\n## Running the Solution\n\nThe solution executables take two arguments:\n\n1. the name of the input file\n2. the part that you want to run (`1` or `2`)\n\nFor example, if you wanted to run part 2 of the day 7 solution on the\nfile `ex7-4.txt` you would run the following command:\n\n```\n./day7 ex7-4.txt 2\n```\n"}]