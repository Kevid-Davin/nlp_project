[{"repo": "mfikes/advent-of-code", "language": "Clojure", "readme_contents": "# Advent of Code\n\n[Advent of Code](http://adventofcode.com) in Clojure and Self-Hosted ClojureScript.\n\n## Clojure\n\n```\nclj\n```\n\n## Self-Hosted ClojureScript\n\n```\nplk\n```\n"}, {"repo": "dlew/aoc-2017", "language": "Kotlin", "readme_contents": "# Advent of Code 2017\n\nHere's a blank template for working on the [Advent of Code (2017)](http://adventofcode.com/2017). It's got all the\ntests you could possibly want with the answers obscured. Just work your way through the puzzles until all the tests\npass!\n\nYou can find the puzzle questions [here](http://adventofcode.com/2017).\n\nYou can find my answers [here](https://github.com/dlew/aoc-2017/tree/answers). I make no claim to them being any good,\nonly that they arrive at the correct answer.\n\n[@danlew42](https://twitter.com/danlew42)\n"}, {"repo": "mstksg/advent-of-code-2017", "language": "Haskell", "readme_contents": "Advent of Code 2017\n===================\n\n*[2016][]* / *2017* / *[2018][]* / *[2019][]*\n\n[2016]: https://github.com/mstksg/advent-of-code-2016\n[2018]: https://github.com/mstksg/advent-of-code-2018\n[2019]: https://github.com/mstksg/advent-of-code-2019\n\n**Warning: Spoilers**\n\n[Reflections and Benchmarks][RnB]\n---------------------------------\n\n[RnB]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md\n\nI try to reflect on every day's puzzle, attempting to describe my thought\nprocesses and how my solutions all work.  Benchmarks also included.\n\n*   **[Day 1 Reflections][d1r]** *([code][d1c])* *([benchmarks][d1b])*\n*   **[Day 2 Reflections][d2r]** *([code][d2c])* *([benchmarks][d2b])*\n*   **[Day 3 Reflections][d3r]** *([code][d3c])* *([benchmarks][d3b])*\n*   **[Day 4 Reflections][d4r]** *([code][d4c])* *([benchmarks][d4b])*\n*   **[Day 5 Reflections][d5r]** *([code][d5c])* *([benchmarks][d5b])*\n*   **[Day 6 Reflections][d6r]** *([code][d6c])* *([benchmarks][d6b])*\n*   **[Day 7 Reflections][d7r]** *([code][d7c])* *([benchmarks][d7b])*\n*   **[Day 8 Reflections][d8r]** *([code][d8c])* *([benchmarks][d8b])*\n*   **[Day 9 Reflections][d9r]** *([code][d9c])* *([benchmarks][d9b])* *([stream][d9s])*\n*   **[Day 10 Reflections][d10r]** *([code][d10c])* *([benchmarks][d10b])* *([stream][d10s])*\n*   **[Day 11 Reflections][d11r]** *([code][d11c])* *([benchmarks][d11b])*\n*   **[Day 12 Reflections][d12r]** *([code][d12c])* *([benchmarks][d12b])*\n*   **[Day 13 Reflections][d13r]** *([code][d13c])* *([benchmarks][d13b])*\n*   **[Day 14 Reflections][d14r]** *([code][d14c])* *([benchmarks][d14b])*\n*   **[Day 15 Reflections][d15r]** *([code][d15c])* *([benchmarks][d15b])*\n*   **[Day 16 Reflections][d16r]** *([code][d16c])* *([benchmarks][d16b])*\n*   **[Day 17 Reflections][d17r]** *([code][d17c])* *([benchmarks][d17b])*\n*   **Day 18 Reflections** *([code][d18c])* *([benchmarks][d18b])*\n*   **[Day 19 Reflections][d19r]** *([code][d19c])* *([benchmarks][d19b])*\n*   **Day 20 Reflections** *([code][d20c])* *([benchmarks][d20b])*\n*   **Day 21 Reflections** *([code][d21c])* *([benchmarks][d21b])*\n*   **Day 22 Reflections** *([code][d22c])* *([benchmarks][d22b])*\n*   **Day 23 Reflections** *([code][d23c])* *([benchmarks][d23b])*\n*   **Day 24 Reflections** *([code][d24c])* *([benchmarks][d24b])*\n*   **Day 25 Reflections** *([code][d25c])* *([benchmarks][d25b])*\n\n[d1r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-1\n[d2r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-2\n[d3r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-3\n[d4r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-4\n[d5r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-5\n[d6r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-6\n[d7r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-7\n[d8r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-8\n[d9r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-9\n[d10r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-10\n[d11r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-11\n[d12r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-12\n[d13r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-13\n[d14r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-14\n[d15r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-15\n[d16r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-16\n[d17r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-17\n[d18r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-18\n[d19r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-19\n[d20r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-20\n[d21r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-21\n[d22r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-22\n[d23r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-23\n[d24r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-24\n[d25r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-25\n\n[d1c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day01.hs\n[d2c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day02.hs\n[d3c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day03.hs\n[d4c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day04.hs\n[d5c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day05.hs\n[d6c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day06.hs\n[d7c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day07.hs\n[d8c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day08.hs\n[d9c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day09.hs\n[d10c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day10.hs\n[d11c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day11.hs\n[d12c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day12.hs\n[d13c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day13.hs\n[d14c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day14.hs\n[d15c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day15.hs\n[d16c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day16.hs\n[d17c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day17.hs\n[d18c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day18.hs\n[d19c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day19.hs\n[d20c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day20.hs\n[d21c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day21.hs\n[d22c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day22.hs\n[d23c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day23.hs\n[d24c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day24.hs\n[d25c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day25.hs\n\n[d1b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-1-benchmarks\n[d2b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-2-benchmarks\n[d3b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-3-benchmarks\n[d4b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-4-benchmarks\n[d5b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-5-benchmarks\n[d6b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-6-benchmarks\n[d7b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-7-benchmarks\n[d8b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-8-benchmarks\n[d9b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-9-benchmarks\n[d10b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-10-benchmarks\n[d11b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-11-benchmarks\n[d12b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-12-benchmarks\n[d13b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-13-benchmarks\n[d14b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-14-benchmarks\n[d15b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-15-benchmarks\n[d16b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-16-benchmarks\n[d17b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-17-benchmarks\n[d18b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-18-benchmarks\n[d19b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-19-benchmarks\n[d20b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-20-benchmarks\n[d21b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-21-benchmarks\n[d22b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-22-benchmarks\n[d23b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-23-benchmarks\n[d24b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-24-benchmarks\n[d25b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-25-benchmarks\n\n[d9s]: https://www.twitch.tv/videos/207969022\n[d10s]: https://www.twitch.tv/videos/208287550\n\nExecutable\n----------\n\nComes with test examples given in problems.\n\nYou can install using `stack`:\n\n```bash\n$ git clone https://github.com/mstksg/advent-of-code-2017\n$ cd advent-of-code-2017\n$ stack setup\n$ stack install\n```\n\nThe executable `aoc2017` includes a testing and benchmark suite\n\n```\n$ aoc2017 --help\naoc2017 - Advent of Code 2017 challenge runner\n\nUsage: aoc2017 DAY [PART] [-t|--tests] [-b|--bench]\n  Run challenges from Advent of Code 2017\n\nAvailable options:\n  DAY                      Day of challenge (1 - 25), or \"all\"\n  PART                     Challenge part (a, b, c, etc.)\n  -t,--tests               Run sample tests\n  -b,--bench               Run benchmarks\n  -h,--help                Show this help text\n\n$ aoc2017 5 b\n>> Day 05b\n>> [\u2713] 27720699\n```\n\nBenchmarking is implemented using *criterion*\n\n```\n$ aoc2017 2 --bench\n>> Day 02a\nbenchmarking...\ntime                 729.1 \u03bcs   (695.0 \u03bcs .. 784.2 \u03bcs)\n                     0.967 R\u00b2   (0.926 R\u00b2 .. 0.995 R\u00b2)\nmean                 740.4 \u03bcs   (711.9 \u03bcs .. 783.6 \u03bcs)\nstd dev              116.8 \u03bcs   (70.44 \u03bcs .. 172.8 \u03bcs)\nvariance introduced by outliers: 89% (severely inflated)\n\n>> Day 02b\nbenchmarking...\ntime                 782.4 \u03bcs   (761.3 \u03bcs .. 812.9 \u03bcs)\n                     0.983 R\u00b2   (0.966 R\u00b2 .. 0.998 R\u00b2)\nmean                 786.7 \u03bcs   (764.1 \u03bcs .. 849.4 \u03bcs)\nstd dev              110.8 \u03bcs   (42.44 \u03bcs .. 228.5 \u03bcs)\nvariance introduced by outliers: 86% (severely inflated)\n```\n\nTest suites run the example problems given in the puzzle description, and\noutputs are colorized in ANSI terminals.\n\n```\n$ aoc2017 1 --tests\n[9] [!35732] $ aoc2017 1 --tests\n>> Day 01a\n[\u2713] (3)\n[\u2713] (4)\n[\u2713] (0)\n[\u2713] (9)\n[\u2713] Passed 4 out of 4 test(s)\n[\u2713] 1097\n>> Day 01b\n[\u2713] (6)\n[\u2713] (0)\n[\u2713] (4)\n[\u2713] (12)\n[\u2713] (4)\n[\u2713] Passed 5 out of 5 test(s)\n[\u2713] 1188\n```\n\nThis should only work if you're running `aoc2017` in the project directory.\n\n**To run on actual inputs**, the executable expects inputs to be found in the\nfolder `data/XX.txt` in the directory you are running in.  That is, the input\nfor Day 7 will be expected at `data/07.txt`.\n\n*aoc2017 will download missing input files*, but requires a session token.\nThis can be provided in `aoc2017-conf.yaml`:\n\n```yaml\nsession:  [[ session token goes here ]]\n```\n\nYou can \"lock in\" your current answers (telling the executable that those are\nthe correct answers) by passing in `--lock`.  This will lock in any final\npuzzle solutions encountered as the verified official answers.  Later, if you\nedit or modify your solutions, they will be checked on the locked-in answers.\n\nThese are store in `data/ans/XXpart.txt`.  That is, the target output for Day 7\n(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually\nedit these files.\n\n"}, {"repo": "kodsnack/advent_of_code_2017", "language": "Python", "readme_contents": "# Advent of code 2017 #\nBidra med dina l\u00f6sningar p\u00e5 problemen i [Advent of code](http://adventofcode.com/), i vilket spr\u00e5k du vill. V\u00e4lj ett du kan, eller ett du vill l\u00e4ra dig!\n\nSe till att du g\u00e5r med i advent of code's topplista om du vill ha en chans att vinna kodsnack's t\u00e4vling. V\u00e5rat topplista har ID: `194162-e06e748d`. Det finns \u00e4ven en slack kanal f\u00f6r alla som \u00e4r med. Maila info@kodsnack.se eller twittra din epost till @kodsnack s\u00e5 sl\u00e4pper vi in er.\n\nDe f\u00f6rsta problemen kommer f\u00f6rsta december, de sista den tjugofemte, och vi delar ut ett pris till den eller de som dels har h\u00f6gst po\u00e4ng p\u00e5 den leaderboard vi kommer att skapa, dels bidragit med alla sin l\u00f6sningar h\u00e4r. Som f\u00f6rra \u00e5ret \u00e4r det tv\u00e5 delproblem f\u00f6r varje dag. Samtliga 50 problem ska allts\u00e5 finnas med i en komplett l\u00f6sning. Det \u00e4r givetvis fritt fram att bidra med l\u00f6sningar f\u00f6r s\u00e5 m\u00e5nga eller f\u00e5 problem man har tid och lust med, t\u00e4vlingsmomentet \u00e4r inte det viktiga h\u00e4r!\n\nDina l\u00f6sningar f\u00e5r g\u00e4rna checkas in i en mapp med namn p\u00e5 formen #anv\u00e4ndarnamn-spr\u00e5k#, s\u00e5 blir det lite l\u00e4ttare f\u00f6r alla att f\u00e5 \u00f6verblick.\n\nL\u00f6sningarna kan komma att diskuteras i avsnitt av Kodsnack, s\u00e5 l\u00e4gg med en readme.md med en notis om du inte vill riskera att bli omn\u00e4mnd.\n"}, {"repo": "Diggsey/aoc2018", "language": "Rust", "readme_contents": null}, {"repo": "mstksg/advent-of-code-2019", "language": "Haskell", "readme_contents": "Advent of Code 2019\n=====================\n\n<!--\nThis file generated by the build script at ./Build.hs\n-->\n\n*[2016][]* / *[2017][]* / *[2018][]* / *2019*\n\n[2016]: https://github.com/mstksg/advent-of-code-2016\n[2017]: https://github.com/mstksg/advent-of-code-2017\n[2018]: https://github.com/mstksg/advent-of-code-2018\n\nIt's the most wonderful time of the year!\n\nMy [Advent of Code 2019][aoc] Haskell solutions here, along with an automated\nfetching, testing, running environment (powered by the\n*[advent-of-code-api][]* library).  The interactive development environment and\nrunner/bench marker/viewer/tester has been pulled out [here][dev], so this is\nimplemented as \"fork\" of it with my own solutions and reflections.\n\nCheck out the [reflections][] (with [rss feed][rss]) and [package\nhaddocks][haddock] --- more info below!\n\n[aoc]: https://adventofcode.com/2019\n[haddock]: https://mstksg.github.io/advent-of-code-2019/\n[advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api\n[dev]: https://github.com/mstksg/advent-of-code-dev\n\n[Reflections and Benchmarks][reflections]\n-----------------------------------------\n\n[Available as RSS Feed][rss]\n\n[rss]: http://feeds.feedburner.com/jle-advent-of-code-2019\n\n| Challenge | Reflections | Code      | Rendered   | Benchmarks |\n| --------- | ----------- | --------- | ---------- | ---------- |\n| Day  1    | [x][d01r]   | [x][d01g] | [x][d01h]  | [x][d01b]  |\n| Day  2    | [x][d02r]   | [x][d02g] | [x][d02h]  | [x][d02b]  |\n| Day  3    | [x][d03r]   | [x][d03g] | [x][d03h]  | [x][d03b]  |\n| Day  4    | [x][d04r]   | [x][d04g] | [x][d04h]  | [x][d04b]  |\n| Day  5    |             |           |            |            |\n| Day  6    | [x][d06r]   | [x][d06g] | [x][d06h]  | [x][d06b]  |\n| Day  7    |             |           |            |            |\n| Day  8    | [x][d08r]   | [x][d08g] | [x][d08h]  | [x][d08b]  |\n| Day  9    |             |           |            |            |\n| Day 10    | [x][d10r]   | [x][d10g] | [x][d10h]  | [x][d10b]  |\n| Day 11    |             |           |            |            |\n| Day 12    |             |           |            |            |\n| Day 13    |             |           |            |            |\n| Day 14    |             |           |            |            |\n| Day 15    |             |           |            |            |\n| Day 16    |             |           |            |            |\n| Day 17    |             |           |            |            |\n| Day 18    |             |           |            |            |\n| Day 19    |             |           |            |            |\n| Day 20    |             |           |            |            |\n| Day 21    |             |           |            |            |\n| Day 22    |             |           |            |            |\n| Day 23    |             |           |            |            |\n| Day 24    |             |           |            |            |\n| Day 25    |             |           |            |            |\n\n\"Rendered\" links go to haddock source renders for code, with reflections in the\ndocumentation.  Haddock source renders have hyperlinked identifiers,\nso you can follow any unrecognized identifiers to see where I have defined them\nin the library.\n\n[reflections]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md\n\n### `:~>` type\n\nIf you're looking at my actual github solutions, you'll notice that this year\nI'm implementing my solutions in terms of a `:~>` record type:\n\n```haskell\ndata a :~> b = MkSol\n    { sParse :: String -> Maybe a    -- ^ parse input into an `a`\n    , sSolve :: a      -> Maybe b    -- ^ solve an `a` input to a `b` solution\n    , sShow  :: b      -> String     -- ^ print out the `b` solution for submission\n    }\n```\n\nAn `a :~> b` is a solution to a challenge expecting input of type `a` and\nproducing answers of type `b`.  It also packs in functions to parse a `String`\ninto an `a`, and functions to show a `b` as a `String` to submit as an answer.\n\nThis helps me mentally separate out parsing, solving, and showing, allowing for\nsome cleaner code and an easier time planning my solution.\n\nSuch a challenge can be \"run\" on string inputs by feeding the string into\n`sParse`, then `sSolve`, then `sShow`:\n\n```haskell\n-- | Run a ':~>' on some input, retuning 'Maybe'\nrunSolution :: Challenge -> String -> Maybe String\nrunSolution MkSol{..} s = do\n    x <- sParse s\n    y <- sSolve x\n    pure (sShow y)\n```\n\nIn the actual library, I have `runSolution` return an `Either` so I can debug\nwhich stage the error happened in.\n\nYou might also notice the function `dyno_`, used like `dyno_ \"limit\" 10000`.  This\nis how I implement parameters in problems that vary between test data and\nactual input.  For example, Day 6 involved finding points that had a total\ndistance of less than 10000, but for the test input, we found the points that\nhad a total distance of less than 32.  So, I have a system that lets me write\n`dyno_ \"limit\" 10000` in my code instead of hard-coding in `10000`.  This\n`10000` would be replaced by `32` when running with test data (which is parsed\nfrom [this file][7btest])\n\n[7btest]: https://github.com/mstksg/advent-of-code-2018/blob/master/test-data/06b.txt\n\nInteractive\n-----------\n\nThe *[AOC.Run.Interactive][interactive]* module has code (powered by\n*[advent-of-code-api][]*) for testing your solutions and submitting within\nGHCI, so you don't have to re-compile. If you edit your solution programs, they\nare automatically updated when you hit `:r` in ghci.\n\n[interactive]: https://mstksg.github.io/advent-of-code-2019/AOC2019-Run-Interactive.html\n\n```haskell\nghci> execSolution_   $ solSpec 'day02a   -- get answer for challenge based on solution\nghci> testSolution_   $ solSpec 'day02a   -- run solution against test suite\nghci> viewPrompt_     $ solSpec 'day02a   -- view the prompt for a part\nghci> waitForPrompt_  $ solSpec 'day02a   -- count down to the prompt for a part\nghci> submitSolution_ $ solSpec 'day02a   -- submit a solution\n```\n\nThese are loaded with session key stored in the configuration file (see next\nsection).\n\nExecutable\n----------\n\nComes with test examples given in problems.\n\nYou can install using `stack`:\n\n```bash\n$ git clone https://github.com/mstksg/advent-of-code-2019\n$ cd advent-of-code-2019\n$ stack setup\n$ stack install\n```\n\nThe executable `aoc2019` includes a testing and benchmark suite, as well as a\nway to view prompts within the command line:\n\n```\n$ aoc2019 --help\naoc2019 - Advent of Code 2019 challenge runner\n\nUsage: aoc2019 [-c|--config PATH] COMMAND\n  Run challenges from Advent of Code 2019. Available days: 1, 2, 3 (..)\n\nAvailable options:\n  -c,--config PATH         Path to configuration file (default: aoc-conf.yaml)\n  -h,--help                Show this help text\n\nAvailable commands:\n  run                      Run, test, and benchmark challenges\n  view                     View a prompt for a given challenge\n  submit                   Test and submit answers for challenges\n  test                     Alias for run --test\n  bench                    Alias for run --bench\n  countdown                Alias for view --countdown\n\n$ aoc2019 run 3 b\n>> Day 03b\n>> [\u2713] 243\n```\n\nYou can supply input via stdin with `--stdin`:\n\n```\n$ aoc2019 run 1 --stdin\n>> Day 01a\n+1\n+2\n+1\n-3\n<Ctrl+D>\n[?] 1\n>> Day 01b\n[?] 1\n```\n\nBenchmarking is implemented using *criterion*\n\n```\n$ aoc2019 bench 2\n>> Day 02a\nbenchmarking...\ntime                 1.317 ms   (1.271 ms .. 1.392 ms)\n                     0.982 R\u00b2   (0.966 R\u00b2 .. 0.999 R\u00b2)\nmean                 1.324 ms   (1.298 ms .. 1.373 ms)\nstd dev              115.5 \u03bcs   (77.34 \u03bcs .. 189.0 \u03bcs)\nvariance introduced by outliers: 65% (severely inflated)\n\n>> Day 02b\nbenchmarking...\ntime                 69.61 ms   (68.29 ms .. 72.09 ms)\n                     0.998 R\u00b2   (0.996 R\u00b2 .. 1.000 R\u00b2)\nmean                 69.08 ms   (68.47 ms .. 69.99 ms)\nstd dev              1.327 ms   (840.8 \u03bcs .. 1.835 ms)\n```\n\nTest suites run the example problems given in the puzzle description, and\noutputs are colorized in ANSI terminals.\n\n```\n$ aoc2019 test 1\n>> Day 01a\n[\u2713] (3)\n[\u2713] (3)\n[\u2713] (0)\n[\u2713] (-6)\n[\u2713] Passed 4 out of 4 test(s)\n[\u2713] 416\n>> Day 01b\n[\u2713] (2)\n[\u2713] (0)\n[\u2713] (10)\n[\u2713] (5)\n[\u2713] (14)\n[\u2713] Passed 5 out of 5 test(s)\n[\u2713] 56752\n```\n\nThis should only work if you're running `aoc2019` in the project directory.\n\n**To run on actual inputs**, the executable expects inputs to be found in the\nfolder `data/XX.txt` in the directory you are running in.  That is, the input\nfor Day 7 will be expected at `data/07.txt`.\n\n*aoc2019 will download missing input files*, but requires a session token.\nThis can be provided in `aoc-conf.yaml`:\n\n```yaml\nsession:  [[ session token goes here ]]\n```\n\nSession keys are also required to download \"Part 2\" prompts for each challenge.\n\nYou can \"lock in\" your current answers (telling the executable that those are\nthe correct answers) by passing in `--lock`.  This will lock in any final\npuzzle solutions encountered as the verified official answers.  Later, if you\nedit or modify your solutions, they will be checked on the locked-in answers.\n\nThese are stored in `data/ans/XXpart.txt`.  That is, the target output for Day 7\n(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually\nedit these files.\n\nYou can view prompts: (use `--countdown` to count down until a prompt is\nreleased, and display immediately)\n\n```\n$ aoc2019 view 3 b\n>> Day 03b\n--- Part Two ---\n----------------\n\nAmidst the chaos, you notice that exactly one claim doesn't overlap by\neven a single square inch of fabric with any other claim. If you can\nsomehow draw attention to it, maybe the Elves will be able to make\nSanta's suit after all!\n\nFor example, in the claims above, only claim `3` is intact after all\nclaims are made.\n\n*What is the ID of the only claim that doesn't overlap?*\n```\n\nYou can also submit answers:\n\n```\n$ aoc2019 submit 1 a\n```\n\nSubmissions will automatically run the test suite.  If any tests fail, you will\nbe asked to confirm submission or else abort.  The submit command will output\nthe result of your submission: The message from the AoC website, and whether or\nnot your answer was correct (or invalid or ignored).  Answers that are\nconfirmed correct will be locked in and saved for future testing against, in\ncase you change your solution.\n\nAll networking features are powered by *[advent-of-code-api][]*.\n\n[d01g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day01.hs\n[d01h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day01.html\n[d01r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-1\n[d01b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-1-benchmarks\n[d02g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day02.hs\n[d02h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day02.html\n[d02r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-2\n[d02b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-2-benchmarks\n[d03g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day03.hs\n[d03h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day03.html\n[d03r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-3\n[d03b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-3-benchmarks\n[d04g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day04.hs\n[d04h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day04.html\n[d04r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-4\n[d04b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-4-benchmarks\n[d06g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day06.hs\n[d06h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day06.html\n[d06r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-6\n[d06b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-6-benchmarks\n[d08g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day08.hs\n[d08h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day08.html\n[d08r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-8\n[d08b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-8-benchmarks\n[d10g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day10.hs\n[d10h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day10.html\n[d10r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-10\n[d10b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-10-benchmarks\n"}, {"repo": "mhanberg/advent-of-code-elixir-starter", "language": "Elixir", "readme_contents": "# Advent of Code Elixir Starter\n\nA batteries included starter pack for participating in [Advent of Code](https://www.adventofcode.com) using Elixir!\n\n## Usage\n\nThere are 25 modules, 25 tests, and 50 mix tasks. \n\n1. Fill in the tests with the example solutions.\n1. Write your implementation.\n1. Fill in the final problem inputs into the mix task and run `mix d01.p1`!\n    - Benchmark your solution by passing the `-b` flag, `mix d01.p1 -b`\n\n```elixir\ndefmodule AdventOfCode.Day01 do\n  def part1(args) do\n  end\n\n  def part2(args) do\n  end\nend\n```\n\n```elixir\ndefmodule AdventOfCode.Day01Test do\n  use ExUnit.Case\n\n  import AdventOfCode.Day01\n\n  @tag :skip # Make sure to remove to run your test.\n  test \"part1\" do\n    input = nil \n    result = part1(input)\n\n    assert result\n  end\n\n  @tag :skip # Make sure to remove to run your test.\n  test \"part2\" do\n    input = nil \n    result = part2(input)\n\n    assert result\n  end\nend\n```\n\n```elixir\ndefmodule Mix.Tasks.D01.P1 do\n  use Mix.Task\n\n  import AdventOfCode.Day01\n\n  @shortdoc \"Day 01 Part 1\"\n  def run(args) do\n    input = nil\n\n    if Enum.member?(args, \"-b\"),\n      do: Benchee.run(%{part_1: fn -> input |> part1() end}),\n      else:\n        input\n        |> part1()\n        |> IO.inspect(label: \"Part 1 Results\")\n  end\nend   \n```\n\n## Installation\n\n```bash\n# clone\n$ git clone git@github.com:mhanberg/advent-of-code-elixir-starter.git advent-of-code\n$ cd advent-of-code\n\n# Reinitialize your git repo\n$ rm -rf .git\n$ git init\n```\n"}, {"repo": "borkdude/advent-of-cljc", "language": "Clojure", "readme_contents": "# Advent of CLJC\n[![CircleCI](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master.svg?style=svg)](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master)\n\nCross platform Clojure Advent of Code solutions.\n\n<img src=\"doc/scores.png\" alt=\"scores\" width=\"50%\"/>\n\n## Contribute\n\nWhat's in it for you?\n* Most of all, you will be encouraged to write portable Clojure code: a solution that runs on the JVM via Clojure and on Node via ClojureScript.\n* Your Advent of Code solutions will be checked against the same input as others. This diminishes the possibility that your solution only works for your specific input.\n* The performance of your solution can be compared with others via CircleCI (see [Scores](#scores)).\n\nWhat's in it for the Clojure community?\n* You are helping advance the [speculative](https://github.com/slipset/speculative) project, a collection of core specs.\n* You are helping to build a large Clojure corpus for various purposes (see the Rationale for [coal-mine](https://github.com/mfikes/coal-mine)).\n\nPRs welcome. Make a new solution file with the `new` script:\n\n    script/new 2017 1 username\n\nwhere `username` is your Github or Bitbucket username. Then fill in the solution in the file. If the input and answers are still empty you will have to provide it in `data.cljc`.\n\nThis repo will not accept multiple inputs and answers (see [this issue](https://github.com/borkdude/advent-of-cljc/issues/6) for details).\n\n## Dev\n\nRead [here](https://nrepl.xyz/nrepl/usage/server.html) how to get an nREPL for this project.\n\n## Tests\n\nMake sure the tests for your solution pass with the `test-one` script.\n\nPlease do not run calculations outside the tests. Memoized functions are permitted. Top-level lazy sequences are fine as long as they are not realized outside the tests.\n\nCircleCI runs tests for changed namespaces with the `.circle/test-diff` script.\n\nTests support the following metadata:\n\n - `:skip-cljs`: used for skipping Node tests. Used in `.circle/test-diff`,\n   `script/test` and `script/test-one`.\n - `:skip`: used for skipping tests in `script/test`.\n\nRun all tests:\n\n    script/test\n\nRun one test:\n\n    script/test-one 2017 1 username\n    \nRun with instrumentation:\n\n    INSTRUMENT=true script/test\n    INSTRUMENT=true script/test-one aoc.y2017.d01.username\n\nSkip Clojure or ClojureScript:\n\n    SKIP_CLJ=true script/test\n    SKIP_CLJS=true script/test\n\n## Scores\n\nTo view a time comparison of your solutions to others, go to\n[CircleCI](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master), open\n\"Test changed namespaces\" and scroll to the end.\n\nThe entire list of scores can be viewed and downloaded in CSV format\n[here](https://gist.github.com/borkdude/d7f42d4110e8a330d1d70f9242b14496).\n"}, {"repo": "BartoszMilewski/AofC2017", "language": "Haskell", "readme_contents": "# AofC2017\nAdvent of Code 2017\n"}, {"repo": "zero-to-mastery/coding_challenge-24", "language": null, "readme_contents": "# Advent of Code 2019 (coding_challenge-24)\n\n![](./aoc.png)\n\n# What is Advent of Code?\n> Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like **yes, including JavaScript and Python!!!**\n> Every day for 25 days this month you have small programming challenges that you need to solve to complete the \"tree\". Each day, the questions get a little bit harder to really push you to learn and improve your programming skills.\n\nWe have created a special area for the ZTM community to share their solutions and code each day, see what others have done, and vote for your favourite solution. We even have a leaderboard!\n\n# How to participate:\n### (This event starts December 1st, 2019 but you can join anytime. Solutions submitted on the day of the of the puzzle reveal will receive extra points!)\n1. Go to https://aoc.zerotomastery.io/ and click on the **ABOUT** to find out more about the challenge and how to participate.\n2. Go to https://adventofcode.com/ and start with problem #1! Each day starting Dec 1st, 2019 a new problem will be unlocked but you have to do them in order!\n3. Once you finish one puzzle/question, you can share your code and solution with the community, or check out what others in the ZTM community have done. You can even vote on your favourite solutions! You can [follow this video on how to submit your solution](https://www.loom.com/share/7310b6e83bcc4922b25023b62d173611).\n4. Check out the leaderboard and see how you compare: https://aoc.zerotomastery.io/leaderboard\n5. **Bonus**: In case you get stuck, I made 2 videos available for free preview for you to show you how I solve one of the problems and the steps I take. Simply go to the [Complete Web Developer in 2020: Zero to Mastery](https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/?referralCode=FFF295AECF3594CE440E) course and check out the two lectures (*Exercise: Santa's Node Helper* and *Solution: Santas Node Helper*). Even if you are not enrolled in the course these two videos have the free preview option enabled). \n\n**You can discuss all AOC related topics in our #coding-challenge channel on Discord!**\n\n# Who made this possible?\nSome of our fellow ZTM members helped create this awesome platform to submit and share code. Give them a big thank you on Discord!\n```\n@Matt\n@Dichotomyy\n@E\n@notAnkur\n@Brittney\n@Abdus\n@Meet\n```\n\n## One Last Thing!\n\n**Please note: As with all my challenges there is zero benefit or monetary gain I recieve from it. This is just my way of thanking my students and making sure that you are able to continue gaining valuable knowledge outside of just my videos. It would mean a lot to me if you are able to rate my course...5 star reviews make my day :)**\n\n"}]