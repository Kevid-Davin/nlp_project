,author,language,language_all,readme_contents,repo
0,Bogdanp,Python,{'Python': 950},"# Awesome Advent of Code

This is a collection of awesome resources related to the yearly
[Advent of Code] challenge.

[Advent of Code]: https://adventofcode.com/

* [The Official AoC Website](https://adventofcode.com/)
* [The AoC Subreddit](https://www.reddit.com/r/adventofcode/)
* [Project Templates](#project-templates)
* [Tools and Utilities](#tools-and-utilities)
* [Other Advent Calendars](#other-advent-calendars)
* [2018](/2018.md)
* [2019](#2019)
  * [Solutions](#solutions)
    * [AWK](#awk)
    * [Ada](#ada)
    * [Bash](#Bash)
    * [C](#c)
    * [C#](#c-1)
    * [C++](#c-2)
    * [Clojure](#clojure)
    * [Common Lisp](#common-lisp)
    * [Crystal](#crystal)
    * [D](#d)
    * [Dart](#dart)
    * [Elixir](#elixir)
    * [Elm](#elm)
    * [Erlang](#erlang)
    * [F#](#f)
    * [Go](#go)
    * [Groovy](#groovy)
    * [Haskell](#haskell)
    * [Idris](#idris)
    * [J](#J)
    * [Java](#java)
    * [JavaScript](#javascript)
    * [Julia](#julia)
    * [Kotlin](#kotlin)
    * [LDPL](#ldpl)
    * [Nim](#nim)
    * [OCaml](#ocaml)
    * [PHP](#php)
    * [Perl](#perl)
    * [Pony](#pony)
    * [PowerShell](#powershell)
    * [Python](#python)
    * [R](#r)
    * [Racket](#racket)
    * [ReasonML](#reasonml)
    * [Red](#red)
    * [Ruby](#ruby)
    * [Rust](#rust)
    * [Smalltalk](#smalltalk)
    * [Scala](#scala)
    * [Scheme](#scheme)
    * [Swift](#swift)
    * [TypeScript](#typescript)
    * [Zig](#zig)
  * [Live Streams](#live-streams)

---

## Project Templates

*Templates, cookiecutters and skeletons for quickly setting up projects
in your favourite language.*

* [dave-burke/advent-of-code-java-starter](https://github.com/dave-burke/advent-of-code-java-starter) *(Java)*
* [gobanos/cargo-aoc](https://github.com/gobanos/cargo-aoc) *(Rust)*
* [hughjdavey/aoc-kotlin-starter](https://github.com/hughjdavey/aoc-kotlin-starter) *(Kotlin)*
* [kindermoumoute/adventofcode](https://github.com/kindermoumoute/adventofcode/tree/master/template) *(Go)*
* [staylorwr/elixir_aoc](https://github.com/staylorwr/elixir_aoc) *(Elixir)*
* [mhanberg/advent-of-code-elixir-starter](https://github.com/mhanberg/advent-of-code-elixir-starter) *(Elixir)*
* [AlexeSimon/adventofcode](https://github.com/AlexeSimon/adventofcode) *(Python)*
* [sindrekjr/AdventOfCodeBase](https://github.com/sindrekjr/AdventOfCodeBase) *(C#)*
* [mhanberg/advent-of-code-clojure-starter](https://github.com/mhanberg/advent-of-code-clojure-starter) *(Clojure)*
* [caderek/aoc-starter-js](https://github.com/caderek/aoc-starter-js) *(JavaScript)*
* [caderek/aoc-starter-ts](https://github.com/caderek/aoc-starter-ts) *(TypeScript)*

## Tools and Utilities

* [Alfie](https://alfie.prodo.ai/) -- Online JS editor that helps users solve AoC problems.
* [Chrome extension](https://chrome.google.com/webstore/detail/advent-of-code-ranking/jbnlafikncgjjhdkmfhokcplgahebmjl) -- Browser extension for private leaderboard visualization
* [Firefox extension](https://addons.mozilla.org/en-US/firefox/addon/aoc-ranking/) -- Browser extension for private leaderboard visualization
* [Globals medals overview](http://www.maurits.vdschee.nl/scatterplot/medals.html) -- Alternative global leaderboard showing first, second and third places as gold, silver and bronze medals.
* [Scatterplot of first 100](http://www.maurits.vdschee.nl/scatterplot/) -- Scatterplot of the time taken to solve the parts of each puzzle by the first 100 people that solved it.
* [aocdl](https://github.com/GreenLightning/advent-of-code-downloader) -- Command-line utility that automatically downloads your personal input file while you read the puzzle description *(Go)*.
* [aoc-cli](https://github.com/keirua/aoc-cli) -- Command-line utility that helps solve problems in ruby: it downloads your personal input file, creates the sample source files and benchmarks your solutions *(Ruby)*.
* [AoCHelper](https://github.com/eduherminio/AoCHelper) -- NuGet library that simplifies puzzle solving and provides benchmarking *(.NET)*.

## Other Advent Calendars

*24 days of cool stuff regarding <insert-technology-here>.*

* [Perl6 Advent Calendar](https://perl6advent.wordpress.com/)
* [QEMU Advent Calendar](https://www.qemu-advent-calendar.org/)

## 2019

**WARNING:** All of these likely contain spoilers.

Read [CONTRIBUTING.md](/CONTRIBUTING.md) to learn how to add your own repos.

### Solutions

#### AWK

*Solutions to AoC in AWK.*

#### Ada

*Solutions to AoC in Ada.*

* [jamestomasino/advent-of-code-2019](https://github.com/jamestomasino/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jamestomasino/advent-of-code-2019.svg)

#### Bash

*Solutions to AoC in Bash.*

#### C

*Solutions to AoC in C.*

* [coder5506/advent-of-code-2019](https://github.com/coder5506/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/coder5506/advent-of-code-2019.svg)

#### C#

*Solutions to AoC in C#.*

* [AnkurSheel/AdventOfCode2019](https://github.com/AnkurSheel/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AnkurSheel/AdventOfCode2019.svg)
* [alexchro93/AdventOfCode](https://github.com/alexchro93/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/alexchro93/AdventOfCode.svg)
* [eduherminio/AoC2019](https://github.com/eduherminio/AoC2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/eduherminio/AoC2019.svg)
* [encse/adventofcode](https://github.com/encse/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/encse/adventofcode.svg)
* [sanraith/aoc2019](https://github.com/sanraith/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sanraith/aoc2019.svg)
* [sindrekjr/AdventOfCode](https://github.com/sindrekjr/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sindrekjr/AdventOfCode.svg)
* [viceroypenguin/adventofcode](https://github.com/viceroypenguin/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/viceroypenguin/adventofcode.svg)

#### C++

*Solutions to AoC in C++.*

* [TheRealMolen/adventofcode2019](https://github.com/TheRealMolen/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/TheRealMolen/adventofcode2019.svg)
* [voivoid/advent-of-code](https://github.com/voivoid/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/voivoid/advent-of-code.svg)

#### Clojure

*Solutions to AoC in Clojure.*


* [agrison/advent-of-code-2019](https://github.com/agrison/advent-of-code-2019/) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/agrison/advent-of-code-2019.svg)
* [alexparlett/advent-of-code-2019](https://github.com/alexparlett/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/alexparlett/advent-of-code-2019.svg)
* [erdos/advent-of-code-2019](https://github.com/erdos/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/erdos/advent-of-code-2019.svg)
* [fctorial/adventofcode2019-clojure](https://github.com/fctorial/adventofcode2019-clojure) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fctorial/adventofcode2019-clojure.svg)
* [fdlk/advent-2019](https://github.com/fdlk/advent-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fdlk/advent-2019.svg)
* [felipecortez/advent-of-code](https://github.com/felipecortez/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/felipecortez/advent-of-code.svg)
* [jdlambert/advent-of-code-2019](https://github.com/jdlambert/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jdlambert/advent-of-code-2019.svg)
* [mastercake10/AdventOfCode2019](https://github.com/mastercake10/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mastercake10/AdventOfCode2019.svg)

#### Common Lisp

*Solutions to AoC in Common Lisp.*

* [topikettunen/advent-of-code-2019](https://github.com/topikettunen/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/topikettunen/advent-of-code-2019.svg)

#### Crystal

*Solutions to AoC in Crystal.*

* [PenguinOwl/advent2019](https://github.com/PenguinOwl/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/PenguinOwl/advent2019.svg)
* [salival1/advent-2019](https://github.com/salival1/advent-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/salival1/advent-2019.svg)

#### D

*Solutions to AoC in D.*

* [jrfondren/adventofcode](https://github.com/jrfondren/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jrfondren/adventofcode.svg)
* [m3m0ry/2019-advent](https://github.com/m3m0ry/2019-advent) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/m3m0ry/2019-advent.svg)

#### Dart

*Solutions to AoC in Dart.*

* [Awjin/advent-of-code](https://github.com/Awjin/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Awjin/advent-of-code.svg)
* [julemand101/AdventOfCode2019](https://github.com/julemand101/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/julemand101/AdventOfCode2019.svg)

#### Elixir

*Solutions to AoC in Elixir.*

* [Firebain/adventofcode](https://github.com/Firebain/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Firebain/adventofcode.svg)
* [dunyakirkali/aoc](https://github.com/dunyakirkali/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dunyakirkali/aoc.svg)
* [es1o/adventofcode](https://github.com/es1o/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/es1o/adventofcode.svg)
* [jwarwick/aoc_2019](https://github.com/jwarwick/aoc_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jwarwick/aoc_2019.svg)
* [manniL/aoc-2019-elixir](https://github.com/manniL/aoc-2019-elixir) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/manniL/aoc-2019-elixir.svg)

#### Elm

*Solutions to AoC in Elm and Literate Elm.*

#### Erlang

*Solutions to AoC in Erlang.*

* [rhbvkleef/aoc2019](https://github.com/rhbvkleef/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/rhbvkleef/aoc2019.svg)

#### F#

*Solutions to AoC in F#.*

* [CameronAavik/AdventOfCode](https://github.com/CameronAavik/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/CameronAavik/AdventOfCode.svg)
* [ChrisPritchard/AdventOfCode](https://github.com/ChrisPritchard/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ChrisPritchard/AdventOfCode.svg)

#### Go

*Solutions to AoC in Go.*

* [GreenLightning/aoc19](https://github.com/GreenLightning/aoc19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/GreenLightning/aoc19.svg)
* [Ullaakut/aoc19](https://github.com/Ullaakut/aoc19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Ullaakut/aoc19.svg)
* [chigley/advent2019](https://github.com/chigley/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/chigley/advent2019.svg)
* [davidaayers/advent-of-code-2019](https://github.com/davidaayers/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davidaayers/advent-of-code-2019.svg)
* [devries/advent_of_code_2019](https://github.com/devries/advent_of_code_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/devries/advent_of_code_2019.svg)
* [gliderGeek/adventofcode19](https://github.com/gliderGeek/adventofcode19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gliderGeek/adventofcode19.svg)
* [hierynomus/2019-adventofcode.com](https://github.com/hierynomus/code-challenges/tree/master/2019-adventofcode.com) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hierynomus/code-challenges.svg)
* [howden/advent19](https://github.com/howden/advent19) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/howden/advent19.svg)
* [kissgyorgy/adventofcode2019](https://github.com/kissgyorgy/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/kissgyorgy/adventofcode2019.svg)
* [lynerist/Advent-of-code-2019-golang](https://github.com/lynerist/Advent-of-code-2019-golang) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/lynerist/Advent-of-code-2019-golang.svg)
* [sasom/adventofcode19](https://gitlab.com/sasom/adventofcode19)
* [thlacroix/goadvent](https://github.com/thlacroix/goadvent) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/thlacroix/goadvent.svg)
* [williamfhe/advent-of-code-2019](https://github.com/williamfhe/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/williamfhe/advent-of-code-2019.svg)
* [sevaorlov/adventofcode2019](https://github.com/sevaorlov/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sevaorlov/adventofcode2019.svg)

#### Groovy

*Solutions to AoC in Groovy.*

#### Haskell

*Solutions to AoC in Haskell.*

* [bzuilhof/AdventOfCode](https://github.com/bzuilhof/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/bzuilhof/AdventOfCode.svg)
* [ephemient/aoc2019#hs](https://github.com/ephemient/aoc2019/tree/hs) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ephemient/aoc2019/hs.svg)
* [glguy/advent2019](https://github.com/glguy/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/glguy/advent2019.svg)
* [hashedone/advent-of-code-2019-hask](https://github.com/hashedone/advent-of-code-2019-hask) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hashedone/advent-of-code-2019-hask.svg)
* [nrdmn/adventofcode2019](https://github.com/nrdmn/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/nrdmn/adventofcode2019.svg)
* [webbiscuit/adventofcode](https://github.com/webbiscuit/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/webbiscuit/adventofcode.svg)

#### Idris

*Solutions to AoC in Idris.*

#### J

*Solutions to AoC in J.*

* [jitwit/aoc](https://github.com/jitwit/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jitwit/aoc.svg)

#### Java

*Solutions to AoC in Java.*

* [SimonBaars/adventOfCode-2019](https://github.com/SimonBaars/adventOfCode-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/SimonBaars/adventOfCode-2019.svg)
* [SizableShrimp/AdventOfCode2019](https://github.com/SizableShrimp/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/SizableShrimp/AdventOfCode2019.svg)
* [agrison/advent-of-code-2019](https://github.com/agrison/advent-of-code-2019/) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/agrison/advent-of-code-2019.svg)
* [giganova/advent-of-code-2019-java](https://github.com/giganova/advent-of-code-2019-java) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/giganova/advent-of-code-2019-java.svg)

#### JavaScript

*Solutions to AoC in JavaScript.*

* [GigaNova/advent-of-code-2019](https://github.com/GigaNova/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/GigaNova/advent-of-code-2019.svg)
* [Jedi-Fullstack-Avengers/AdventOfCode](https://github.com/Jedi-Fullstack-Avengers/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Jedi-Fullstack-Avengers/AdventOfCode.svg)
* [MaxArt2501/advent-of-code-2019](https://github.com/MaxArt2501/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/MaxArt2501/advent-of-code-2019.svg)
* [RaedsLab/advent-of-code](https://github.com/RaedsLab/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/RaedsLab/advent-of-code.svg)
* [arnauddrain/advent-of-code-2019](https://github.com/arnauddrain/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/arnauddrain/advent-of-code-2019.svg)
* [atme/advent-of-code](https://github.com/atme/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/atme/advent-of-code.svg)
* [bureson/advent-of-code-2019](https://github.com/bureson/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/bureson/advent-of-code-2019.svg)
* [chinesedfan/adventofcode](https://github.com/chinesedfan/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/chinesedfan/adventofcode.svg)
* [countzero/advent_of_code](https://github.com/countzero/advent_of_code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/countzero/advent_of_code.svg)
* [danieltrost/adventofcode-2019-solutions-js](https://github.com/danieltrost/adventofcode-2019-solutions-js) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/danieltrost/adventofcode-2019-solutions-js.svg)
* [davidmargolin/Advent-Of-Code-2019](https://github.com/davidmargolin/Advent-Of-Code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davidmargolin/Advent-Of-Code-2019.svg)
* [entibo/advent-of-code-golf-2019](https://github.com/entibo/advent-of-code-golf-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/entibo/advent-of-code-golf-2019.svg)
* [gamma032steam/Advent-of-code](https://github.com/gamma032steam/Advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gamma032steam/Advent-of-code.svg)
* [gavinhenderson/advent-of-code](https://github.com/gavinhenderson/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gavinhenderson/advent-of-code.svg)
* [imsalahdev/adventofcode-2019](https://github.com/imsalahdev/adventofcode-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/imsalahdev/adventofcode-2019.svg)
* [jackcutting/aoc2019](https://github.com/jackcutting/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jackcutting/aoc2019.svg)
* [mdelerue/AdventOfCode](https://github.com/mdelerue/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mdelerue/AdventOfCode.svg)
* [und3f/advent-of-code-2019](https://github.com/und3f/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/und3f/advent-of-code-2019.svg)
* [vguerrerobosch/advent-of-code-2019](https://github.com/vguerrerobosch/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vguerrerobosch/advent-of-code-2019.svg)
* [vuryss/aoc-2019](https://github.com/vuryss/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vuryss/aoc-2019.svg)

#### Julia

*Solutions to AoC in Julia.*

* [gsoleilhac/aoc19.jl](https://github.com/gsoleilhac/aoc19.jl) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gsoleilhac/aoc19.jl.svg)
* [kamilbeker/aoc2019.jl](https://github.com/kamilbeker/aoc2019.jl) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/kamilbeker/aoc2019.jl.svg)
* [racinmat/advent_of_code_2019](https://github.com/racinmat/advent_of_code_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/racinmat/advent_of_code_2019.svg)

#### Kotlin

*Solutions to AoC in Kotlin.*

* [0legg/adventofcode](https://github.com/0legg/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/0legg/adventofcode.svg)
* [daafith/advent-of-code-2019](https://github.com/daafith/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/daafith/advent-of-code-2019.svg)
* [ephemient/aoc2019#kt](https://github.com/ephemient/aoc2019/tree/kt) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ephemient/aoc2019/kt.svg)
* [hughjdavey/aoc-2019](https://github.com/hughjdavey/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hughjdavey/aoc-2019.svg)
* [jgoerner/aoc-2019](https://github.com/jgoerner/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jgoerner/aoc-2019.svg)
* [jorispz/aoc-2019](https://github.com/jorispz/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jorispz/aoc-2019.svg)
* [mew/aoc-2019](https://github.com/mew/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mew/aoc-2019.svg)

#### LDPL

*Solutions to AoC in LDPL.*

* [Lartu/adventOfCode2019](https://github.com/Lartu/adventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Lartu/adventOfCode2019.svg)
* [dgarroDC/advent-of-code-2019-ldpl](https://github.com/dgarroDC/advent-of-code-2019-ldpl) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dgarroDC/advent-of-code-2019-ldpl.svg)

#### Nim

*Solutions to AoC in Nim.*

#### OCaml

*Solutions to AoC in OCaml.*

* [georgek42/AOC2019](https://github.com/georgek42/AOC2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/georgek42/AOC2019.svg)

#### PHP

*Solutions to AoC in PHP.*

* [aran112000/Advent-of-Code-2019-PHP](https://github.com/aran112000/Advent-of-Code-2019-PHP) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/aran112000/Advent-of-Code-2019-PHP.svg)
* [cbzink/advent-of-code-2019](https://github.com/cbzink/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/cbzink/advent-of-code-2019.svg)
* [vuryss/aoc-2019](https://github.com/vuryss/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vuryss/aoc-2019.svg)

#### Perl

*Solutions to AoC in Perl.*

* [kcaran/adventofcode2019](https://github.com/kcaran/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/kcaran/adventofcode2019.svg)
* [lskatz/advent-of-code](https://github.com/lskatz/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/lskatz/advent-of-code.svg)

#### Pony

*Solutions to AoC in Pony.*

#### PowerShell

*Solutions to AoC in PowerShell.*

* [Crucerio/adventofcode](https://github.com/Crucerio/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Crucerio/adventofcode.svg)
* [martinkonopka/AdventOfCode2019](https://github.com/martinkonopka/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/martinkonopka/AdventOfCode2019.svg)

#### Python

*Solutions to AoC in Python.*

* [0x8b/advent-of-code-2019](https://github.com/0x8b/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/0x8b/advent-of-code-2019.svg)
* [Akumatic/Advent-of-Code](https://github.com/Akumatic/Advent-of-Code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Akumatic/Advent-of-Code.svg)
* [BogDAAAMN/advent-of-code](https://github.com/BogDAAAMN/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/BogDAAAMN/advent-of-code.svg)
* [Dementophobia/advent-of-code-2019](https://github.com/Dementophobia/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Dementophobia/advent-of-code-2019.svg)
* [IFinners/advent-of-code](https://github.com/IFinners/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/IFinners/advent-of-code.svg)
* [JasonCannon/advent-of-code-2019](https://github.com/JasonCannon/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/JasonCannon/advent-of-code-2019.svg)
* [JesperDramsch/advent-of-code](https://github.com/JesperDramsch/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/JesperDramsch/advent-of-code.svg)
* [Kurocon/AdventOfCode2019](https://github.com/Kurocon/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Kurocon/AdventOfCode2019.svg)
* [Levivig/AdventOfCode2019](https://github.com/Levivig/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Levivig/AdventOfCode2019.svg)
* [Miccowhy/adventofcode2019](https://github.com/Miccowhy/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Miccowhy/adventofcode2019.svg)
* [PatMyron/advent-of-code](https://github.com/PatMyron/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/PatMyron/advent-of-code.svg)
* [TristoKrempita/advent-of-code](https://github.com/TristoKrempita/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/TristoKrempita/advent-of-code.svg)
* [a-red-christmas/aoc2019-ae](https://github.com/a-red-christmas/aoc2019-ae) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/a-red-christmas/aoc2019-ae.svg)
* [elvinyhlee/advent-of-code-2019-python](https://github.com/elvinyhlee/advent-of-code-2019-python) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/elvinyhlee/advent-of-code-2019-python.svg)
* [ephemient/aoc2019#py](https://github.com/ephemient/aoc2019/tree/py) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ephemient/aoc2019/py.svg)
* [gbusch/AdventOfCode](https://github.com/gbusch/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gbusch/AdventOfCode.svg)
* [juffalow/advent-of-code](https://github.com/juffalow/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/juffalow/advent-of-code.svg)
* [mebeim/aoc](https://github.com/mebeim/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mebeim/aoc.svg)
* [metzbernhard/aoc2019](https://github.com/metzbernhard/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/metzbernhard/aoc2019.svg)
* [mevdschee/AdventOfCode2019](https://github.com/mevdschee/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mevdschee/AdventOfCode2019.svg)
* [mpindaro/advent-of-code-2019](https://bitbucket.org/mpindaro/advent-of-code-2019/src/master/)
* [polhec42/AOC](https://github.com/polhec42/AOC) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/polhec42/AOC.svg)
* [r0f1/adventofcode2019](https://github.com/r0f1/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/r0f1/adventofcode2019.svg)
* [ste001/advent-of-code-2019](https://github.com/ste001/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/ste001/advent-of-code-2019.svg)
* [vincent-vega/adventofcode](https://github.com/vincent-vega/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/vincent-vega/adventofcode.svg)
* [visini/aoc2019](https://github.com/visini/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/visini/aoc2019.svg)
* [zenieldanaku/AdventOfCode](https://github.com/zenieldanaku/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/zenieldanaku/AdventOfCode.svg)
* [dmies/adventOfCode](https://github.com/dmies/adventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dmies/adventOfCode.svg)

#### R

*Solutions to AoC in R.*

* [Cattiva/adventofcode](https://github.com/Cattiva/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Cattiva/adventofcode.svg)
* [EdwinTh/AoC_2019](https://github.com/EdwinTh/AoC_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/EdwinTh/AoC_2019.svg)
* [Morawski21/Advent-of-Code-2019-in-R](https://github.com/Morawski21/Advent-of-Code-2019-in-R) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Morawski21/Advent-of-Code-2019-in-R.svg)
* [adam-gruer/aoc2019](https://github.com/adam-gruer/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/adam-gruer/aoc2019.svg)
* [akulumbeg/adventofcode](https://github.com/akulumbeg/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/akulumbeg/adventofcode.svg)
* [davidmasp/adventofcode-dmp](https://github.com/davidmasp/adventofcode-dmp) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davidmasp/adventofcode-dmp.svg)
* [mpjdem/adventofcode2019](https://github.com/mpjdem/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/mpjdem/adventofcode2019.svg)
* [riinuots/advent2019](https://github.com/riinuots/advent2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/riinuots/advent2019.svg)
* [plannapus/AdventOfCode2019](https://github.com/plannapus/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/plannapus/AdventOfCode2019.svg)

#### Racket

*Solutions to AoC in Racket.*

* [samdphillips/aoc-2019](https://github.com/samdphillips/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/samdphillips/aoc-2019.svg)

#### ReasonML

*Solutions to AoC in ReasonML.*

* [believer/advent-of-code](https://github.com/believer/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/believer/advent-of-code.svg)

#### Red

*Solutions to AoC in Red.*

#### Ruby

*Solutions to AoC in Ruby.*

* [Kazhuu/advent-of-code-2019](https://github.com/Kazhuu/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Kazhuu/advent-of-code-2019.svg)
* [Keirua/adventofcode-rb](https://github.com/Keirua/adventofcode-rb) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Keirua/adventofcode-rb.svg)
* [Pungsnigel/advent_of_code_2019](https://github.com/Pungsnigel/advent_of_code_2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/Pungsnigel/advent_of_code_2019.svg)

#### Rust

*Solutions to AoC in Rust.*

* [AlexAegis/advent-of-code](https://github.com/AlexAegis/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AlexAegis/advent-of-code.svg)
* [AmauryCarrade/AdventOfCode2019](https://github.com/AmauryCarrade/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AmauryCarrade/AdventOfCode2019.svg)
* [DarthGandalf/advent-of-code](https://github.com/DarthGandalf/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/DarthGandalf/advent-of-code.svg)
* [alyti/aoc-2019](https://github.com/alyti/aoc-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/alyti/aoc-2019.svg)
* [dashed/advent-of-code](https://github.com/dashed/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/dashed/advent-of-code.svg)
* [fornwall/advent-of-code-2019-rs](https://github.com/fornwall/advent-of-code-2019-rs) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fornwall/advent-of-code-2019-rs.svg)
* [hashedone/advent-of-code-2019-rust](https://github.com/hashedone/advent-of-code-2019-rust) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/hashedone/advent-of-code-2019-rust.svg)
* [jdlambert/advent-of-code-2019](https://github.com/jdlambert/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jdlambert/advent-of-code-2019.svg)
* [meyerphi/advent-of-code](https://github.com/meyerphi/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/meyerphi/advent-of-code.svg)
* [notviri/aoc2019](https://github.com/notviri/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/notviri/aoc2019.svg)
* [timvisee/advent-of-code-2019](https://github.com/timvisee/advent-of-code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/timvisee/advent-of-code-2019.svg)

#### Smalltalk

*Solutions to AoC in Smalltalk.*

* [thiagoslino/Advent-of-Code-2019](https://github.com/thiagoslino/Advent-of-Code-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/thiagoslino/Advent-of-Code-2019.svg)

#### Scala

*Solutions to AoC in Scala.*

* [FlorianCassayre/AdventOfCode-2019](https://github.com/FlorianCassayre/AdventOfCode-2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/FlorianCassayre/AdventOfCode-2019.svg)
* [lupari/aoc](https://github.com/lupari/aoc2019/) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/lupari/aoc2019.svg)
* [matelaszlo/advent-of-code-scala](https://github.com/matelaszlo/advent-of-code-scala) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/matelaszlo/advent-of-code-scala.svg)
* [sim642/adventofcode](https://github.com/sim642/adventofcode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/sim642/adventofcode.svg)

#### Scheme

*Solutions to AoC in Scheme.*

* [jitwit/aoc](https://github.com/jitwit/aoc) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/jitwit/aoc.svg)
* [nenadom/AdventOfCode](https://github.com/nenadom/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/nenadom/AdventOfCode.svg)

#### Swift

*Solutions to AoC in Swift.*

* [davedelong/AOC](https://github.com/davedelong/AOC) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/davedelong/AOC.svg)
* [evilmint/AdventOfCode](https://github.com/evilmint/AdventOfCode) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/evilmint/AdventOfCode.svg)
* [fguchelaar/AdventOfCode2019](https://github.com/fguchelaar/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/fguchelaar/AdventOfCode2019.svg)
* [gernb/AdventOfCode2019](https://github.com/gernb/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/gernb/AdventOfCode2019.svg)

#### TypeScript

*Solutions to AoC in TypeScript.*

* [AlexAegis/advent-of-code](https://github.com/AlexAegis/advent-of-code) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/AlexAegis/advent-of-code.svg)
* [caderek/aoc2019](https://github.com/caderek/aoc2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/caderek/aoc2019.svg)
* [florianfreier/AdventOfCode2019](https://github.com/florianfreier/AdventOfCode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/florianfreier/AdventOfCode2019.svg)
* [izexi/adventofcode2019](https://github.com/izexi/adventofcode2019) ![Last Commit on GitHub](https://img.shields.io/github/last-commit/izexi/adventofcode2019.svg)

#### Zig

*Solutions to AoC in Zig.*

### Live Streams

*Folks who are live streaming their process.*
",Bogdanp/awesome-advent-of-code
1,BurntSushi,Rust,"{'Rust': 150154, 'Shell': 278}","BurntSushi's 2018 Advent of Code solutions
==========================================

I chose to write this year's solutions in Rust. I don't have any particularly
ambitious goals, but I am trying to write the solutions using idiomatic code.
In particular, it should not be possible for any input to cause one of the
solutions to panic.

I have not spent any time benchmarking the code.

To run a solution, `cd` into its directory and invoke the program with Cargo:

```
$ cd aoc01
$ cargo run --release < input/input.txt
```

If you have questions about the code, please open an issue and ask away!
Beginner questions are very much welcome.
",BurntSushi/advent-of-code
2,Lysxia,Coq,"{'Coq': 116725, 'Makefile': 2089}","Advent of Code 2018 in Coq
==========================

This repository contains solutions for the Advent of Code 2018
(https://adventofcode.com/2018). Some of them are formally verified.
This is an example of applying verification to small programming
challenges of that kind.
(If you're aiming for prizes, this is probably not the way to go.)

Contributions welcome
---------------------

It will probably take much longer than the actual span of the AoC to
complete this project, so any help implementing, specifying, or verifying
solutions is welcome. If you have any questions, open an issue or send
me an email (lysxia@gmail.com).

### Suggested tasks

- `day02_2.v`, `day03_2.v` are bare of any verification effort.

- Implement Day 6 (Manhattan geometry).

Project status
--------------

As of December 2, the two solutions of Day 1's challenge are
verified (significant caveats apply).

Read more about my approach in [`SUMMARY.md`](./SUMMARY.md).

Dependencies
------------

- [coq-simple-io](https://github.com/Lysxia/coq-simple-io), master

    This project serves to test coq-simple-io and see what is missing to
    make it practical to write executable programs in Coq.

- [coq-ext-lib](https://github.com/coq-ext-lib/coq-ext-lib), 0.10

- [Coq](https://coq.inria.fr/), 8.8.2

- [OCaml](https://ocaml.org), 4.07.0

Older versions of these are likely to work.

### Optional dependency

- [coq-itree](https://github.com/DeepSpec/InteractionTrees), master.
  A library of free monads and algebraic effects (WIP).

Experimental proofs using `itree` instead of `io_rel` can be found in
files `sol/day*_*_extra.v`.

To install coq-itree with opam and make it known to advent-of-coq:

```sh
git clone https://github.com/DeepSpec/InteractionTrees
opam pin add coq-itree ./InteractionTrees

# Inside advent-of-coq-2018, create a symbolic link _CoqConfig.append
# to _CoqConfig.extras
# The -f option overwrites any existing _CoqConfig.append
ln -sf _CoqConfig.extras _CoqConfig.append

# (Re)generate _CoqProject and compile lib.itree
make lib
```

Install the development version of coq-simple-io with opam
----------------------------------------------------------

```sh
# Get the source
git clone https://github.com/Lysxia/coq-simple-io

# Register the local version of coq-simple-io with opam
opam pin add -k git coq-simple-io ./coq-simple-io

# When coq-simple-io is updated
cd coq-simple-io && git pull coq-simple-io
opam reinstall coq-simple-io
```

Build
-----

To compile and run `day01_1.v` for example:

```sh
make exe/day01_1
./exe/day01_1 < txt/day01
```
",Lysxia/advent-of-coq-2018
3,fogleman,Python,"{'Python': 34960, 'Go': 2071}","# Advent of Code 2018

My solutions to the Advent of Code 2018 problems.

Check out the blog post, which explains how the solutions work and includes more comments in the code:

https://www.michaelfogleman.com/aoc18/

Run the solutions like so:

    $ python 1.py 1.txt
",fogleman/AdventOfCode2018
4,mstksg,Haskell,{'Haskell': 169724},"Advent of Code 2018
===================

*[2016][]* / *[2017][]* / *2018* / *[2019][]*

[2016]: https://github.com/mstksg/advent-of-code-2016
[2017]: https://github.com/mstksg/advent-of-code-2017
[2019]: https://github.com/mstksg/advent-of-code-2019

It's the most wonderful time of the year!

My [Advent of Code 2018][aoc2018] Haskell solutions here, along with an automated
fetching, testing, running environment (powered by the
*[advent-of-code-api][]* library).  The interactive development environment and
runner/bench marker/viewer/tester has been pulled out [here][dev], so this is
implemented as ""fork"" of it with my own solutions and reflections.

Check out reflections and commentary at the [package haddocks][haddock]!
(individual links down below)

[aoc2018]: https://adventofcode.com/2018
[haddock]: https://mstksg.github.io/advent-of-code-2018/
[advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api
[dev]: https://github.com/mstksg/advent-of-code-dev

[Reflections and Benchmarks][reflections]
-----------------------------------------

*   **[Day 1 Reflections][d01r]** *[code][d01g]* / *[rendered][d01h]* / *[benchmarks][d01b]*
*   **[Day 2 Reflections][d02r]** *[code][d02g]* / *[rendered][d02h]* / *[benchmarks][d02b]*
*   **[Day 3 Reflections][d03r]** *[code][d03g]* / *[rendered][d03h]* / *[benchmarks][d03b]*
*   **[Day 4 Reflections][d04r]** *[code][d04g]* / *[rendered][d04h]* / *[benchmarks][d04b]*
*   **[Day 5 Reflections][d05r]** *[code][d05g]* / *[rendered][d05h]* / *[benchmarks][d05b]*
*   **[Day 6 Reflections][d06r]** *[code][d06g]* / *[rendered][d06h]* / *[benchmarks][d06b]*
*   **[Day 7 Reflections][d07r]** *[code][d07g]* / *[rendered][d07h]* / *[benchmarks][d07b]*
*   **[Day 8 Reflections][d08r]** *[code][d08g]* / *[rendered][d08h]* / *[benchmarks][d08b]*
*   **[Day 9 Reflections][d09r]** *[code][d09g]* / *[rendered][d09h]* / *[benchmarks][d09b]*
*   **[Day 10 Reflections][d10r]** *[code][d10g]* / *[rendered][d10h]* / *[benchmarks][d10b]*
*   **[Day 11 Reflections][d11r]** *[code][d11g]* / *[rendered][d11h]* / *[benchmarks][d11b]*
*   **[Day 12 Reflections][d12r]** *[code][d12g]* / *[rendered][d12h]* / *[benchmarks][d12b]*
*   **[Day 13 Reflections][d13r]** *[code][d13g]* / *[rendered][d13h]* / *[benchmarks][d13b]*
*   **[Day 14 Reflections][d14r]** *[code][d14g]* / *[rendered][d14h]*
*   **Day 15 Reflections** *[code][d15g]* / *[rendered][d15h]*
*   **[Day 16 Reflections][d16r]** *[code][d16g]* / *[rendered][d16h]* / *[benchmarks][d16b]*
*   **Day 17 Reflections** *[code][d17g]* / *[rendered][d17h]*
*   **Day 18 Reflections** *[code][d18g]* / *[rendered][d18h]*
*   **Day 19 Reflections** *[code][d19g]* / *[rendered][d19h]*
*   **[Day 20 Reflections][d20r]** *[code][d20g]* / *[rendered][d20h]* / *[benchmarks][d20b]*
*   **Day 21 Reflections** *[code][d21g]* / *[rendered][d21h]*
*   **Day 22 Reflections** *[code][d22g]* / *[rendered][d22h]*
*   **Day 23 Reflections** *[code][d23g]* / *[rendered][d23h]*
*   **Day 24 Reflections** *[code][d24g]* / *[rendered][d24h]*

""Rendered"" links go to haddock source renders for code, with reflections in the
documentation.  Haddock source renders have hyperlinked identifiers,
so you can follow any unrecognized identifiers to see where I have defined them
in the library.

[reflections]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md

### `:~>` type

If you're looking at my actual github solutions, you'll notice thattThis year
I'm implementing my solutions in terms of a `:~>` record type:

```haskell
data a :~> b = MkSol
    { sParse :: String -> Maybe a    -- ^ parse input into an `a`
    , sSolve :: a      -> Maybe b    -- ^ solve an `a` input to a `b` solution
    , sShow  :: b      -> String     -- ^ print out the `b` solution for submission
    }
```

An `a :~> b` is a solution to a challenge expecting input of type `a` and
producing answers of type `b`.  It also packs in functions to parse a `String`
into an `a`, and functions to show a `b` as a `String` to submit as an answer.

This helps me mentally separate out parsing, solving, and showing, allowing for
some cleaner code and an easier time planning my solution.

Such a challenge can be ""run"" on string inputs by feeding the string into
`sParse`, then `sSolve`, then `sShow`:

```haskell
-- | Run a ':~>' on some input, retuning 'Maybe'
runSolution :: Challenge -> String -> Maybe String
runSolution MkSol{..} s = do
    x <- sParse s
    y <- sSolve x
    pure $ sShow y
```

In the actual library, I have `runSolution` return an `Either` so I can debug
which stage the error happened in.

You might also notice the function `dyno_`, used like `dyno_ ""limit"" 10000`.  This
is how I implement parameters in problems that vary between test data and
actual input.  For example, Day 6 involved finding points that had a total
distance of less than 10000, but for the test input, we found the points that
had a total distance of less than 32.  So, I have a system that lets me write
`dyno_ ""limit"" 10000` in my code instead of hard-coding in `10000`.  This
`10000` would be replaced by `32` when running with test data (which is parsed
from [this file][7btest])

[7btest]: https://github.com/mstksg/advent-of-code-2018/blob/master/test-data/06b.txt

Interactive
-----------

The *[AOC2018.Run.Interactive][interactive]* module has code (powered by
*[advent-of-code-api][]*) for testing your solutions and submitting within
GHCI, so you don't have to re-compile. If you edit your solution programs, they
are automatically updated when you hit `:r` in ghci.

[interactive]: https://mstksg.github.io/advent-of-code-2018/AOC2018-Run-Interactive.html

```haskell
ghci> execSolution_   $ mkCS 2 'a'  -- get answer for challenge based on solution
ghci> testSolution_   $ mkCS 2 'a'  -- run solution against test suite
ghci> viewPrompt_     $ mkCS 2 'a'  -- view the prompt for a part
ghci> waitForPrompt_  $ mkCS 2 'a'  -- count down to the prompt for a part
ghci> submitSolution_ $ mkCS 2 'a'  -- submit a solution
```

These are loaded with session key stored in the configuration file (see next
section).

Executable
----------

Comes with test examples given in problems.

You can install using `stack`:

```bash
$ git clone https://github.com/mstksg/advent-of-code-2018
$ cd advent-of-code-2018
$ stack setup
$ stack install
```

The executable `aoc2018` includes a testing and benchmark suite, as well as a
way to view prompts within the command line:

```
$ aoc2018 --help
aoc2018 - Advent of Code 2018 challenge runner

Usage: aoc2018 [-c|--config PATH] COMMAND
  Run challenges from Advent of Code 2018. Available days: 1, 2, 3 (..)

Available options:
  -c,--config PATH         Path to configuration file (default: aoc-conf.yaml)
  -h,--help                Show this help text

Available commands:
  run                      Run, test, and benchmark challenges
  view                     View a prompt for a given challenge
  submit                   Test and submit answers for challenges
  test                     Alias for run --test
  bench                    Alias for run --bench
  countdown                Alias for view --countdown

$ aoc2018 run 3 b
>> Day 03b
>> [✓] 243
```

You can supply input via stdin with `--stdin`:

```
$ aoc2018 run 1 --stdin
>> Day 01a
+1
+2
+1
-3
<Ctrl+D>
[?] 1
>> Day 01b
[?] 1
```

Benchmarking is implemented using *criterion*

```
$ aoc2018 bench 2
>> Day 02a
benchmarking...
time                 1.317 ms   (1.271 ms .. 1.392 ms)
                     0.982 R²   (0.966 R² .. 0.999 R²)
mean                 1.324 ms   (1.298 ms .. 1.373 ms)
std dev              115.5 μs   (77.34 μs .. 189.0 μs)
variance introduced by outliers: 65% (severely inflated)

>> Day 02b
benchmarking...
time                 69.61 ms   (68.29 ms .. 72.09 ms)
                     0.998 R²   (0.996 R² .. 1.000 R²)
mean                 69.08 ms   (68.47 ms .. 69.99 ms)
std dev              1.327 ms   (840.8 μs .. 1.835 ms)
```

Test suites run the example problems given in the puzzle description, and
outputs are colorized in ANSI terminals.

```
$ aoc2018 test 1
>> Day 01a
[✓] (3)
[✓] (3)
[✓] (0)
[✓] (-6)
[✓] Passed 4 out of 4 test(s)
[✓] 416
>> Day 01b
[✓] (2)
[✓] (0)
[✓] (10)
[✓] (5)
[✓] (14)
[✓] Passed 5 out of 5 test(s)
[✓] 56752
```

This should only work if you're running `aoc2018` in the project directory.

**To run on actual inputs**, the executable expects inputs to be found in the
folder `data/XX.txt` in the directory you are running in.  That is, the input
for Day 7 will be expected at `data/07.txt`.

*aoc2018 will download missing input files*, but requires a session token.
This can be provided in `aoc-conf.yaml`:

```yaml
session:  [[ session token goes here ]]
```

Session keys are also required to download ""Part 2"" prompts for each challenge.

You can ""lock in"" your current answers (telling the executable that those are
the correct answers) by passing in `--lock`.  This will lock in any final
puzzle solutions encountered as the verified official answers.  Later, if you
edit or modify your solutions, they will be checked on the locked-in answers.

These are stored in `data/ans/XXpart.txt`.  That is, the target output for Day 7
(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually
edit these files.

You can view prompts: (use `--countdown` to count down until a prompt is
released, and display immediately)

```
$ aoc2018 view 3 b
>> Day 03b
--- Part Two ---
----------------

Amidst the chaos, you notice that exactly one claim doesn't overlap by
even a single square inch of fabric with any other claim. If you can
somehow draw attention to it, maybe the Elves will be able to make
Santa's suit after all!

For example, in the claims above, only claim `3` is intact after all
claims are made.

*What is the ID of the only claim that doesn't overlap?*
```

You can also submit answers:

```
$ aoc2018 submit 1 a
```

Submissions will automatically run the test suite.  If any tests fail, you will
be asked to confirm submission or else abort.  The submit command will output
the result of your submission: The message from the AoC website, and whether or
not your answer was correct (or invalid or ignored).  Answers that are
confirmed correct will be locked in and saved for future testing against, in
case you change your solution.

All networking features are powered by *[advent-of-code-api][]*.

[d01g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day01.hs
[d01h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day01.html
[d01r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-1
[d01b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-1-benchmarks

[d02g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day02.hs
[d02h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day02.html
[d02r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-2
[d02b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-2-benchmarks

[d03g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day03.hs
[d03h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day03.html
[d03r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-3
[d03b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-3-benchmarks

[d04g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day04.hs
[d04h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day04.html
[d04r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-4
[d04b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-4-benchmarks

[d05g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day05.hs
[d05h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day05.html
[d05r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-5
[d05b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-5-benchmarks

[d06g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day06.hs
[d06h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day06.html
[d06r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-6
[d06b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-6-benchmarks

[d07g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day07.hs
[d07h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day07.html
[d07r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-7
[d07b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-7-benchmarks

[d08g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day08.hs
[d08h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day08.html
[d08r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-8
[d08b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-8-benchmarks

[d09g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day09.hs
[d09h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day09.html
[d09r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-9
[d09b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-9-benchmarks

[d10g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day10.hs
[d10h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day10.html
[d10r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-10
[d10b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-10-benchmarks

[d11g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day11.hs
[d11h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day11.html
[d11r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-11
[d11b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-11-benchmarks

[d12g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day12.hs
[d12h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day12.html
[d12r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-12
[d12b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-12-benchmarks

[d13g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day13.hs
[d13h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day13.html
[d13r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-13
[d13b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-13-benchmarks

[d14g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day14.hs
[d14h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day14.html
[d14r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-14

[d15g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day15.hs
[d15h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day15.html

[d16g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day16.hs
[d16h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day16.html
[d16r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-16
[d16b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-16-benchmarks

[d17g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day17.hs
[d17h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day17.html

[d18g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day18.hs
[d18h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day18.html

[d19g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day19.hs
[d19h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day19.html

[d20g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day20.hs
[d20h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day20.html
[d20r]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-20
[d20b]: https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-20-benchmarks

[d21g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day21.hs
[d21h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day21.html

[d22g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day22.hs
[d22h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day22.html

[d23g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day23.hs
[d23h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day23.html

[d24g]: https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day24.hs
[d24h]: https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day24.html
",mstksg/advent-of-code-2018
5,Voltara,C++,"{'C++': 82428, 'CMake': 751}","# advent2018-fast

[Advent of Code 2018](http://adventofcode.com/2018/) optimized C++ solutions.

Here are the timings from an example run on an i7-7700K CPU overclocked at 4.60 GHz.  The total is greater than the sum of the individual days because of rounding.

    Day  1       72 μs
    Day  2       27 μs
    Day  3      205 μs
    Day  4       82 μs
    Day  5      414 μs
    Day  6    1,346 μs
    Day  7        3 μs
    Day  8       62 μs
    Day  9    4,385 μs
    Day 10       21 μs
    Day 11      485 μs
    Day 12       61 μs
    Day 13      642 μs
    Day 14   19,067 μs
    Day 15    2,132 μs
    Day 16       80 μs
    Day 17      544 μs
    Day 18      307 μs
    Day 19        2 μs
    Day 20       92 μs
    Day 21      101 μs
    Day 22    3,546 μs
    Day 23      383 μs
    Day 24    6,711 μs
    Day 25      177 μs
    ------------------
    Total    40,959 μs

Solutions should work with any puzzle input, provided it is byte-for-byte an exact copy of the file downloaded from Advent of Code.  When an input is given as a number inline with the puzzle text (days 11 and 14), the input file should contain only the number itself followed by a single line feed character (ASCII 12).

This code makes extensive use of SIMD techniques and requires a CPU that supports the AVX2 instruction set.

# Summary of solutions

Here are a few brief notes about each solution.

## Day 1

See [this post](https://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukxu5) on the subreddit.

## Day 2

Each 26-character word fits in a 32-byte AVX2 register, which allows for very fast comparisons.  Exploits regularities in the input to eliminate many candidate words from consideration.

## Day 3

Represents a row of fabric as a 1024-bit mask (16 64-bit integers.)  Scans the fabric vertically one row at a time using a sweep-line algorithm, considering only those claims which intersect the current row, 20-25 claims on average.

## Day 4

SIMD solution that stores the 60 minutes of the hour in two 32x8 bit AVX2 vectors.

## Day 5

Straightforward stack-based solution.  Tried various ways to prune the Part 2 search, but the added bookkeeping outweighed the time saved.

## Day 6

Part 1 is a basic flood fill; part 2 is a sweep-line algorithm that traces the outline of the ""safe"" region.

## Day 7

A SIMD take on topological sorting.  The letters A-Z fit nicely within a 32x8 AVX2 vector.

## Day 8

Straightforward recursive solution.

## Day 9

A shuffle/permute heavy SIMD implementation of the marble game's rules, in 23-turn increments.  Only needs to fully simulate ~43% of the game; the score for the remainder of the game can be found by tallying up every 16th marble in the array.

## Day 10

Calculates Part 2 based on the fastest-moving particles in the y-direction.  The final position of each star is added to a bitmap of eight 64-bit integers (each letter is 6x10.)  The resulting values are converted to letters by hashtable lookup.

## Day 11

Builds an integral image (summed area table) of the 300x300 area, and does so in a way that the compiler can vectorize.  Searching for the solutions is done via explicit SIMD.  Stops the search at ""6 sigmas"" of confidence.

## Day 12

Live/dead cells are stored as a bool vector, which C++ implements as a bitset.  Comparing the previous and current states is very fast; my input stabilizes at a vector length of 190, which is only 3 64-bit integers.  The rules are stored as a single 32-bit integer, and are evaluated by iterating over the current state with a 5-bit rolling window, which is used to index individual bits in the rules integer.

## Day 13

Fairly straightforward simulation of the minecarts.

## Day 14

This was the hardest puzzle to optimize.  The irregular write pattern limits the ability to vectorize the loop.  See [this post](https://www.reddit.com/r/adventofcode/comments/a6wpwa/2018_day_14_breaking_the_1_billion_recipes_per/) for a detailed description.

## Day 15

The 32x32 map fits in four 256-bit AVX2 registers when treated as a bitmap.  This makes for quick pathfinding by bitwise flood fill.  The map is split into three 1024-bit overlays: open space, elves, and goblins.

## Day 16

Mostly straightforward, using bit fields to keep track of which opcodes are valid for which instructions.

## Day 17

Recursively traces where the water flows.  I didn't spend much time trying to optimizing this; it is mostly just a copy/paste from my original solution repository.

## Day 18

A SIMD bonanza, even when ""parsing"" the input (which just does a SIMD bitwise AND with `0x11` on 32 input characters at a time to produce `0x00` for open space, `0x10` for trees, and `0x01` for lumberyards.)  This is actually a SIMD/SWAR hybrid, because the trees and lumberyards each occupy 4-bit fields within each 8-bit field of the 32-byte AVX2 register.

## Day 19

Executes instructions until it reaches the main loop.  Uses wheel factorization to find the prime factors, which are used to compute the divisor sum.

## Day 20

Exploits how the input was generated to solve both parts using a small stack of coordinate/distance and an even smaller cache of recently visited coordinates.

## Day 21

Reads only one number from the input (the only one that matters), and uses it as input to an optimized SIMD version of the generator.  Uses Brent's cycle-detection algorithm to solve Part 2.

## Day 22

Very minimalistic A\* using a 17-bucket priority queue.  Tool switching is done by bitwise arithmetic between tool and terrain.

## Day 23

See [this discussion](https://www.reddit.com/r/adventofcode/comments/a9co1u/day_23_part_2_adversarial_input_for_recursive/ecmpxad) on the subreddit.

## Day 24

Predetermines which groups are valid targets of each other, keeping a separate list of targets that are weak to the attack type.  These lists are stored as bitmasks.  Avoids sorting the array of attackers each round; instead, when a group is damaged, it bubbles down the target-selection list (they rarely move more than 1-2 slots at a time, if any.)  Otherwise, this is just a straight simulation of the battles.

## Day 25

Union-find algorithm, in cooperation with SIMD pairwise comparisons between each of the points.
",Voltara/advent2018-fast
6,wimglenn,Python,{'Python': 72056},"Advent of Code data
===================

|pyversions|_ |pypi|_ |womm|_ |travis|_ |coveralls|_

.. |pyversions| image:: https://img.shields.io/pypi/pyversions/advent-of-code-data.svg
.. _pyversions: 

.. |pypi| image:: https://img.shields.io/pypi/v/advent-of-code-data.svg
.. _pypi: https://pypi.org/project/advent-of-code-data/

.. |womm| image:: https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg
.. _womm: https://github.com/nikku/works-on-my-machine

.. |travis| image:: https://img.shields.io/travis/wimglenn/advent-of-code-data.svg?branch=master
.. _travis: https://travis-ci.com/wimglenn/advent-of-code-data

.. |coveralls| image:: https://coveralls.io/repos/github/wimglenn/advent-of-code-data/badge.svg?branch=master
.. _coveralls: https://coveralls.io/github/wimglenn/advent-of-code-data?branch=master


Get your puzzle data with a single import statement:

.. code-block:: python

   from aocd import data

Might be useful for lazy Pythonistas and speedhackers.  

**Note:  Please use version 0.3+ of this library.**  It memoizes successful
requests client side and rate-limits the get_data function, as
`requested by the AoC author <https://www.reddit.com/r/adventofcode/comments/3v64sb/aoc_is_fragile_please_be_gentle/>`_.
Thanks!


Quickstart
----------

Install with pip

.. code-block:: bash

   pip install advent-of-code-data

**Puzzle inputs differ by user.**   So export your session ID, for example:

.. code-block:: bash

   export AOC_SESSION=cafef00db01dfaceba5eba11deadbeef

This is a cookie which is set when you login to AoC.  You can find it with
your browser inspector.  If you're hacking on AoC at all you probably already
know these kind of tricks, but if you need help with that part then you can
`look here <https://github.com/wimglenn/advent-of-code/issues/1>`_.

*Note:* If you don't like the env var, you could also put into a text file
in your home directory (use the filename ``~/.config/aocd/token``).


Automated submission
--------------------

*New in version 0.4.0.* Basic use:

.. code-block:: python

   from aocd import submit
   submit(my_answer, part=""a"", day=25, year=2017)

Note that the same filename introspection of year/day also works for automated
submission. There's also introspection of the ""level"", i.e. part a or part b,
aocd can automatically determine if you have already completed part a or not
and submit your answer for the correct part accordingly. In this case, just use:

.. code-block:: python

   from aocd import submit
   submit(my_answer)

The response message from AoC will be printed in the terminal. If you gave
the right answer, then the puzzle will be refreshed in your web browser
(so you can read the instructions for the next part, for example).
**Proceed with caution!** If you submit wrong guesses, your user **WILL**
get rate-limited by Eric, so don't call submit until you're fairly confident
you have a correct answer!


OOP-style interfaces
--------------------

*New in version 0.8.0.*

Input data is via regular attribute access. Example usage:

.. code-block:: python

    >>> from aocd.models import Puzzle
    >>> puzzle = Puzzle(year=2017, day=20)
    >>> puzzle
    <Puzzle(2017, 20) at 0x107322978 - Particle Swarm>
    >>> puzzle.input_data
    'p=<-1027,-979,-188>, v=<7,60,66>, a=<9,1,-7>\np=<-1846,-1539,-1147>, v=<88,145,67>, a=<6,-5,2> ...

Submitting answers is also by regular attribute access. Any incorrect answers you submitted are remembered, and aocd will prevent you from attempting to submit the same incorrect value twice:

.. code-block:: python

    >>> puzzle.answer_a = 299
    That's not the right answer; your answer is too high. If you're stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]
    >>> puzzle.answer_a = 299
    aocd will not submit that answer again. You've previously guessed 299 and the server responded:
    That's not the right answer; your answer is too high. If you're stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]

Solutions can be executed using `setuptools style plugins <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ for your code, i.e. the ``pkg_resources`` ""entry-points"". My entry-point name is ""wim"" so an example for running `my code <https://github.com/wimglenn/advent-of-code-wim/blob/master/setup.py#L30>`_ (after ``pip install advent-of-code-wim``) would be:

.. code-block:: python

    >>> puzzle = Puzzle(year=2018, day=10)
    >>> puzzle.solve_for(""wim"")
    ('XLZAKBGZ', '10656')


Verify your code against multiple different inputs
--------------------------------------------------

*New in version 0.8.0.*

Ever tried running your code against other people's inputs? AoC is full of tricky edge cases. You may find that sometimes you're only getting the right answer by luck, and your code will fail on some other dataset. Using aocd, you can collect a few different auth tokens for each of your accounts (github/google/reddit/twitter) and verify your answers across multiple datasets.

To see an example of how to setup the entry-point for your code, look at `advent-of-code-sample <https://github.com/wimglenn/advent-of-code-sample>`_ for some inspiration. After dumping a bunch of session tokens into ``~/.config/aocd/tokens.json`` you could do something like this by running the ``aoc`` console script:

.. image:: https://user-images.githubusercontent.com/6615374/52138567-26e09f80-2613-11e9-8eaf-c42757bc9b86.png

As you can see above, I actually had incorrect code for `2017 Day 20: Particle Swarm <https://adventofcode.com/2017/day/20>`_, but that `bug <https://github.com/wimglenn/advent-of-code-wim/commit/31e454270001c6d06b46014fe5dafd03e29507b8>`_ only showed up for the google token's dataset. Whoops. Also, it looks like my algorithm for `2017 Day 13: Packet Scanners <https://adventofcode.com/2017/day/13>`_ was kinda garbage. Too slow. According to `AoC FAQ <https://adventofcode.com/about>`_:

  *every problem has a solution that completes in at most 15 seconds on ten-year-old hardware*

By the way, the ``aoc`` runner will kill your code if it takes more than 60 seconds, you can increase/decrease this by passing a command-line option, e.g. ``--timeout=120``.


How does this library work?
---------------------------

It will automatically get today's data at import time, if used within the 
interactive interpreter.  Otherwise, the date is found by introspection of the
path and file name from which ``aocd`` module was imported.  

This means your filenames should be something sensible. The examples below
should all parse correctly, because they have digits in the path that are
unambiguously recognisable as AoC years (2015+) or days (1-25).

.. code-block::

   q03.py 
   xmas_problem_2016_25b_dawg.py
   ~/src/aoc/2015/p8.py

A filename like ``problem_one.py`` will not work, so don't do that.  If
you don't like weird frame hacks, just use the ``aocd.get_data()`` function 
instead and have a nice day!

.. code-block:: python

   >>> from aocd import get_data
   >>> get_data(day=2)
   'UULDRRRDDLRLURUUURUURDRUURRDRRURUD...
   >>> get_data(day=24, year=2015)
   '1\n2\n3\n7\n11\n13\n17\n19\n23\n31...


Cache invalidation?
-------------------

``aocd`` saves puzzle inputs, answers, names, and your bad guesses to avoid hitting
the AoC servers any more often than strictly necessary (this also speeds things up).
All data is persisted in plain text files under ``~/.config/aocd``. To remove any
caches, you may simply delete whatever files you want under that directory tree.
If you'd prefer to use a different path, then export an ``AOCD_DIR`` environment
variable with the desired location.
",wimglenn/advent-of-code-data
7,ChrisPenner,Python,"{'Python': 92590, 'PHP': 54200, 'C': 49087, 'Erlang': 47206, 'Perl': 42895, 'Java': 41786, 'Haskell': 41327, 'Groovy': 29161, 'C++': 25773, 'Scala': 16815, 'C#': 15792, 'Rust': 14898, 'Elixir': 12633, 'Go': 10628, 'Ruby': 5023, 'Kotlin': 3291, 'Awk': 1622}","Advent of Code
==============

This is a collection of [Advent of Code](http://adventofcode.com/) solutions in
many different programming languages.

For the uninitiated, [Advent of Code](http://adventofcode.com/) is a series of
programming challenges, a new one is released each day until Dec. 25th.

Each challenge requires thinking in a different way to solve it, and for this
reason it provides an interesting look at how programming languages approach
each problem.

You'll notice that in any given situation, the idiomatic Python way of solving
something will be very different from the Haskell or Lisp way of doing things.

Guidelines
----------

-   Create a Pull Request for any contributions.
-   Feel free to put your name or website in a comment at the top of your
    solution if you like.
-   I won't merge any solutions until a few days after each problem is released
    to allow the dust to settle, don't rush in making your PR's, it's not first
    come first merged.
-   The goal of the project is to see the most idiomatic way to solve each
    problem in a given language, for this reason I will keep only the solution
    which I feel best encapsulates 'idiomatic' code of that language. (Or will
    defer to the community in cases where it is unclear)
-   Please don't include your problem's 'input.txt' or solution, as these are
    different for each person.
-   Please put each solution (part 1 and part 2) into separate files (even if
    there's a bit of code duplication) it makes it easier to figure out what's
    going on.
-   Solutions should be easy to read (even for people who don't know the
    programming language), so include comments explaining your solution and any
    interesting
-   programming language tricks/idioms you're using.
-   In pull requests please follow the established pattern:
-   `year/language-name/day-num/part#.extension`

Don't get too competitive about it, someone else's solution may be accepted instead
of yours, keep working at it and try to be as elegant and idiomatic as possible!

Remember to have fun!!
",ChrisPenner/Advent-Of-Code-Polyglot
8,jaksi,Python,{'Python': 2040},"# Advent of Other People's Code
Fetches random solutions to a specified [Advent of Code](https://adventofcode.com/) puzzle from GitHub and runs them against your input
![Grinch](grinch.png)
## Usage
Let me rephrase. This is going to get some random code from GitHub and run it on your machine. Don't use it.

## Really tho
### Create a virtualenv
```sh
python3 -m venv env
source env/bin/activate
```

### Install requirements
```sh
pip install -r requirements.txt
```

### Genrate a GitHub personal access token
[Right here](https://github.com/settings/tokens/new), with the `public_repo` scope.

### Run it
Please, don't!

### I said run it!
```shellsession
$ python advent.py --token $GITHUB_TOKEN --year 2018 --day 3 --input input.txt
Patching open() to always return your input file
Searching for repositories
Searching for a solution in Karlovsky120/AdventOfCode2018
Searching for a solution in grey-area/advent-of-code-2018
Searching for a solution in stefsiekman/aoc2018
Searching for a solution in BenSchomp/adventofcode2018
Searching for a solution in speedyswimmer1000/AoC2018
About to blindly run https://github.com/speedyswimmer1000/AoC2018/blob/master/day3.py.
Type yes if you think that's a good idea.
Hint: it's not.
yes
Running it, stand back.
It raised an exception.
Searching for a solution in zinh/advent-of-code-2018
Searching for a solution in aaralh/AdventOfCode
Searching for a solution in athas/advent_of_code_2018
Searching for a solution in hawkjo/advent_of_code_2018
Searching for a solution in Landmaj/AoC_2018
Searching for a solution in paiv/aoc2018
Searching for a solution in helenacruz/adventofcode2018
Searching for a solution in StevTheDev/AoC2018
Searching for a solution in zoeimogen/AoC2018
Searching for a solution in awyd234/adventofcode
Searching for a solution in muffinsofgreg/adventcode2018
Searching for a solution in asberk/aoc18
About to blindly run https://github.com/asberk/aoc18/blob/master/03.py.
Type yes if you think that's a good idea.
Hint: it's not.
yes
Running it, stand back.
It raised an exception.
Searching for a solution in coandco/advent2018
Searching for a solution in ChrisDoubleEwe/AdventOfCode2018
Searching for a solution in veeraita/advent_of_code_2018
Searching for a solution in protocol7/advent-of-code-2018
Searching for a solution in SpionSkummis/Advent-of-Code-2018
About to blindly run https://github.com/SpionSkummis/Advent-of-Code-2018/blob/master/Erik/Day3.py.
Type yes if you think that's a good idea.
Hint: it's not.
yes
Running it, stand back.
The number of squares cut more than once is: 119551
The non-overlapping square was found at nr 1124
Was that the right answer?
yes
```
",jaksi/advent-of-other-peoples-code
9,molyswu,Python,{'Python': 34169},"using Neural Networks (SSD) on Tensorflow.

This repo documents steps and scripts used to train a hand detector using Tensorflow (Object Detection API). As with any DNN based task, the most expensive (and riskiest) part of the process has to do with finding or creating the right (annotated) dataset. I was interested mainly in detecting hands on a table (egocentric view point). I experimented first with the [Oxford Hands Dataset](http://www.robots.ox.ac.uk/~vgg/data/hands/) (the results were not good). I then tried the [Egohands Dataset](http://vision.soic.indiana.edu/projects/egohands/) which was a much better fit to my requirements.

The goal of this repo/post is to demonstrate how neural networks can be applied to the (hard) problem of tracking hands (egocentric and other views). Better still, provide code that can be adapted to other uses cases.

If you use this tutorial or models in your research or project, please cite [this](#citing-this-tutorial).

Here is the detector in action.

<img src=""images/hand1.gif"" width=""33.3%""><img src=""images/hand2.gif"" width=""33.3%""><img src=""images/hand3.gif"" width=""33.3%"">
Realtime detection on video stream from a webcam .

<img src=""images/chess1.gif"" width=""33.3%""><img src=""images/chess2.gif"" width=""33.3%""><img src=""images/chess3.gif"" width=""33.3%"">
Detection on a Youtube video.

Both examples above were run on a macbook pro **CPU** (i7, 2.5GHz, 16GB). Some fps numbers are:


| FPS  | Image Size | Device| Comments|
| ------------- | ------------- | ------------- | ------------- |
| 21  | 320 * 240  | Macbook pro (i7, 2.5GHz, 16GB) | Run without visualizing results|
| 16  | 320 * 240  | Macbook pro (i7, 2.5GHz, 16GB) | Run while visualizing results (image above) |
| 11  | 640 * 480  | Macbook pro (i7, 2.5GHz, 16GB) | Run while visualizing results (image above) |

> Note: The code in this repo is written and tested with Tensorflow `1.4.0-rc0`. Using a different version may result in [some errors](https://github.com/tensorflow/models/issues/1581).
You may need to [generate your own frozen model](https://pythonprogramming.net/testing-custom-object-detector-tensorflow-object-detection-api-tutorial/?completed=/training-custom-objects-tensorflow-object-detection-api-tutorial/) graph using the [model checkpoints](model-checkpoint) in the repo to fit your TF version.



**Content of this document**
- Motivation - Why Track/Detect hands with Neural Networks
- Data preparation and network training in Tensorflow (Dataset, Import, Training)
- Training the hand detection Model
- Using the Detector to Detect/Track hands
- Thoughts on Optimizations.

> P.S if you are using or have used the models provided here, feel free to reach out on twitter ([@vykthur](https://twitter.com/vykthur)) and share your work!

## Motivation - Why Track/Detect hands with Neural Networks?

There are several existing approaches to tracking hands in the computer vision domain. Incidentally, many of these approaches are rule based (e.g extracting background based on texture and boundary features, distinguishing between hands and background using color histograms and HOG classifiers,) making them not very robust. For example, these algorithms might get confused if the background is unusual or in situations where sharp changes in lighting conditions cause sharp changes in skin color or the tracked object becomes occluded.(see [here for a review](https://www.cse.unr.edu/~bebis/handposerev.pdf) paper on hand pose estimation from the HCI perspective)

With sufficiently large datasets, neural networks provide opportunity to train models that perform well and address challenges of existing object tracking/detection algorithms - varied/poor lighting, noisy environments, diverse viewpoints and even occlusion. The main drawbacks to usage for real-time tracking/detection is that they can be complex, are relatively slow compared to tracking-only algorithms and it can be quite expensive to assemble a good dataset. But things are changing with advances in fast neural networks.

Furthermore, this entire area of work has been made more approachable by deep learning frameworks (such as the tensorflow object detection api) that simplify the process of training a model for custom object detection. More importantly, the advent of fast neural network models like ssd, faster r-cnn, rfcn (see [here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models-coco-models) ) etc make neural networks an attractive candidate for real-time detection (and tracking) applications. Hopefully, this repo demonstrates this.

> If you are not interested in the process of training the detector, you can skip straight to applying the [pretrained model I provide in detecting hands](#detecting-hands).

Training a model is a multi-stage process (assembling dataset, cleaning, splitting into training/test partitions and generating an inference graph). While I lightly touch on the details of these parts, there are a few other tutorials cover training a custom object detector using the tensorflow object detection api in more detail[ see [here](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) and [here](https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9) ]. I recommend you walk through those if interested in training a custom object detector from scratch.

## Data preparation and network training in Tensorflow (Dataset, Import, Training)

**The Egohands Dataset**

The hand detector model is built using data from the [Egohands Dataset](http://vision.soic.indiana.edu/projects/egohands/) dataset. This dataset works well for several reasons. It contains high quality, pixel level annotations (>15000 ground truth labels) where hands are located across 4800 images. All images are captured from an egocentric view (Google glass) across 48 different environments (indoor, outdoor) and activities (playing cards, chess, jenga, solving puzzles etc).

<img src=""images/egohandstrain.jpg"" width=""100%"">

If you will be using the Egohands dataset, you can cite them as follows:

> Bambach, Sven, et al. ""Lending a hand: Detecting hands and recognizing activities in complex egocentric interactions."" Proceedings of the IEEE International Conference on Computer Vision. 2015.

The Egohands dataset (zip file with labelled data) contains 48 folders of locations where video data was collected (100 images per folder).
```
-- LOCATION_X
  -- frame_1.jpg
  -- frame_2.jpg
  ...
  -- frame_100.jpg
  -- polygons.mat  // contains annotations for all 100 images in current folder
-- LOCATION_Y
  -- frame_1.jpg
  -- frame_2.jpg
  ...
  -- frame_100.jpg
  -- polygons.mat  // contains annotations for all 100 images in current folder
  ```

**Converting data to Tensorflow Format**

Some initial work needs to be done to the Egohands dataset to transform it into the format (`tfrecord`) which Tensorflow needs to train a model. This repo contains `egohands_dataset_clean.py` a script that will help you generate these csv files.

- Downloads the egohands datasets
- Renames all files to include their directory names to ensure each filename is unique
- Splits the dataset into train (80%), test (10%) and eval (10%) folders.
- Reads in `polygons.mat` for each folder, generates bounding boxes and visualizes them to ensure correctness (see image above).
- Once the script is done running, you should have an images folder containing three folders - train, test and eval. Each of these folders should also contain a csv label document each - `train_labels.csv`, `test_labels.csv`  that can be used to generate `tfrecords`

Note: While the egohands dataset provides four separate labels for hands (own left, own right, other left, and other right), for my purpose, I am only interested in the general `hand` class and label all training data as `hand`. You can modify the data prep script to generate `tfrecords` that support 4 labels.

Next: convert your dataset + csv files to tfrecords. A helpful guide on this can be found [here](https://pythonprogramming.net/creating-tfrecord-files-tensorflow-object-detection-api-tutorial/).For each folder, you should be able to generate  `train.record`, `test.record` required in the training process.


## Training the hand detection Model

Now that the dataset has been assembled (and your tfrecords), the next task is to train a model based on this. With neural networks, it is possible to use a process called [transfer learning](https://www.tensorflow.org/tutorials/image_retraining) to shorten the amount of time needed to train the entire model. This means we can take an existing model (that has been trained well on a related domain (here image classification) and retrain its final layer(s) to detect hands for us. Sweet!. Given that neural networks sometimes have thousands or millions of parameters that can take weeks or months to train, transfer learning helps shorten training time to possibly hours. Tensorflow does offer a few models (in the tensorflow [model zoo](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models-coco-models)) and I chose to use the `ssd_mobilenet_v1_coco` model as my start point given it is currently (one of) the fastest models (read the SSD research [paper here](https://arxiv.org/pdf/1512.02325.pdf)). The training process can be done locally on your CPU machine which may take a while or better on a (cloud) GPU machine (which is what I did). For reference, training on my macbook pro (tensorflow compiled from source to take advantage of the mac's cpu architecture) the maximum speed I got was 5 seconds per step as opposed to the ~0.5 seconds per step I got with a GPU. For reference it would take about 12 days to run 200k steps on my mac (i7, 2.5GHz, 16GB) compared to ~5hrs on a GPU.

> **Training on your own images**: Please use the [guide provided by Harrison from pythonprogramming](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) on how to generate tfrecords given your label csv files and your images. The guide also covers how to start the training process if training locally. [see [here] (https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/)]. If training in the cloud using a service like GCP, see the [guide here](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_on_cloud.md).

As the training process progresses, the expectation is that total loss (errors) gets reduced to its possible minimum (about a value of 1 or thereabout). By observing the tensorboard graphs for total loss(see image below), it should be possible to get an idea of when the training process is complete (total loss does not decrease with further iterations/steps). I ran my training job for 200k steps (took about 5 hours) and stopped at a total Loss (errors) value of 2.575.(In retrospect, I could have stopped the training at about 50k steps and gotten a similar total loss value). With tensorflow, you can also run an evaluation concurrently that assesses your model to see how well it performs on the test data. A commonly used metric for performance is mean average precision (mAP) which is single number used to summarize the area under the precision-recall curve.  mAP is a measure of how well the model generates a bounding box that has at least a 50% overlap with the ground truth bounding box in our test dataset. For the hand detector trained here, the mAP value was **0.9686@0.5IOU**. mAP values range from 0-1, the higher the better.  


<img src=""images/accuracy.jpg"" width=""100%"">

Once training is completed, the trained inference graph (`frozen_inference_graph.pb`) is then exported (see the earlier referenced guides for how to do this) and saved in the `hand_inference_graph` folder. Now its time to do some interesting detection.

## Using the Detector to Detect/Track hands


If you have not done this yet, please following the guide on installing [Tensorflow and the Tensorflow object detection api](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md). This will walk you through setting up the tensorflow framework, cloning the tensorflow github repo and a guide on  

- Load the `frozen_inference_graph.pb` trained on the hands dataset as well as the corresponding label map. In this repo, this is done in the `utils/detector_utils.py` script by the `load_inference_graph` method.
  ```python
  detection_graph = tf.Graph()
    with detection_graph.as_default():
        od_graph_def = tf.GraphDef()
        with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
            serialized_graph = fid.read()
            od_graph_def.ParseFromString(serialized_graph)
            tf.import_graph_def(od_graph_def, name='')
        sess = tf.Session(graph=detection_graph)
    print("">  ====== Hand Inference graph loaded."")
  ```
- Detect hands. In this repo, this is done in the `utils/detector_utils.py` script by the `detect_objects` method.
  ```python
  (boxes, scores, classes, num) = sess.run(
        [detection_boxes, detection_scores,
            detection_classes, num_detections],
        feed_dict={image_tensor: image_np_expanded})
  ```
- Visualize detected bounding detection_boxes. In this repo, this is done in the `utils/detector_utils.py` script by the `draw_box_on_image` method.


This repo contains two scripts that tie all these steps together.

- detect_multi_threaded.py : A threaded implementation for reading camera video input detection and detecting. Takes a set of command line flags to set parameters such as `--display` (visualize detections), image parameters `--width` and `--height`, videe `--source` (0 for camera) etc.
- detect_single_threaded.py : Same as above, but single threaded. This script works for video files by setting the video source parameter videe `--source` (path to a video file).


```cmd
  # load and run detection on video at path ""videos/chess.mov""
  python detect_single_threaded.py --source videos/chess.mov
```

> Update: If you do have errors loading the frozen inference graph in this repo, feel free to generate a new graph that fits your TF version from the model-checkpoint in this repo.
Use the [export_inference_graph.py](https://github.com/tensorflow/models/blob/master/research/object_detection/export_inference_graph.py) script provided in the tensorflow object detection api repo.
More guidance on this [here](https://pythonprogramming.net/testing-custom-object-detector-tensorflow-object-detection-api-tutorial/?completed=/training-custom-objects-tensorflow-object-detection-api-tutorial/).

## Thoughts on Optimization.
A few things that led to noticeable performance increases.

- Threading: Turns out that reading images from a webcam is a heavy I/O event and if run on the main application thread can slow down the program. I implemented some good ideas from [Adrian Rosebuck](https://www.pyimagesearch.com/2017/02/06/faster-video-file-fps-with-cv2-videocapture-and-opencv/) on parrallelizing image capture across multiple worker threads. This mostly led to an FPS increase of about 5 points.
- For those new to Opencv, images from the `cv2.read()` method return images in [BGR format](https://www.learnopencv.com/why-does-opencv-use-bgr-color-format/). Ensure you convert to RGB before detection (accuracy will be much reduced if you dont).
```python
cv2.cvtColor(image_np, cv2.COLOR_BGR2RGB)
```
- Keeping your input image small will increase fps without any significant accuracy drop.(I used about 320 x 240 compared to the 1280 x 720 which my webcam provides).

- Model Quantization. Moving from the current 32 bit to 8 bit can achieve up to 4x reduction in memory required to load and store models. One way to further speed up this model is to explore the use of [8-bit fixed point quantization](https://heartbeat.fritz.ai/8-bit-quantization-and-tensorflow-lite-speeding-up-mobile-inference-with-low-precision-a882dfcafbbd).

Performance can also be increased by a clever combination of tracking algorithms with the already decent detection and this is something I am still experimenting with. Have ideas for optimizing better, please share!

<img src=""images/general.jpg"" width=""100%"">
Note: The detector does reflect some limitations associated with the training set. This includes non-egocentric viewpoints, very noisy backgrounds (e.g in a sea of hands) and sometimes skin tone.  There is opportunity to improve these with additional data.


## Integrating Multiple DNNs.

One way to make things more interesting is to integrate our new knowledge of where ""hands"" are with other detectors trained to recognize other objects. Unfortunately, while our hand detector can in fact detect hands, it cannot detect other objects (a factor or how it is trained). To create a detector that classifies multiple different objects would mean a long involved process of assembling datasets for each class and a lengthy training process.  

> Given the above, a potential strategy is to explore structures that allow us **efficiently** interleave output form multiple pretrained models for various object classes and have them detect multiple objects on a single image.  

An example of this is with my primary use case where I am interested in understanding the position of objects on a table with respect to hands on same table. I am currently doing some work on a threaded application that loads multiple detectors and outputs bounding boxes on a single image. More on this soon.

## Acknowledgements

This work also served as an intense weekend crash course for me to learn Python and Tensorflow. It would be impossible without the Egohands Dataset, many thanks to the authors! The tensorflow custom object detection guides by [Harrison from pythonprogramming](https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/) and [Dat Tran](https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9) were immensely helpful to this learning process. And ofcourse, many thanks to the Tensorflow authors! Its a great frameworks!




If you have created something cool, send me a note (or tweet) and I'll be happy to include it here!

## Citing this tutorial

If you'd like to cite this work, use the below.

Victor Dibia, Real-time Hand-Detection using Neural Networks (SSD) on Tensorflow, (2017), GitHub repository, https://github.com/victordibia/handtracking
```bib
",molyswu/hand_detection
10,mfikes,Clojure,{'Clojure': 60613},"# Advent of Code

[Advent of Code](http://adventofcode.com) in Clojure and Self-Hosted ClojureScript.

## Clojure

```
clj
```

## Self-Hosted ClojureScript

```
plk
```
",mfikes/advent-of-code
11,dlew,Kotlin,{'Kotlin': 21391},"# Advent of Code 2017

Here's a blank template for working on the [Advent of Code (2017)](http://adventofcode.com/2017). It's got all the
tests you could possibly want with the answers obscured. Just work your way through the puzzles until all the tests
pass!

You can find the puzzle questions [here](http://adventofcode.com/2017).

You can find my answers [here](https://github.com/dlew/aoc-2017/tree/answers). I make no claim to them being any good,
only that they arrive at the correct answer.

[@danlew42](https://twitter.com/danlew42)
",dlew/aoc-2017
12,mstksg,Haskell,{'Haskell': 60017},"Advent of Code 2017
===================

*[2016][]* / *2017* / *[2018][]* / *[2019][]*

[2016]: https://github.com/mstksg/advent-of-code-2016
[2018]: https://github.com/mstksg/advent-of-code-2018
[2019]: https://github.com/mstksg/advent-of-code-2019

**Warning: Spoilers**

[Reflections and Benchmarks][RnB]
---------------------------------

[RnB]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md

I try to reflect on every day's puzzle, attempting to describe my thought
processes and how my solutions all work.  Benchmarks also included.

*   **[Day 1 Reflections][d1r]** *([code][d1c])* *([benchmarks][d1b])*
*   **[Day 2 Reflections][d2r]** *([code][d2c])* *([benchmarks][d2b])*
*   **[Day 3 Reflections][d3r]** *([code][d3c])* *([benchmarks][d3b])*
*   **[Day 4 Reflections][d4r]** *([code][d4c])* *([benchmarks][d4b])*
*   **[Day 5 Reflections][d5r]** *([code][d5c])* *([benchmarks][d5b])*
*   **[Day 6 Reflections][d6r]** *([code][d6c])* *([benchmarks][d6b])*
*   **[Day 7 Reflections][d7r]** *([code][d7c])* *([benchmarks][d7b])*
*   **[Day 8 Reflections][d8r]** *([code][d8c])* *([benchmarks][d8b])*
*   **[Day 9 Reflections][d9r]** *([code][d9c])* *([benchmarks][d9b])* *([stream][d9s])*
*   **[Day 10 Reflections][d10r]** *([code][d10c])* *([benchmarks][d10b])* *([stream][d10s])*
*   **[Day 11 Reflections][d11r]** *([code][d11c])* *([benchmarks][d11b])*
*   **[Day 12 Reflections][d12r]** *([code][d12c])* *([benchmarks][d12b])*
*   **[Day 13 Reflections][d13r]** *([code][d13c])* *([benchmarks][d13b])*
*   **[Day 14 Reflections][d14r]** *([code][d14c])* *([benchmarks][d14b])*
*   **[Day 15 Reflections][d15r]** *([code][d15c])* *([benchmarks][d15b])*
*   **[Day 16 Reflections][d16r]** *([code][d16c])* *([benchmarks][d16b])*
*   **[Day 17 Reflections][d17r]** *([code][d17c])* *([benchmarks][d17b])*
*   **Day 18 Reflections** *([code][d18c])* *([benchmarks][d18b])*
*   **[Day 19 Reflections][d19r]** *([code][d19c])* *([benchmarks][d19b])*
*   **Day 20 Reflections** *([code][d20c])* *([benchmarks][d20b])*
*   **Day 21 Reflections** *([code][d21c])* *([benchmarks][d21b])*
*   **Day 22 Reflections** *([code][d22c])* *([benchmarks][d22b])*
*   **Day 23 Reflections** *([code][d23c])* *([benchmarks][d23b])*
*   **Day 24 Reflections** *([code][d24c])* *([benchmarks][d24b])*
*   **Day 25 Reflections** *([code][d25c])* *([benchmarks][d25b])*

[d1r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-1
[d2r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-2
[d3r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-3
[d4r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-4
[d5r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-5
[d6r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-6
[d7r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-7
[d8r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-8
[d9r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-9
[d10r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-10
[d11r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-11
[d12r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-12
[d13r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-13
[d14r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-14
[d15r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-15
[d16r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-16
[d17r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-17
[d18r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-18
[d19r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-19
[d20r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-20
[d21r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-21
[d22r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-22
[d23r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-23
[d24r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-24
[d25r]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-25

[d1c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day01.hs
[d2c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day02.hs
[d3c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day03.hs
[d4c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day04.hs
[d5c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day05.hs
[d6c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day06.hs
[d7c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day07.hs
[d8c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day08.hs
[d9c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day09.hs
[d10c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day10.hs
[d11c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day11.hs
[d12c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day12.hs
[d13c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day13.hs
[d14c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day14.hs
[d15c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day15.hs
[d16c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day16.hs
[d17c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day17.hs
[d18c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day18.hs
[d19c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day19.hs
[d20c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day20.hs
[d21c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day21.hs
[d22c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day22.hs
[d23c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day23.hs
[d24c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day24.hs
[d25c]: https://github.com/mstksg/advent-of-code-2017/blob/master/src/AOC2017/Day25.hs

[d1b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-1-benchmarks
[d2b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-2-benchmarks
[d3b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-3-benchmarks
[d4b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-4-benchmarks
[d5b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-5-benchmarks
[d6b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-6-benchmarks
[d7b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-7-benchmarks
[d8b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-8-benchmarks
[d9b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-9-benchmarks
[d10b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-10-benchmarks
[d11b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-11-benchmarks
[d12b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-12-benchmarks
[d13b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-13-benchmarks
[d14b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-14-benchmarks
[d15b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-15-benchmarks
[d16b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-16-benchmarks
[d17b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-17-benchmarks
[d18b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-18-benchmarks
[d19b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-19-benchmarks
[d20b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-20-benchmarks
[d21b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-21-benchmarks
[d22b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-22-benchmarks
[d23b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-23-benchmarks
[d24b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-24-benchmarks
[d25b]: https://github.com/mstksg/advent-of-code-2017/blob/master/reflections.md#day-25-benchmarks

[d9s]: https://www.twitch.tv/videos/207969022
[d10s]: https://www.twitch.tv/videos/208287550

Executable
----------

Comes with test examples given in problems.

You can install using `stack`:

```bash
$ git clone https://github.com/mstksg/advent-of-code-2017
$ cd advent-of-code-2017
$ stack setup
$ stack install
```

The executable `aoc2017` includes a testing and benchmark suite

```
$ aoc2017 --help
aoc2017 - Advent of Code 2017 challenge runner

Usage: aoc2017 DAY [PART] [-t|--tests] [-b|--bench]
  Run challenges from Advent of Code 2017

Available options:
  DAY                      Day of challenge (1 - 25), or ""all""
  PART                     Challenge part (a, b, c, etc.)
  -t,--tests               Run sample tests
  -b,--bench               Run benchmarks
  -h,--help                Show this help text

$ aoc2017 5 b
>> Day 05b
>> [✓] 27720699
```

Benchmarking is implemented using *criterion*

```
$ aoc2017 2 --bench
>> Day 02a
benchmarking...
time                 729.1 μs   (695.0 μs .. 784.2 μs)
                     0.967 R²   (0.926 R² .. 0.995 R²)
mean                 740.4 μs   (711.9 μs .. 783.6 μs)
std dev              116.8 μs   (70.44 μs .. 172.8 μs)
variance introduced by outliers: 89% (severely inflated)

>> Day 02b
benchmarking...
time                 782.4 μs   (761.3 μs .. 812.9 μs)
                     0.983 R²   (0.966 R² .. 0.998 R²)
mean                 786.7 μs   (764.1 μs .. 849.4 μs)
std dev              110.8 μs   (42.44 μs .. 228.5 μs)
variance introduced by outliers: 86% (severely inflated)
```

Test suites run the example problems given in the puzzle description, and
outputs are colorized in ANSI terminals.

```
$ aoc2017 1 --tests
[9] [!35732] $ aoc2017 1 --tests
>> Day 01a
[✓] (3)
[✓] (4)
[✓] (0)
[✓] (9)
[✓] Passed 4 out of 4 test(s)
[✓] 1097
>> Day 01b
[✓] (6)
[✓] (0)
[✓] (4)
[✓] (12)
[✓] (4)
[✓] Passed 5 out of 5 test(s)
[✓] 1188
```

This should only work if you're running `aoc2017` in the project directory.

**To run on actual inputs**, the executable expects inputs to be found in the
folder `data/XX.txt` in the directory you are running in.  That is, the input
for Day 7 will be expected at `data/07.txt`.

*aoc2017 will download missing input files*, but requires a session token.
This can be provided in `aoc2017-conf.yaml`:

```yaml
session:  [[ session token goes here ]]
```

You can ""lock in"" your current answers (telling the executable that those are
the correct answers) by passing in `--lock`.  This will lock in any final
puzzle solutions encountered as the verified official answers.  Later, if you
edit or modify your solutions, they will be checked on the locked-in answers.

These are store in `data/ans/XXpart.txt`.  That is, the target output for Day 7
(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually
edit these files.

",mstksg/advent-of-code-2017
13,kodsnack,Python,"{'Python': 626052, 'C++': 530814, 'Go': 505169, 'Scala': 305758, 'JavaScript': 199379, 'Haskell': 147224, 'Ada': 125582, 'PHP': 102771, 'MATLAB': 74402, 'OCaml': 66511, 'Java': 62643, 'Shell': 59146, 'Common Lisp': 56817, 'C#': 48941, 'Perl': 43496, 'Rust': 36873, 'Kotlin': 33938, 'OpenEdge ABL': 30199, 'Crystal': 22706, 'Brainfuck': 21606, 'Nim': 15482, 'REXX': 15381, 'Elm': 12434, 'Clojure': 12082, 'Makefile': 11920, 'Visual Basic': 10945, 'Swift': 9969, 'CMake': 7613, 'Limbo': 6363, 'COBOL': 3504, 'Haxe': 3444, 'Pony': 3363, 'PLSQL': 2908, 'Perl 6': 2430, 'PowerShell': 1651, 'sed': 942, 'HTML': 199}","# Advent of code 2017 #
Bidra med dina lösningar på problemen i [Advent of code](http://adventofcode.com/), i vilket språk du vill. Välj ett du kan, eller ett du vill lära dig!

Se till att du går med i advent of code's topplista om du vill ha en chans att vinna kodsnack's tävling. Vårat topplista har ID: `194162-e06e748d`. Det finns även en slack kanal för alla som är med. Maila info@kodsnack.se eller twittra din epost till @kodsnack så släpper vi in er.

De första problemen kommer första december, de sista den tjugofemte, och vi delar ut ett pris till den eller de som dels har högst poäng på den leaderboard vi kommer att skapa, dels bidragit med alla sin lösningar här. Som förra året är det två delproblem för varje dag. Samtliga 50 problem ska alltså finnas med i en komplett lösning. Det är givetvis fritt fram att bidra med lösningar för så många eller få problem man har tid och lust med, tävlingsmomentet är inte det viktiga här!

Dina lösningar får gärna checkas in i en mapp med namn på formen #användarnamn-språk#, så blir det lite lättare för alla att få överblick.

Lösningarna kan komma att diskuteras i avsnitt av Kodsnack, så lägg med en readme.md med en notis om du inte vill riskera att bli omnämnd.
",kodsnack/advent_of_code_2017
14,Diggsey,Rust,{'Rust': 126144},,Diggsey/aoc2018
15,mstksg,Haskell,{'Haskell': 138696},"Advent of Code 2019
=====================

<!--
This file generated by the build script at ./Build.hs
-->

*[2016][]* / *[2017][]* / *[2018][]* / *2019*

[2016]: https://github.com/mstksg/advent-of-code-2016
[2017]: https://github.com/mstksg/advent-of-code-2017
[2018]: https://github.com/mstksg/advent-of-code-2018

It's the most wonderful time of the year!

My [Advent of Code 2019][aoc] Haskell solutions here, along with an automated
fetching, testing, running environment (powered by the
*[advent-of-code-api][]* library).  The interactive development environment and
runner/bench marker/viewer/tester has been pulled out [here][dev], so this is
implemented as ""fork"" of it with my own solutions and reflections.

Check out the [reflections][] (with [rss feed][rss]) and [package
haddocks][haddock] --- more info below!

[aoc]: https://adventofcode.com/2019
[haddock]: https://mstksg.github.io/advent-of-code-2019/
[advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api
[dev]: https://github.com/mstksg/advent-of-code-dev

[Reflections and Benchmarks][reflections]
-----------------------------------------

[Available as RSS Feed][rss]

[rss]: http://feeds.feedburner.com/jle-advent-of-code-2019

| Challenge | Reflections | Code      | Rendered   | Benchmarks |
| --------- | ----------- | --------- | ---------- | ---------- |
| Day  1    | [x][d01r]   | [x][d01g] | [x][d01h]  | [x][d01b]  |
| Day  2    | [x][d02r]   | [x][d02g] | [x][d02h]  | [x][d02b]  |
| Day  3    | [x][d03r]   | [x][d03g] | [x][d03h]  | [x][d03b]  |
| Day  4    | [x][d04r]   | [x][d04g] | [x][d04h]  | [x][d04b]  |
| Day  5    |             |           |            |            |
| Day  6    | [x][d06r]   | [x][d06g] | [x][d06h]  | [x][d06b]  |
| Day  7    |             |           |            |            |
| Day  8    | [x][d08r]   | [x][d08g] | [x][d08h]  | [x][d08b]  |
| Day  9    |             |           |            |            |
| Day 10    | [x][d10r]   | [x][d10g] | [x][d10h]  | [x][d10b]  |
| Day 11    | [x][d11r]   | [x][d11g] | [x][d11h]  | [x][d11b]  |
| Day 12    |             |           |            |            |
| Day 13    |             |           |            |            |
| Day 14    |             |           |            |            |
| Day 15    |             |           |            |            |
| Day 16    |             |           |            |            |
| Day 17    |             |           |            |            |
| Day 18    |             |           |            |            |
| Day 19    |             |           |            |            |
| Day 20    |             |           |            |            |
| Day 21    |             |           |            |            |
| Day 22    |             |           |            |            |
| Day 23    |             |           |            |            |
| Day 24    |             |           |            |            |
| Day 25    |             |           |            |            |

""Rendered"" links go to haddock source renders for code, with reflections in the
documentation.  Haddock source renders have hyperlinked identifiers,
so you can follow any unrecognized identifiers to see where I have defined them
in the library.

[reflections]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md

### `:~>` type

If you're looking at my actual github solutions, you'll notice that this year
I'm implementing my solutions in terms of a `:~>` record type:

```haskell
data a :~> b = MkSol
    { sParse :: String -> Maybe a    -- ^ parse input into an `a`
    , sSolve :: a      -> Maybe b    -- ^ solve an `a` input to a `b` solution
    , sShow  :: b      -> String     -- ^ print out the `b` solution for submission
    }
```

An `a :~> b` is a solution to a challenge expecting input of type `a` and
producing answers of type `b`.  It also packs in functions to parse a `String`
into an `a`, and functions to show a `b` as a `String` to submit as an answer.

This helps me mentally separate out parsing, solving, and showing, allowing for
some cleaner code and an easier time planning my solution.

Such a challenge can be ""run"" on string inputs by feeding the string into
`sParse`, then `sSolve`, then `sShow`:

```haskell
-- | Run a ':~>' on some input, retuning 'Maybe'
runSolution :: Challenge -> String -> Maybe String
runSolution MkSol{..} s = do
    x <- sParse s
    y <- sSolve x
    pure (sShow y)
```

In the actual library, I have `runSolution` return an `Either` so I can debug
which stage the error happened in.

You might also notice the function `dyno_`, used like `dyno_ ""limit"" 10000`.  This
is how I implement parameters in problems that vary between test data and
actual input.  For example, Day 6 involved finding points that had a total
distance of less than 10000, but for the test input, we found the points that
had a total distance of less than 32.  So, I have a system that lets me write
`dyno_ ""limit"" 10000` in my code instead of hard-coding in `10000`.  This
`10000` would be replaced by `32` when running with test data (which is parsed
from [this file][7btest])

[7btest]: https://github.com/mstksg/advent-of-code-2018/blob/master/test-data/06b.txt

Interactive
-----------

The *[AOC.Run.Interactive][interactive]* module has code (powered by
*[advent-of-code-api][]*) for testing your solutions and submitting within
GHCI, so you don't have to re-compile. If you edit your solution programs, they
are automatically updated when you hit `:r` in ghci.

[interactive]: https://mstksg.github.io/advent-of-code-2019/AOC2019-Run-Interactive.html

```haskell
ghci> execSolution_   $ solSpec 'day02a   -- get answer for challenge based on solution
ghci> testSolution_   $ solSpec 'day02a   -- run solution against test suite
ghci> viewPrompt_     $ solSpec 'day02a   -- view the prompt for a part
ghci> waitForPrompt_  $ solSpec 'day02a   -- count down to the prompt for a part
ghci> submitSolution_ $ solSpec 'day02a   -- submit a solution
```

These are loaded with session key stored in the configuration file (see next
section).

Executable
----------

Comes with test examples given in problems.

You can install using `stack`:

```bash
$ git clone https://github.com/mstksg/advent-of-code-2019
$ cd advent-of-code-2019
$ stack setup
$ stack install
```

The executable `aoc2019` includes a testing and benchmark suite, as well as a
way to view prompts within the command line:

```
$ aoc2019 --help
aoc2019 - Advent of Code 2019 challenge runner

Usage: aoc2019 [-c|--config PATH] COMMAND
  Run challenges from Advent of Code 2019. Available days: 1, 2, 3 (..)

Available options:
  -c,--config PATH         Path to configuration file (default: aoc-conf.yaml)
  -h,--help                Show this help text

Available commands:
  run                      Run, test, and benchmark challenges
  view                     View a prompt for a given challenge
  submit                   Test and submit answers for challenges
  test                     Alias for run --test
  bench                    Alias for run --bench
  countdown                Alias for view --countdown

$ aoc2019 run 3 b
>> Day 03b
>> [✓] 243
```

You can supply input via stdin with `--stdin`:

```
$ aoc2019 run 1 --stdin
>> Day 01a
+1
+2
+1
-3
<Ctrl+D>
[?] 1
>> Day 01b
[?] 1
```

Benchmarking is implemented using *criterion*

```
$ aoc2019 bench 2
>> Day 02a
benchmarking...
time                 1.317 ms   (1.271 ms .. 1.392 ms)
                     0.982 R²   (0.966 R² .. 0.999 R²)
mean                 1.324 ms   (1.298 ms .. 1.373 ms)
std dev              115.5 μs   (77.34 μs .. 189.0 μs)
variance introduced by outliers: 65% (severely inflated)

>> Day 02b
benchmarking...
time                 69.61 ms   (68.29 ms .. 72.09 ms)
                     0.998 R²   (0.996 R² .. 1.000 R²)
mean                 69.08 ms   (68.47 ms .. 69.99 ms)
std dev              1.327 ms   (840.8 μs .. 1.835 ms)
```

Test suites run the example problems given in the puzzle description, and
outputs are colorized in ANSI terminals.

```
$ aoc2019 test 1
>> Day 01a
[✓] (3)
[✓] (3)
[✓] (0)
[✓] (-6)
[✓] Passed 4 out of 4 test(s)
[✓] 416
>> Day 01b
[✓] (2)
[✓] (0)
[✓] (10)
[✓] (5)
[✓] (14)
[✓] Passed 5 out of 5 test(s)
[✓] 56752
```

This should only work if you're running `aoc2019` in the project directory.

**To run on actual inputs**, the executable expects inputs to be found in the
folder `data/XX.txt` in the directory you are running in.  That is, the input
for Day 7 will be expected at `data/07.txt`.

*aoc2019 will download missing input files*, but requires a session token.
This can be provided in `aoc-conf.yaml`:

```yaml
session:  [[ session token goes here ]]
```

Session keys are also required to download ""Part 2"" prompts for each challenge.

You can ""lock in"" your current answers (telling the executable that those are
the correct answers) by passing in `--lock`.  This will lock in any final
puzzle solutions encountered as the verified official answers.  Later, if you
edit or modify your solutions, they will be checked on the locked-in answers.

These are stored in `data/ans/XXpart.txt`.  That is, the target output for Day 7
(Part 2, `b`) will be expected at `data/ans/07b.txt`.  You can also manually
edit these files.

You can view prompts: (use `--countdown` to count down until a prompt is
released, and display immediately)

```
$ aoc2019 view 3 b
>> Day 03b
--- Part Two ---
----------------

Amidst the chaos, you notice that exactly one claim doesn't overlap by
even a single square inch of fabric with any other claim. If you can
somehow draw attention to it, maybe the Elves will be able to make
Santa's suit after all!

For example, in the claims above, only claim `3` is intact after all
claims are made.

*What is the ID of the only claim that doesn't overlap?*
```

You can also submit answers:

```
$ aoc2019 submit 1 a
```

Submissions will automatically run the test suite.  If any tests fail, you will
be asked to confirm submission or else abort.  The submit command will output
the result of your submission: The message from the AoC website, and whether or
not your answer was correct (or invalid or ignored).  Answers that are
confirmed correct will be locked in and saved for future testing against, in
case you change your solution.

All networking features are powered by *[advent-of-code-api][]*.

[d01g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day01.hs
[d01h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day01.html
[d01r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-1
[d01b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-1-benchmarks
[d02g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day02.hs
[d02h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day02.html
[d02r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-2
[d02b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-2-benchmarks
[d03g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day03.hs
[d03h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day03.html
[d03r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-3
[d03b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-3-benchmarks
[d04g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day04.hs
[d04h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day04.html
[d04r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-4
[d04b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-4-benchmarks
[d06g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day06.hs
[d06h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day06.html
[d06r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-6
[d06b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-6-benchmarks
[d08g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day08.hs
[d08h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day08.html
[d08r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-8
[d08b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-8-benchmarks
[d10g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day10.hs
[d10h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day10.html
[d10r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-10
[d10b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-10-benchmarks
[d11g]: https://github.com/mstksg/advent-of-code-2019/blob/master/src/AOC/Challenge/Day11.hs
[d11h]: https://mstksg.github.io/advent-of-code-2019/src/AOC.Challenge.Day11.html
[d11r]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-11
[d11b]: https://github.com/mstksg/advent-of-code-2019/blob/master/reflections.md#day-11-benchmarks
",mstksg/advent-of-code-2019
16,mhanberg,Elixir,{'Elixir': 26906},"# Advent of Code Elixir Starter

A batteries included starter pack for participating in [Advent of Code](https://www.adventofcode.com) using Elixir!

## Usage

There are 25 modules, 25 tests, and 50 mix tasks. 

1. Fill in the tests with the example solutions.
1. Write your implementation.
1. Fill in the final problem inputs into the mix task and run `mix d01.p1`!
    - Benchmark your solution by passing the `-b` flag, `mix d01.p1 -b`

```elixir
defmodule AdventOfCode.Day01 do
  def part1(args) do
  end

  def part2(args) do
  end
end
```

```elixir
defmodule AdventOfCode.Day01Test do
  use ExUnit.Case

  import AdventOfCode.Day01

  @tag :skip # Make sure to remove to run your test.
  test ""part1"" do
    input = nil 
    result = part1(input)

    assert result
  end

  @tag :skip # Make sure to remove to run your test.
  test ""part2"" do
    input = nil 
    result = part2(input)

    assert result
  end
end
```

```elixir
defmodule Mix.Tasks.D01.P1 do
  use Mix.Task

  import AdventOfCode.Day01

  @shortdoc ""Day 01 Part 1""
  def run(args) do
    input = nil

    if Enum.member?(args, ""-b""),
      do: Benchee.run(%{part_1: fn -> input |> part1() end}),
      else:
        input
        |> part1()
        |> IO.inspect(label: ""Part 1 Results"")
  end
end   
```

## Installation

```bash
# clone
$ git clone git@github.com:mhanberg/advent-of-code-elixir-starter.git advent-of-code
$ cd advent-of-code

# Reinitialize your git repo
$ rm -rf .git
$ git init
```
",mhanberg/advent-of-code-elixir-starter
17,borkdude,Clojure,"{'Clojure': 978195, 'Shell': 5984}","# Advent of CLJC
[![CircleCI](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master.svg?style=svg)](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master)

Cross platform Clojure Advent of Code solutions.

<img src=""doc/scores.png"" alt=""scores"" width=""50%""/>

## Contribute

What's in it for you?
* Most of all, you will be encouraged to write portable Clojure code: a solution that runs on the JVM via Clojure and on Node via ClojureScript.
* Your Advent of Code solutions will be checked against the same input as others. This diminishes the possibility that your solution only works for your specific input.
* The performance of your solution can be compared with others via CircleCI (see [Scores](#scores)).

What's in it for the Clojure community?
* You are helping advance the [speculative](https://github.com/slipset/speculative) project, a collection of core specs.
* You are helping to build a large Clojure corpus for various purposes (see the Rationale for [coal-mine](https://github.com/mfikes/coal-mine)).

PRs welcome. Make a new solution file with the `new` script:

    script/new 2017 1 username

where `username` is your Github or Bitbucket username. Then fill in the solution in the file. If the input and answers are still empty you will have to provide it in `data.cljc`.

This repo will not accept multiple inputs and answers (see [this issue](https://github.com/borkdude/advent-of-cljc/issues/6) for details).

## Dev

Read [here](https://nrepl.xyz/nrepl/usage/server.html) how to get an nREPL for this project.

## Tests

Make sure the tests for your solution pass with the `test-one` script.

Please do not run calculations outside the tests. Memoized functions are permitted. Top-level lazy sequences are fine as long as they are not realized outside the tests.

CircleCI runs tests for changed namespaces with the `.circle/test-diff` script.

Tests support the following metadata:

 - `:skip-cljs`: used for skipping Node tests. Used in `.circle/test-diff`,
   `script/test` and `script/test-one`.
 - `:skip`: used for skipping tests in `script/test`.

Run all tests:

    script/test

Run one test:

    script/test-one 2017 1 username
    
Run with instrumentation:

    INSTRUMENT=true script/test
    INSTRUMENT=true script/test-one aoc.y2017.d01.username

Skip Clojure or ClojureScript:

    SKIP_CLJ=true script/test
    SKIP_CLJS=true script/test

## Scores

To view a time comparison of your solutions to others, go to
[CircleCI](https://circleci.com/gh/borkdude/advent-of-cljc/tree/master), open
""Test changed namespaces"" and scroll to the end.

The entire list of scores can be viewed and downloaded in CSV format
[here](https://gist.github.com/borkdude/d7f42d4110e8a330d1d70f9242b14496).
",borkdude/advent-of-cljc
18,BartoszMilewski,Haskell,{'Haskell': 14869},"# AofC2017
Advent of Code 2017
",BartoszMilewski/AofC2017
19,BartoszMilewski,Haskell,{'Haskell': 15971},"# AoC2019
Solutions to [Advent of Code 2019](https://adventofcode.com/2019)
",BartoszMilewski/AoC2019
20,zero-to-mastery,,{},"# Advent of Code 2019 (coding_challenge-24)

![](./aoc.png)

# What is Advent of Code?
> Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like **yes, including JavaScript and Python!!!**
> Every day for 25 days this month you have small programming challenges that you need to solve to complete the ""tree"". Each day, the questions get a little bit harder to really push you to learn and improve your programming skills.

We have created a special area for the ZTM community to share their solutions and code each day, see what others have done, and vote for your favourite solution. We even have a leaderboard!

# How to participate:
### (This event starts December 1st, 2019 but you can join anytime. Solutions submitted on the day of the of the puzzle reveal will receive extra points!)
1. Go to https://aoc.zerotomastery.io/ and click on the **ABOUT** to find out more about the challenge and how to participate.
2. Go to https://adventofcode.com/ and start with problem #1! Each day starting Dec 1st, 2019 a new problem will be unlocked but you have to do them in order!
3. Once you finish one puzzle/question, you can share your code and solution with the community, or check out what others in the ZTM community have done. You can even vote on your favourite solutions! You can [follow this video on how to submit your solution](https://www.loom.com/share/7310b6e83bcc4922b25023b62d173611).
4. Check out the leaderboard and see how you compare: https://aoc.zerotomastery.io/leaderboard
5. **Bonus**: In case you get stuck, I made 2 videos available for free preview for you to show you how I solve one of the problems and the steps I take. Simply go to the [Complete Web Developer in 2020: Zero to Mastery](https://www.udemy.com/course/the-complete-web-developer-zero-to-mastery/?referralCode=FFF295AECF3594CE440E) course and check out the two lectures (*Exercise: Santa's Node Helper* and *Solution: Santas Node Helper*). Even if you are not enrolled in the course these two videos have the free preview option enabled). 

**You can discuss all AOC related topics in our #coding-challenge channel on Discord!**

# Who made this possible?
Some of our fellow ZTM members helped create this awesome platform to submit and share code. Give them a big thank you on Discord!
```
@Matt
@Dichotomyy
@E
@notAnkur
@Brittney
@Abdus
@Meet
```

## One Last Thing!

**Please note: As with all my challenges there is zero benefit or monetary gain I receive from it. This is just my way of thanking my students and making sure that you are able to continue gaining valuable knowledge outside of just my videos. It would mean a lot to me if you are able to rate my course...5 star reviews make my day :)**

",zero-to-mastery/coding_challenge-24
21,strelec,Scala,{'Scala': 9510},"# Advent of Scala 2015

My solutions for the ""Advent of Code"" 2015, written in Scala. I want to get more people interested in this language.

I focus on readability and brevity of code first, performance comes second. I also take special care to process the standard input in a streaming fashion.

**If you like my work, please star the repository. Thanks!**
",strelec/Advent-of-Scala-2015
22,kodsnack,Python,"{'Python': 430218, 'C++': 407688, 'Objective-C': 249799, 'PHP': 167165, 'C': 144138, 'Prolog': 141727, 'Java': 139359, 'Go': 132037, 'Haskell': 115315, 'OpenEdge ABL': 91043, 'Lasso': 88234, 'JavaScript': 83169, 'Crystal': 62526, 'Scala': 62052, 'Rust': 46777, 'TypeScript': 44617, 'Elixir': 41288, 'C#': 34389, 'Lua': 22238, 'Common Lisp': 22107, 'REXX': 18461, 'Swift': 17015, 'Shell': 16442, 'Clojure': 14017, 'CMake': 10741, 'Brainfuck': 8186, 'Makefile': 5381, 'Kotlin': 3741, 'Awk': 1840, 'M4': 1711, 'Pascal': 1162}","# Advent of code 2016 #
Bidra med dina lösningar på problemen i [Advent of code](http://adventofcode.com/), i vilket språk du vill. Välj ett du kan, eller ett du vill lära dig!

De första problemen kommer första december, de sista den tjugofemte, och den eller de som först löser samtliga problem korrekt kommer att få någon form av pris. Som förra året är det två delproblem för varje dag. Samtliga 50 problem ska alltså finnas med i en komplett lösning. ""Först"" räknas utifrån tidsstämpeln på den merge request som gör din (eller era, samarbete uppmuntras) lösning komplett och korrekt. Det är givetvis fritt fram att bidra med lösningar för så många eller få problem man har tid och lust med, tävlingsmomentet är inte det viktiga här!

Dina lösningar får gärna checkas in i en mapp med namn på formen #användarnamn-språk#, så blir det lite lättare för alla att få överblick.

Lösningarna kan komma att diskuteras i avsnitt av Kodsnack, så lägg med en readme.md med en notis om du inte vill riskera att bli omnämnd.
",kodsnack/advent_of_code_2016
23,narimiran,OCaml,"{'OCaml': 39507, 'Nim': 26907, 'Python': 22773}","# Advent of Code 2017

All my Advent of Code repos:

* [AoC 2015 in Nim](https://github.com/narimiran/advent_of_code_2015)
* [AoC 2016 in Python](https://github.com/narimiran/advent_of_code_2016)
* [AoC 2017 in Nim, OCaml, Python](https://github.com/narimiran/AdventOfCode2017) (this repo)
* [AoC 2018 in Nim](https://github.com/narimiran/AdventOfCode2018)
* [AoC 2019 in OCaml](https://github.com/narimiran/AdventOfCode2019)


&nbsp;


## Solutions

My aim is to provide clean and readable, yet idiomatic, solutions in all three languages.
If you have any comment/suggestion/advice, please let me know!

Originally, I've solved all tasks in Nim and Python as they were released.
OCaml solutions were added in Novemeber 2019 as a preparation for AoC 2019 (these were my first steps in OCaml).


Task                                                                                 | Nim solution               | OCaml solution             | Python solution             | Note
---                                                                                  | ---                        | ---                        | ---                         | ---
[Day 1: Inverse Captcha](http://adventofcode.com/2017/day/1)                         | [day01.nim](nim/day01.nim) | [day01.ml](ocaml/day01.ml) | [day01.py](python/day01.py) | Taking advantage of Python's negative indices.
[Day 2: Corruption Checksum](http://adventofcode.com/2017/day/2)                     | [day02.nim](nim/day02.nim) | [day02.ml](ocaml/day02.ml) | [day02.py](python/day02.py) |
[Day 3: Spiral Memory](http://adventofcode.com/2017/day/3)                           | [day03.nim](nim/day03.nim) | [day03.ml](ocaml/day03.ml) | [day03.py](python/day03.py) | Building a spiral with table/map/dict in all three versions; using iterators in Nim and Python.
[Day 4: High-Entropy Passphrases](http://adventofcode.com/2017/day/4)                | [day04.nim](nim/day04.nim) | [day04.ml](ocaml/day04.ml) | [day04.py](python/day04.py) |
[Day 5: A Maze of Twisty Trampolines, All Alike](http://adventofcode.com/2017/day/5) | [day05.nim](nim/day05.nim) | [day05.ml](ocaml/day05.ml) | [day05.py](python/day05.py) | Used `try-except` in Python for some nice speed improvement.
[Day 6: Memory Reallocation](http://adventofcode.com/2017/day/6)                     | [day06.nim](nim/day06.nim) | [day06.ml](ocaml/day06.ml) | [day06.py](python/day06.py) | Python doesn't have `OrderedSet` (had to use `OrderedDict`).
[Day 7: Recursive Circus](http://adventofcode.com/2017/day/7)                        | [day07.nim](nim/day07.nim) | [day07.ml](ocaml/day07.ml) | [day07.py](python/day07.py) | Python's `Counter.most_common()` is quite helpful/useful here.
[Day 8: I Heard You Like Registers](http://adventofcode.com/2017/day/8)              | [day08.nim](nim/day08.nim) | [day08.ml](ocaml/day08.ml) | [day08.py](python/day08.py) |
[Day 9: Stream Processing](http://adventofcode.com/2017/day/9)                       | [day09.nim](nim/day09.nim) | [day09.ml](ocaml/day09.ml) | [day09.py](python/day09.py) |
[Day 10: Knot Hash](http://adventofcode.com/2017/day/10)                             | [day10.nim](nim/day10.nim) | [day10.ml](ocaml/day10.ml) | [day10.py](python/day10.py) | Changed solutions to be reusable for Day 14. Python version uses `deque` with pop, rotate, and insert. Nim version is a more 'traditional' one.
[Day 11: Hex Ed](http://adventofcode.com/2017/day/11)                                | [day11.nim](nim/day11.nim) | [day11.ml](ocaml/day11.ml) | [day11.py](python/day11.py) | Python version uses cube coordinates, Nim and OCaml versions use axial coordinates.
[Day 12: Digital Plumber](http://adventofcode.com/2017/day/12)                       | [day12.nim](nim/day12.nim) | [day12.ml](ocaml/day12.ml) | [day12.py](python/day12.py) | BFS in Python, DFS in Nim and OCaml.
[Day 13: Packet Scanners](http://adventofcode.com/2017/day/13)                       | [day13.nim](nim/day13.nim) | [day13.ml](ocaml/day13.ml) | [day13.py](python/day13.py) | All three versions precalculate possible values of `delay` using [Chinese remainder theorem](https://en.wikipedia.org/wiki/Chinese_remainder_theorem) to gain a significant speedup.
[Day 14: Disk Defragmentation](http://adventofcode.com/2017/day/14)                  | [day14.nim](nim/day14.nim) | [day14.ml](ocaml/day14.ml) | [day14.py](python/day14.py) |
[Day 15: Dueling Generators](http://adventofcode.com/2017/day/15)                    | [day15.nim](nim/day15.nim) | [day15.ml](ocaml/day15.ml) | [day15.py](python/day15.py) | Python: generator `generator` generating generator's values. In Nim, using bit masking gives great speed boost.
[Day 16: Permutation Promenade](http://adventofcode.com/2017/day/16)                 | [day16.nim](nim/day16.nim) | [day16.ml](ocaml/day16.ml) | [day16.py](python/day16.py) |
[Day 17: Spinlock](http://adventofcode.com/2017/day/17)                              | [day17.nim](nim/day17.nim) | [day17.ml](ocaml/day17.ml) | [day17.py](python/day17.py) | Brute force in Python, using `deque.rotate`. The expected version in Nim, optimized.
[Day 18: Duet](http://adventofcode.com/2017/day/18)                                  | [day18.nim](nim/day18.nim) | [day18.ml](ocaml/day18.ml) | [day18.py](python/day18.py) |
[Day 19: A Series of Tubes](http://adventofcode.com/2017/day/19)                     | [day19.nim](nim/day19.nim) | [day19.ml](ocaml/day19.ml) | [day19.py](python/day19.py) | All three solutions use complex numbers, which are great for the rotations in 2D plane.
[Day 20: Particle Swarm](http://adventofcode.com/2017/day/20)                        | [day20.nim](nim/day20.nim) | [day20.ml](ocaml/day20.ml) | [day20.py](python/day20.py) |
[Day 21: Fractal Art](http://adventofcode.com/2017/day/21)                           | [day21.nim](nim/day21.nim) | [day21.ml](ocaml/day21.ml) | [day21.py](python/day21.py) | Unoptimized solution in OCaml. Nim and Python solutions are optimized for the second part. Python version uses `numpy` and expands the grid (3 steps at once), Nim version counts the number of times each pattern is present after 18 iterations.
[Day 22: Sporifica Virus](http://adventofcode.com/2017/day/22)                       | [day22.nim](nim/day22.nim) | [day22.ml](ocaml/day22.ml) | [day22.py](python/day22.py) | OCaml: sum types and pattern matching is the name of the game. Python version uses a dict and a complex plane, Nim version uses an array (faster than a table) of a regular 2D plane with `enum` for the rotating directions.
[Day 23: Coprocessor Conflagration](http://adventofcode.com/2017/day/23)             | [day23.nim](nim/day23.nim) | [day23.ml](ocaml/day23.ml) | [day23.py](python/day23.py) |
[Day 24: Electromagnetic Moat](http://adventofcode.com/2017/day/24)                  | [day24.nim](nim/day24.nim) | [day24.ml](ocaml/day24.ml) | [day24.py](python/day24.py) | BFS in Python. A recursive search in Nim and OCaml, optimized.
[Day 25: The Halting Problem](http://adventofcode.com/2017/day/25)                   | [day25.nim](nim/day25.nim) | [day25.ml](ocaml/day25.ml) | [day25.py](python/day25.py) | Python version uses (default)dict. Nim version uses arrays, which are much faster than tables.
**Total time**:                                                                      | 0.49 sec                   | 1.16 sec\*                 | 15.9 sec\*                  | \* OCaml: unoptimized [day21.ml](ocaml/day21.ml). Python: without the brute-forced [day17.py](python/day17.py), and [day15.py](python/day15.py) was run in `pypy3`. For the detailed run times, see below.

&nbsp;



## Run times

* Nim version: 1.1.1 (devel)
* OCaml version: 4.08.1+flambda
* Python version: 3.7.4
* CPU: AMD Ryzen 3700x @ 3.6 GHz (Linux 5.3)


Times are in milliseconds, the reported results are the average of 20 runs.

day |  nim | ocaml | python |
---:| ----:| -----:| ------:|
 01 |  0.4 |   1.2 |   22.5 |
 02 |  0.7 |   1.0 |   22.3 |
 03 |  0.5 |   1.0 |   19.1 |
 04 |  3.6 |   4.2 |   22.1 |
 05 | 85.0 |  86.1 | 2547.6 |
 06 |  3.3 |   5.6 |   53.9 |
 07 |  3.2 |   6.1 |   33.5 |
 08 |  2.0 |   2.1 |   19.6 |
 09 |  0.7 |   2.9 |   24.2 |
 10 |  0.8 |   2.1 |   33.0 |
 11 |  1.3 |   1.8 |   32.6 |
 12 |  2.9 |   3.3 |   26.5 |
 13 |  1.7 |  30.4 |   28.8 |
 14 | 14.3 |  45.6 |  521.6 |
 15 |195.4 | 392.6 | 2074\* |
 16 | 13.0 |  82.0 |  160.3 |
 17 |  1.6 |   7.8 |    -\* |
 18 |  1.1 |   7.5 |  108.0 |
 19 |  0.9 |   1.4 |   33.0 |
 20 | 16.1 |  31.2 | 1582.7 |
 21 |  0.8 | 151\* |  212.4 |
 22 | 61.2 | 150.8 | 3511.9 |
 23 |  0.8 |   1.0 |   21.3 |
 24 | 16.4 |  68.5 | 1332.3 |
 25 | 61.6 |  68.3 | 3456.8 |

OCaml Day21 was not optimized.  
Python Day15 was run with `pypy3`, Python Day17 was brute-forced.
",narimiran/AdventOfCode2017
24,glguy,Haskell,"{'Haskell': 109697, 'C++': 10145, 'Rust': 9909, 'Meson': 469}","# Advent of Code 2018 Haskell solutions

I'm building my Haskell solutions using
[cabal-install](https://www.haskell.org/cabal/users-guide/). Make sure you're
using an up-to-date version of the tool to get the best `v2-build` support!

```
$ cabal v2-build
```

The project can also be built using [Stack](https://docs.haskellstack.org/en/stable/README/)
if that's what you have available.

```
$ stack setup # only necessary the first time you use a resolver
$ stack build
```

## Other languages

I'll be adding C++ and Rust solutions for some of the problems as well.
You can find information about those in the relevant subdirectories.
",glguy/advent2018
25,sciyoshi,Rust,"{'Rust': 38289, 'Python': 2936}","# Advent of Rust 2017

These are my solutions to [2017's Advent of Code challenge](https://adventofcode.com/2017), written in Rust.

The program expects the puzzle input on standard input, and the day is passed as the first argument, for example:

    cargo run --release -- $DAY < inputs/$DAY

* [Day 1: Inverse Captcha](src/day1/)
* [Day 2: Corruption Checksum](src/day2/)
* [Day 3: Spiral Memory](src/day3/)
* [Day 4: High-Entropy Passphrases](src/day4/)
* [Day 5: A Maze of Twisty Trampolines, All Alike](src/day5/)
* [Day 6: Memory Reallocation](src/day6/)
* [Day 7: Recursive Circus](src/day7/)
* [Day 8: I Heard You Like Registers](src/day8/)
* [Day 9: Stream Processing](src/day9/)
* [Day 10: Knot Hash](src/day10/)
* [Day 11: Hex Ed](src/day11/)
* [Day 12: Digital Plumber](src/day12/)
* [Day 13: Packet Scanners](src/day13/)
* [Day 14: Disk Defragmentation](src/day14/)
* [Day 15: Dueling Generators](src/day15/)
* [Day 16: Permutation Promenade](src/day16/)
* [Day 17: Spinlock](src/day17/)
* [Day 18: Duet](src/day18/)
* [Day 19: A Series of Tubes](src/day19/)
* [Day 20: Particle Swarm](src/day20/)
* [Day 21: Fractal Art](src/day21/)
* [Day 22: Sporifica Virus](src/day22/)
* [Day 23: Coprocessor Conflagration](src/day23/)
* [Day 24: Electromagnetic Moat](src/day24/)
* [Day 25: The Halting Problem](src/day25/)
",sciyoshi/advent-of-rust-2017
26,badouralix,Python,"{'Python': 17735580, 'C++': 180994, 'C': 50452, 'Rust': 38342, 'Go': 32666, 'Java': 20576, 'JavaScript': 10756, 'Ruby': 3768, 'Shell': 586}","# Advent of code 2018 solutions

⁣    🌟  
    🎄  
   🎄🎄  
  🎄🎄🎄  
 🎄🎄🎄🎄  
🎄🎄🎄🎄🎄  
  🎁🎁🎁

These are proposed solutions for the [Advent of Code 2018](http://adventofcode.com/2018).

The solutions are automatically tested with travis.

[![Build Status](https://travis-ci.org/badouralix/advent-of-code-2018.svg?branch=master)](https://travis-ci.org/badouralix/advent-of-code-2018)

## Usage

use `./aoc` script

```text
usage: aoc <command> [<args>]

aoc commands are:
   run      Runs submissions
   create   Creates a new submission
   config   Configures user's parameters
```

### Examples

#### Run last problem

```shell
./aoc run
```

```shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Running submissions for day 04:

* part 2:
---------------------------------------------------
Avg over all inputs
---------------------------------------------------
----------  ----------  -----------  ---
silvestre      78452        1.99 ms  py
degemer        43695        2.39 ms  py
jules          23037        2.49 ms  py
david          36371        2.94 ms  py
thomas          9763        2.97 ms  py
ayoub         136461        5.85 ms  cpp
evqna          49137        6.65 ms  cpp
badouralix     51232        7.26 ms  go
tpxp           41668      133.63 ms  rb
----------  ----------  -----------  ---
```

#### Run specific problems from specific users

```shell
./aoc run -d 1 -d 2 -p 1 -a ayoub -a david
```

```shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Running submissions for day 01:

* part 1:
---------------------------------------------------
Avg over all inputs
---------------------------------------------------
-----  -------  -----------  ---
david    543        0.46 ms  py
ayoub    445        4.94 ms  cpp
-----  -------  -----------  ---
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Running submissions for day 02:

* part 1:
---------------------------------------------------
Avg over all inputs
---------------------------------------------------
-----  --------  -----------  ---
david    5658        1.22 ms  py
ayoub    6448        4.84 ms  cpp
-----  --------  -----------  ---
```

You can use `-r` to run each submission on it's own input, or `-e` to print non-aggregated results.  
see `./aoc run -h` for full arguments description.

## Contribute

For now we support `c`, `c++`, `java`, `javascript`, `go`, `python 3` (+ `cython`), `ruby`, `rust (stable)` and `bash` scripts.

You can use `./aoc create` tool to create a new empty submission:

```text
usage: aoc create [-h] [-a AUTHOR] [-d DAY] [-p PART]
                  [-l {c,cpp,go,java,js,py,pyx,rb,rs,sh}]

Create a new submission

optional arguments:
  -a AUTHOR, --author AUTHOR
                        submission author
  -d DAY, --day DAY     problem day
  -p PART, --part PART  problem part
  -l {c,cpp,go,java,js,py,pyx,rb,rs,sh}, --language {c,cpp,go,java,js,py,pyx,rb,rs,sh}
                        submission language
```

you can also use `./aoc config` to setup your local profile

```text
usage: aoc config [-h] username {c,cpp,go,java,js,py,pyx,rb,rs,sh}

Configures user parameters

positional arguments:
  username              prefered username
  {c,cpp,go,java,js,py,pyx,rb,rs,sh}
                        prefered programming language
```

### Using python

If you don't use `create.py` tool you should follow this convention:

```bash
day-[number]/part-[number]/[username].py    # your submission code
day-[number]/input/[username].txt           # your input file
```

Your submission code should inherit from the `SubmissionPy` class from `runners.python` module:

```python
from tool.runners.python import SubmissionPy

class MyAwesomeSubmission(SubmissionPy):

    def run(self, s):
        # :param s: input in string format
        # :return: solution flag
        pass
```

You can add other functions & modules if you need to. Any external dependency should be added to `requirements.txt`.

Once you tested your solution you can submit it by making a PR.

## History

- [Advent of Code 2017](https://github.com/lypnol/adventofcode-2017)
- [Advent of Code 2016](https://github.com/lypnol/adventofcode-2016)
",badouralix/advent-of-code-2018
27,bhauman,Clojure,{'Clojure': 83962},"# Deprecated repository

Please refer to the [advent_of_clojure repo](https://github.com/bhauman/advent-of-clojure) to see my [Advent of Code](http://adventofcode.com) problem solutions.


",bhauman/advent-of-clojure-2016
28,CameronAavik,F#,{'F#': 226573},"# Advent of Code

These are my solutions in F# for Advent of Code 2015-2019.

## Solutions

| Day | 2015 | 2016 | 2017 | 2018 | 2019 |
| --- | ---- | ---- | ---- | ---- | ---- |
| 1  | [2015.1](/AdventOfCode.2015/Solutions/Day01.fs)  | [2016.1](/AdventOfCode.2016/Solutions/Day01.fs)  | [2017.1](/AdventOfCode.2017/Solutions/Day01.fs)  | [2018.1](/AdventOfCode.2018/Solutions/Day01.fs)  | [2019.1](/AdventOfCode.2019/Solutions/Day01.fs)  |
| 2  | [2015.2](/AdventOfCode.2015/Solutions/Day02.fs)  | [2016.2](/AdventOfCode.2016/Solutions/Day02.fs)  | [2017.2](/AdventOfCode.2017/Solutions/Day02.fs)  | [2018.2](/AdventOfCode.2018/Solutions/Day02.fs)  | [2019.2](/AdventOfCode.2019/Solutions/Day02.fs)  |
| 3  | [2015.3](/AdventOfCode.2015/Solutions/Day03.fs)  | [2016.3](/AdventOfCode.2016/Solutions/Day03.fs)  | [2017.3](/AdventOfCode.2017/Solutions/Day03.fs)  | [2018.3](/AdventOfCode.2018/Solutions/Day03.fs)  | [2019.3](/AdventOfCode.2019/Solutions/Day03.fs)  |
| 4  | [2015.4](/AdventOfCode.2015/Solutions/Day04.fs)  | [2016.4](/AdventOfCode.2016/Solutions/Day04.fs)  | [2017.4](/AdventOfCode.2017/Solutions/Day04.fs)  | [2018.4](/AdventOfCode.2018/Solutions/Day04.fs)  | [2019.4](/AdventOfCode.2019/Solutions/Day04.fs)  |
| 5  | [2015.5](/AdventOfCode.2015/Solutions/Day05.fs)  | [2016.5](/AdventOfCode.2016/Solutions/Day05.fs)  | [2017.5](/AdventOfCode.2017/Solutions/Day05.fs)  | [2018.5](/AdventOfCode.2018/Solutions/Day05.fs)  | [2019.5](/AdventOfCode.2019/Solutions/Day05.fs)  |
| 6  | [2015.6](/AdventOfCode.2015/Solutions/Day06.fs)  | [2016.6](/AdventOfCode.2016/Solutions/Day06.fs)  | [2017.6](/AdventOfCode.2017/Solutions/Day06.fs)  | [2018.6](/AdventOfCode.2018/Solutions/Day06.fs)  | [2019.6](/AdventOfCode.2019/Solutions/Day06.fs)  |
| 7  | [2015.7](/AdventOfCode.2015/Solutions/Day07.fs)  | [2016.7](/AdventOfCode.2016/Solutions/Day07.fs)  | [2017.7](/AdventOfCode.2017/Solutions/Day07.fs)  | [2018.7](/AdventOfCode.2018/Solutions/Day07.fs)  | [2019.7](/AdventOfCode.2019/Solutions/Day07.fs)  |
| 8  | [2015.8](/AdventOfCode.2015/Solutions/Day08.fs)  | [2016.8](/AdventOfCode.2016/Solutions/Day08.fs)  | [2017.8](/AdventOfCode.2017/Solutions/Day08.fs)  | [2018.8](/AdventOfCode.2018/Solutions/Day08.fs)  | [2019.8](/AdventOfCode.2019/Solutions/Day08.fs)  |
| 9  | [2015.9](/AdventOfCode.2015/Solutions/Day09.fs)  | [2016.9](/AdventOfCode.2016/Solutions/Day09.fs)  | [2017.9](/AdventOfCode.2017/Solutions/Day09.fs)  | [2018.9](/AdventOfCode.2018/Solutions/Day09.fs)  | [2019.9](/AdventOfCode.2019/Solutions/Day09.fs)  |
| 10 | [2015.10](/AdventOfCode.2015/Solutions/Day10.fs) | [2016.10](/AdventOfCode.2016/Solutions/Day10.fs) | [2017.10](/AdventOfCode.2017/Solutions/Day10.fs) | [2018.10](/AdventOfCode.2018/Solutions/Day10.fs) | [2019.10](/AdventOfCode.2019/Solutions/Day10.fs) |
| 11 | [2015.11](/AdventOfCode.2015/Solutions/Day11.fs) | [2016.11](/AdventOfCode.2016/Solutions/Day11.fs) | [2017.11](/AdventOfCode.2017/Solutions/Day11.fs) | [2018.11](/AdventOfCode.2018/Solutions/Day11.fs) | [2019.11](/AdventOfCode.2019/Solutions/Day11.fs) |
| 12 | [2015.12](/AdventOfCode.2015/Solutions/Day12.fs) | [2016.12](/AdventOfCode.2016/Solutions/Day12.fs) | [2017.12](/AdventOfCode.2017/Solutions/Day12.fs) | [2018.12](/AdventOfCode.2018/Solutions/Day12.fs) |  |
| 13 | [2015.13](/AdventOfCode.2015/Solutions/Day13.fs) | [2016.13](/AdventOfCode.2016/Solutions/Day13.fs) | [2017.13](/AdventOfCode.2017/Solutions/Day13.fs) | [2018.13](/AdventOfCode.2018/Solutions/Day13.fs) |  |
| 14 | [2015.14](/AdventOfCode.2015/Solutions/Day14.fs) | [2016.14](/AdventOfCode.2016/Solutions/Day14.fs) | [2017.14](/AdventOfCode.2017/Solutions/Day14.fs) | [2018.14](/AdventOfCode.2018/Solutions/Day14.fs) |  |
| 15 | [2015.15](/AdventOfCode.2015/Solutions/Day15.fs) | [2016.15](/AdventOfCode.2016/Solutions/Day15.fs) | [2017.15](/AdventOfCode.2017/Solutions/Day15.fs) | [2018.15](/AdventOfCode.2018/Solutions/Day15.fs) |  |
| 16 | [2015.16](/AdventOfCode.2015/Solutions/Day16.fs) | [2016.16](/AdventOfCode.2016/Solutions/Day16.fs) | [2017.16](/AdventOfCode.2017/Solutions/Day16.fs) | [2018.16](/AdventOfCode.2018/Solutions/Day16.fs) |  |
| 17 | [2015.17](/AdventOfCode.2015/Solutions/Day17.fs) | [2016.17](/AdventOfCode.2016/Solutions/Day17.fs) | [2017.17](/AdventOfCode.2017/Solutions/Day17.fs) | [2018.17](/AdventOfCode.2018/Solutions/Day17.fs) |  |
| 18 | [2015.18](/AdventOfCode.2015/Solutions/Day18.fs) | [2016.18](/AdventOfCode.2016/Solutions/Day18.fs) | [2017.18](/AdventOfCode.2017/Solutions/Day18.fs) | [2018.18](/AdventOfCode.2018/Solutions/Day18.fs) |  |
| 19 | [2015.19](/AdventOfCode.2015/Solutions/Day19.fs) | [2016.19](/AdventOfCode.2016/Solutions/Day19.fs) | [2017.19](/AdventOfCode.2017/Solutions/Day19.fs) | [2018.19](/AdventOfCode.2018/Solutions/Day19.fs) |  |
| 20 | [2015.20](/AdventOfCode.2015/Solutions/Day20.fs) | [2016.20](/AdventOfCode.2016/Solutions/Day20.fs) | [2017.20](/AdventOfCode.2017/Solutions/Day20.fs) | [2018.20](/AdventOfCode.2018/Solutions/Day20.fs) |  |
| 21 | [2015.21](/AdventOfCode.2015/Solutions/Day21.fs) | [2016.21](/AdventOfCode.2016/Solutions/Day21.fs) | [2017.21](/AdventOfCode.2017/Solutions/Day21.fs) | [2018.21](/AdventOfCode.2018/Solutions/Day21.fs) |  |
| 22 | [2015.22](/AdventOfCode.2015/Solutions/Day22.fs) | [2016.22](/AdventOfCode.2016/Solutions/Day22.fs) | [2017.22](/AdventOfCode.2017/Solutions/Day22.fs) | [2018.22](/AdventOfCode.2018/Solutions/Day22.fs) |  |
| 23 | [2015.23](/AdventOfCode.2015/Solutions/Day23.fs) | [2016.23](/AdventOfCode.2016/Solutions/Day23.fs) | [2017.23](/AdventOfCode.2017/Solutions/Day23.fs) | [2018.23](/AdventOfCode.2018/Solutions/Day23.fs) |  |
| 24 | [2015.24](/AdventOfCode.2015/Solutions/Day24.fs) | [2016.24](/AdventOfCode.2016/Solutions/Day24.fs) | [2017.24](/AdventOfCode.2017/Solutions/Day24.fs) | [2018.24](/AdventOfCode.2018/Solutions/Day24.fs) |  |
| 25 | [2015.25](/AdventOfCode.2015/Solutions/Day25.fs) | [2016.25](/AdventOfCode.2016/Solutions/Day25.fs) | [2017.25](/AdventOfCode.2017/Solutions/Day25.fs) | [2018.25](/AdventOfCode.2018/Solutions/Day25.fs) |  |",CameronAavik/AdventOfCode
29,campoy,Go,{'Go': 45969},"# advent-of-code-2018

My solutions for [advent of code 2018](https://adventofcode.com/2018).

All of the solutions have been written while streaming on
the [justforfunc twitch channel](https://www.twitch.tv/justforfunclive).

If you have any questions about the code feel free to send issues,
or ask me directly on twitter at [@francesc](https://twitter.com/francesc).

Big shout-out to [Eric Wastl](https://twitter.com/ericwastl) for this
amazing series of problems!",campoy/advent-of-code-2018
30,gchan,Ruby,"{'Ruby': 186686, 'Shell': 393}","# Advent of Code Solutions

[My](https://github.com/gchan/) solutions to the programming puzzles on [Advent of Code](http://adventofcode.com/).

Solutions are written in [Ruby](https://www.ruby-lang.org/en/).

As of late December 2015, I decided to learn a bit about [Go](https://golang.org/) and redo the puzzles! My solutions in Go can be found [here](https://github.com/gchan/advent-of-code-go).

### What is Advent of Code?

_""Advent of Code is a series of small programming puzzles for a variety of skill levels. They are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code. Each puzzle calls upon different skills and has two parts that build on a theme.""_

### License

MIT

[![Analytics](https://ga-beacon.appspot.com/UA-70790190-2/advent_of_code_ruby/README.md?flat)](https://github.com/igrigorik/ga-beacon)
",gchan/advent-of-code-ruby
31,glguy,Haskell,"{'Haskell': 81338, 'Rust': 11238, 'Lua': 6646}","# advent2017
[Advent of Code](https://adventofcode.com) 2017 solutions

I post my solutions as I finish them once the leaderboard for the day fills up. After submitting my
answer for the day I will typically go back and add type signatures, comments, and improve the
structure of the code.

Please join Freenode's #haskell channel if you're interested in discussing Haskell solutions to the AoC problems.
We'll be talking about them most of December.

## Building

This project was built using GHC 8.2.2

For easiest building I recommend running `cabal new-build`

## Final stats

```
You have 2546 points. (13th place)

      -------Part 1--------   -------Part 2--------
Day       Time  Rank  Score       Time  Rank  Score
 25   00:11:46   130      0   00:11:54   120      0
 24   00:07:26    11     90   00:08:56     7     94
 23   00:03:54    50     51   00:41:45    54     47
 22   00:08:45    22     79   00:13:16    13     88
 21   00:16:23     4     97   00:16:41     4     97
 20   00:07:00    29     72   00:10:55    10     91
 19   00:11:07    37     64   00:13:35    43     58
 18   00:25:14   333      0   00:38:27    83     18
 17   00:06:00    81     20   00:10:50    27     74
 16   00:08:22    92      9   00:14:47    29     72
 15   00:04:01    39     62   00:04:52    13     88
 14   00:04:17     7     94   00:10:30     5     96
 13   10:46:01  4654      0   10:48:32  3651      0
 12   00:03:31    26     75   00:06:01    34     67
 11   00:08:32   104      0   00:09:13    56     45
 10   00:18:14   236      0   00:25:55   103      0
  9   00:14:02   252      0   00:15:54   210      0
  8   00:05:51    46     55   00:06:36    41     60
  7   00:08:11   228      0   00:18:26    53     48
  6   00:04:26    18     83   00:06:02    17     84
  5   00:02:29    33     68   00:06:05   191      0
  4   00:00:48     4     97   00:01:10     1    100
  3   00:12:31   185      0   00:20:15    71     30
  2   00:01:45    48     53   00:03:37    32     69
  1   00:02:21    24     77   00:03:29    27     74
  ```
",glguy/advent2017
32,ttencate,Eiffel,"{'Eiffel': 14818, 'Cuda': 6146, 'F#': 4715, 'TeX': 4411, 'Erlang': 4388, 'J': 4342, 'Java': 4228, 'Pony': 3357, 'Forth': 3311, 'Nim': 3181, 'Clojure': 3103, 'Elixir': 2897, 'Kotlin': 2351, 'PHP': 2259, 'Tcl': 2073, 'CoffeeScript': 1969, 'Smalltalk': 1914, 'Makefile': 1834, 'Dart': 1574, 'Julia': 1326, 'Awk': 729, 'MATLAB': 453}","# Polyglot Advent of Code 2017

[Advent of Code 2017](http://adventofcode.com/2017) is a programming contest,
in which a new puzzle comes online every day from 1 until 25 December. These
are my solutions to the puzzles. Like
[last year](https://github.com/ttencate/aoc2016), I solved each day's puzzle in
a different programming language. As an additional additional challenge, I
didn't use any language I used last year!

A [retrospective](RETROSPECTIVE.md) is now available. Moreover, each solution
subdirectory contains a `README.md` with my thoughts on that day's language.

## Languages

I used only ""mainstream"" programming languages, not esoteric or toy
languages, because this was hard enough as is. However, I did include some
older languages in the list out of historic interest. Plus, a free (as in beer)
implementation for Linux had to exist.

Languages I could still have used, in alphabetical order:

* Ada
* ALGOL 60
* APL
* BLISS
* Boo
* COMAL
* Common Lisp
* Céu
* Ceylon
* Crystal
* [Dyon](https://github.com/PistonDevelopers/dyon)
* Elm (browser only)
* GDscript
* GLSL
* [Gluon](https://github.com/gluon-lang/gluon)
* Idris
* Infinifactory
* Inform7
* Io
* Labview
* [Little](http://www.little-lang.org/)
* Logtalk
* M4
* Modula-3
* MUMPS
* Nemerle
* Pharo
* PL/I
* Postscript
* Prolog
* REBOL
* Self
* SNOBOL
* Wren

Used, in alphabetical order (this year's entries in bold):

* **ALGOL 68** ([2017, day 5](https://github.com/ttencate/aoc2017/tree/master/05_algol68))
* Assembly, any architecture (x86, [2016, day 7](https://github.com/ttencate/aoc2016/tree/master/07_x86_assembly))
* **awk** ([2017, day 4](https://github.com/ttencate/aoc2017/tree/master/04_awk))
* **BASIC** (BBC BASIC, [2017, day 17](https://github.com/ttencate/aoc2017/tree/master/17_bbcbasic))
* C ([2016, day 23](https://github.com/ttencate/aoc2016/tree/master/23_c))
* C++ ([2016, day 24](https://github.com/ttencate/aoc2016/tree/master/24_cpp))
* C# ([2016, day 17](https://github.com/ttencate/aoc2016/tree/master/17_cs))
* **Clojure** ([2017, day 19](https://github.com/ttencate/aoc2017/tree/master/19_clojure))
* COBOL ([2016, day 1](https://github.com/ttencate/aoc2016/tree/master/01_cobol))
* **CUDA** ([2017, day 14](https://github.com/ttencate/aoc2017/tree/master/14_cuda))
* **CoffeeScript** ([2017, day 7](https://github.com/ttencate/aoc2017/tree/master/07_coffeescript))
* D ([2016, day 11](https://github.com/ttencate/aoc2016/tree/master/11_d))
* **Dart** ([2017, day 12](https://github.com/ttencate/aoc2017/tree/master/12_dart))
* **Eiffel** ([2017, day 18](https://github.com/ttencate/aoc2017/tree/master/18_eiffel))
* **Elixir** ([2017, day 22](https://github.com/ttencate/aoc2017/tree/master/22_elixir))
* **Erlang** ([2017, day 10](https://github.com/ttencate/aoc2017/tree/master/10_erlang))
* **F#** ([2017, day 16](https://github.com/ttencate/aoc2017/tree/master/10_fsharp))
* **Forth** ([2016, day 2](https://github.com/ttencate/aoc2017/tree/master/02_forth))
* Fortran 90 ([2016, day 8](https://github.com/ttencate/aoc2016/tree/master/08_fortran))
* Go ([2016, day 25](https://github.com/ttencate/aoc2016/tree/master/25_go))
* Groovy ([2016, day 13](https://github.com/ttencate/aoc2016/tree/master/13_groovy))
* Haskell ([2016, day 16](https://github.com/ttencate/aoc2016/tree/master/16_haskell))
* Haxe ([2016, day 22](https://github.com/ttencate/aoc2016/tree/master/22_haxe))
* **Icon** ([2017, day 21](https://github.com/ttencate/aoc2017/tree/master/21_icon))
* JavaScript ([2016, day 20](https://github.com/ttencate/aoc2016/tree/master/20_javascript))
* **J** ([2017, day 11](https://github.com/ttencate/aoc2017/tree/master/11_j))
* **Java** ([2017, day 24](https://github.com/ttencate/aoc2017/tree/master/24_java))
* **Julia** ([2017, day 9](https://github.com/ttencate/aoc2017/tree/master/09_julia))
* **Kotlin** ([2017, day 25](https://github.com/ttencate/aoc2017/tree/master/25_kotlin))
* Lua ([2016, day 18](https://github.com/ttencate/aoc2016/tree/master/18_lua))
* **Nim** ([2017, day 20](https://github.com/ttencate/aoc2017/tree/master/20_nim))
* OCaml ([2016, day 12](https://github.com/ttencate/aoc2016/tree/master/12_ocaml))
* **Octave** ([2017, day 13](https://github.com/ttencate/aoc2017/tree/master/13_octave))
* OpenCL ([2016, day 14](https://github.com/ttencate/aoc2016/tree/master/14_opencl))
* Pascal ([2016, day 10](https://github.com/ttencate/aoc2016/tree/master/10_pascal))
* Pen and paper (and a calculator) ([2016, day 15](https://github.com/ttencate/aoc2016/tree/master/15_pen_and_paper))
* Perl ([2016, day 21](https://github.com/ttencate/aoc2016/tree/master/21_perl))
* **PHP** ([2017, day 23](https://github.com/ttencate/aoc2017/tree/master/23_php))
* **Pony** ([2017, day 15](https://github.com/ttencate/aoc2017/tree/master/15_pony))
* **PostgreSQL** ([2017, day 1](https://github.com/ttencate/aoc2017/tree/master/01_postgresql))
* Python ([2016, day 5](https://github.com/ttencate/aoc2016/tree/master/05_python))
* R ([2016, day 6](https://github.com/ttencate/aoc2016/tree/master/06_r))
* Ruby ([2016, day 19](https://github.com/ttencate/aoc2016/tree/master/19_ruby))
* Rust ([2016, day 9](https://github.com/ttencate/aoc2016/tree/master/09_rust))
* Scala ([2016, day 3](https://github.com/ttencate/aoc2016/tree/master/03_scala))
* Scheme ([2016, day 2](https://github.com/ttencate/aoc2016/tree/master/02_scheme))
* Sh (bash and common shell utilities) ([2016, day 4](https://github.com/ttencate/aoc2016/tree/master/04_bash))
* **Smalltalk** ([2017, day 6](https://github.com/ttencate/aoc2017/tree/master/06_smalltalk))
* **TCL** ([2017, day 3](https://github.com/ttencate/aoc2017/tree/master/03_tcl))
* **TeX** ([2017, day 8](https://github.com/ttencate/aoc2017/tree/master/08_tex))

## Rules

* Input should be read from stdin if at all possible. Otherwise, read from a
  file named `input`.
* The input file must be read and parsed exactly as provided. No modifications
  are allowed.
",ttencate/aoc2017
33,NiXXeD,JavaScript,{'JavaScript': 114189},"# adventofcode
Solving http://adventofcode.com puzzles

I'm mostly doing [code golf](https://en.wikipedia.org/wiki/Code_golf) with these solutions, so they will seem very terse.
No, I don't code like this at work.

Using Node v6 for ES6 syntax and features.

To run one day/part
---
```
# run a specific year, day, part
npm start <year#> <day#> <part#>
 
# assumes latest year
npm start <day#> <part#>
 
# assumes latest year and day
npm start <part#>
 
# assumes latest year, day, and part
npm start
```

Example run
---
```
npm start 2015 6 1
 
> 6.1 running...
> 6.1 answer:	   543903
> 6.1 time:	   00:09:7400
```

To test
---
```
# run tests for 2015
npm run test-2016
 
# run tests for 2016
npm run test-2016
 
# run tests for latest year
npm test
```

To set up a new day
---
Creates the folder `dayN`, the files `input`, `part1.js`, `part2.js`, and tests in 
`test.js` for the provided year.

```
# set up the next day in the current year
npm run setup
 
# set up an exact year / day
npm run setup 2016 12
```
",NiXXeD/adventofcode
34,bhauman,Clojure,{'Clojure': 124039},"# Advent of Clojure

My [Advent of Code](http://adventofcode.com/) Solutions in Clojure.

## Code layout

**The solutions** are in the `src/advent-[year]` directories.

**The problem inputs** are in the `resources/[year]` directories.

## Solutions

When you are finished working on the problem, there are solutions
available for you to get another point of view on the problem.

* [2015](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2015)
* [2016](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2016)
* [2017](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2017)
* [2018](https://github.com/bhauman/advent-of-clojure/tree/master/src/advent-2018)

![advent tree](https://raw.githubusercontent.com/bhauman/advent-of-clojure/master/resources/2015/advent_tree.png)

For more coding problems see [4Clojure](https://www.4clojure.com/)
",bhauman/advent-of-clojure
35,kodsnack,C++,"{'C++': 885888, 'Python': 510575, 'PLSQL': 271161, 'C#': 250234, 'JavaScript': 158106, 'Clojure': 100063, 'Go': 55916, 'Haskell': 38650, 'OCaml': 35422, 'PHP': 31226, 'Java': 30680, 'Ruby': 29983, 'OpenEdge ABL': 19512, 'Rust': 14277, 'CMake': 12986, 'REXX': 8680, 'PowerShell': 6742, 'Scala': 6376, 'Shell': 4773, 'D': 4265, 'Brainfuck': 4118, 'Pascal': 2691, 'Nim': 2400, 'Gnuplot': 1854, 'Prolog': 1763, 'C': 1548, 'Common Lisp': 1285, 'Swift': 1048, 'Kotlin': 578, 'Makefile': 41, 'MATLAB': 22}","# Advent of code 2018
Contribute your solutions to [Advent of Code 2018](https://adventofcode.com) and be inspired by others.

Bidra med dina lösningar på problemen i Advent of code, i vilket språk du vill. Välj ett du kan, eller ett du vill lära dig! Vi har också en ledarbräda (leaderboard) på Advent of code: koden till ledarbrädan är 194162-e06e748d.

Vi har också en Slackkanal dit alla är välkomna att snacka Advent of code, eller egentligen allt mellan himmel och jord med lite koppling till kod. Maila info@kodsnack.se eller twittra din epost till @kodsnack så släpper vi in er.

Dina lösningar får gärna checkas in i en mapp med namn på formen #användarnamn-språk#, så blir det lite lättare för alla att få överblick.

Lösningarna kan komma att diskuteras i avsnitt av Kodsnack, så lägg med en readme.md med en notis om du inte vill riskera att bli omnämnd.
",kodsnack/advent_of_code_2018
36,BenoitZugmeyer,Rust,"{'Rust': 372999, 'Shell': 4494}","### Rusty Advent Of Code

My solutions for [Advent Of Code](http://adventofcode.com) written in Rust. I am doing it as an
exercise to learn this language, so the code may contain many mistakes. Let me know if you have any
advice or question!

### Other Rust implementations

Add your own by submitting a pull request.

#### In progress (current year)

| Repository | Twitter profile | Editions |
|--|--|--|
| [anowell/advent-of-code](https://github.com/anowell/advent-of-code) | - | 2018 |
| [baszalmstra/adventofcode2018](https://github.com/baszalmstra/adventofcode2018) | - | 2018 |
| [birkenfeld/advent18](https://github.com/birkenfeld/advent18) | - | 2018 |
| [BurntSushi/advent-of-code](https://github.com/BurntSushi/advent-of-code) | - | 2018 |
| [butzsch/Advent-of-Code-2018](https://github.com/butzsch/Advent-of-Code-2018) | - | 2018 |
| [dgel/adventOfCode2018](https://github.com/dgel/adventOfCode2018) | - | 2018 |
| [dsilvers/aoc](https://git.gitano.org.uk/personal/dsilvers/aoc.git/tree) | [@dsilverstone](https://twitter.com/dsilverstone) | 2018 |
| [gobanos/advent-of-code-2018](https://github.com/gobanos/advent-of-code-2018) | - | 2018 |
| [gperinazzo/advent-of-code-2018](https://github.com/gperinazzo/advent-of-code-2018) | - | 2018 |
| [hedvigoscar/adventofcode2018](https://github.com/hedvigoscar/adventofcode2018) | - | 2018 |
| [m-rutter/advent-of-code](https://github.com/m-rutter/advent-of-code) | [@m_rutter](https://twitter.com/m_rutter) | 2017, 2018 
| [jfro/AoC2018](https://github.com/jfro/AoC2018) | [@jeromejtk](https://twitter.com/jeromejtk) | 2018 |
| [JMS55/advent-of-code-2018](https://gitlab.com/JMS55/advent-of-code-2018) | - | 2018 |
| [jsdw/advent-of-code-2018](https://github.com/jsdw/advent-of-code-2018) | - | 2018 |
| [KonradBorowski/advent-of-code-2018](https://gitlab.com/KonradBorowski/advent-of-code-2018) | - | 2018 |
| [LLBlumire/AoC2018](https://github.com/LLBlumire/AOC2018) | [@llblumire](https://twitter.com/llblumire) | 2018 |
| [pivovarit/advent_of_code_2018_rs](https://github.com/pivovarit/advent_of_code_2018_rs) | [@pivovarit](https://twitter.com/pivovarit) | 2018 |
| [shssoichiro/aoc2018](https://git.onewebdev.info/soichiro/aoc2018) | - | 2018 |
| [theonewolf/aoc2018](https://github.com/theonewolf/aoc2018) | [@theonewolf](https://twitter.com/theonewolf) | 2018 |
| [udoprog/rust-advent-of-code-2018](https://github.com/udoprog/rust-advent-of-code-2018) | - | 2018 |

#### Finished

| Repository | Twitter profile | Editions |
|--|--|--|
| [birkenfeld/advent15](https://github.com/birkenfeld/advent15) | - | 2015 |
| [birkenfeld/advent16](https://github.com/birkenfeld/advent16) | - | 2016 |
| [birkenfeld/advent17](https://github.com/birkenfeld/advent17) | - | 2017 |
| [dgel/adventOfCode2017](https://github.com/dgel/adventOfCode2017) | - | 2017 |
| [dsilvers/aoc](https://git.gitano.org.uk/personal/dsilvers/aoc.git/tree) | [@dsilverstone](https://twitter.com/dsilverstone) | 2015, 2016, 2017 |
| [jsdw/advent-of-code-2017](https://github.com/jsdw/advent-of-code-2017) | - | 2017 |
| [jugglerchris/aoc2017](https://github.com/jugglerchris/aoc2017) | [@jugglerchris](https://twitter.com/jugglerchris) | 2017 |
| [JWorthe/advent_of_code_2017](https://github.com/JWorthe/advent_of_code_2017) | [@JWorthe](https://twitter.com/JWorthe) | 2017 |
| [JWorthe/adventofcode2016](https://github.com/JWorthe/adventofcode2016) | [@JWorthe](https://twitter.com/JWorthe) | 2016 |
| [McGittyHub/aoc-2k17](https://github.com/McGittyHub/aoc-2k17) | [@snarf95](https://twitter.com/snarf95) | 2017 |
| [sciyoshi/advent-of-rust-2017](https://github.com/sciyoshi/advent-of-rust-2017) | [@sciyoshi](https://twitter.com/sciyoshi) | 2017 |
| [thejpster/rust-advent-of-code](https://github.com/thejpster/rust-advent-of-code) | [@therealjpster](https://twitter.com/therealjpster) | 2016, 2017 |
| [udoprog/rust-advent-of-code-2017](https://github.com/udoprog/rust-advent-of-code-2017) | [@udoprog](https://twitter.com/udoprog) | 2017 |
| [zargony/advent-of-code-2015](https://github.com/zargony/advent-of-code-2015) | [@zargony](https://twitter.com/zargony) | 2015 |
| [zargony/advent-of-code-2016](https://github.com/zargony/advent-of-code-2016) | [@zargony](https://twitter.com/zargony) | 2016 |
| [zargony/advent-of-code-2017](https://github.com/zargony/advent-of-code-2017) | [@zargony](https://twitter.com/zargony) | 2017 |

#### Unfinished

| Repository | Twitter profile | Editions |
|--|--|--|
| [adamchalmers/adventofcode2017](https://github.com/adamchalmers/adventofcode2017) | [@adam_chal](https://twitter.com/adam_chal) | 2017 |
| [bolshchikov/adventofcode-solutions](https://github.com/bolshchikov/adventofcode-solutions) | [@bolshchikov](https://twitter.com/bolshchikov) | 2017 |
| [cameronp/aoc17](https://github.com/cameronp/aoc17) | [@cameronp](https://twitter.com/cameronp) | 2017 |
| [jasonpeacock/advent-of-code-2017](https://github.com/jasonpeacock/advent-of-code-2017) | [@jasonpeacock](https://twitter.com/jasonpeacock) | 2017 |
| [joelverhagen/adventofcode](https://github.com/joelverhagen/adventofcode) | [@joelverhagen](https://twitter.com/joelverhagen) | 2015, 2016, 2017 |
| [mgritter/aoc2017](https://github.com/mgritter/aoc2017) | [@markgritter](https://twitter.com/markgritter) | 2017 |
| [rje/aoc2017](https://github.com/rje/aoc2017) | [@rje](https://twitter.com/rje) | 2017 |
| [StreakyCobra/advent-of-code-2017](https://github.com/StreakyCobra/advent-of-code-2017) | [@StreakyCobra](https://twitter.com/StreakyCobra) | 2017 |
| [ubsan/advent-of-code](https://github.com/ubsan/advent-of-code) | [@ubsanitizer](https://twitter.com/ubsanitizer) | 2016 |
| [wezm/advent-of-code](https://github.com/wezm/advent-of-code) | [@wezm](https://twitter.com/wezm) | 2017 |
| [xfix/advent-of-code-2017](https://github.com/xfix/advent-of-code-2017) | - | 2017 |
",BenoitZugmeyer/RustyAdventOfCode
37,mvaldesdeleon,Haskell,{'Haskell': 126402},"# Advent of Code 2018

Advent of Code 2018, in Haskell

http://adventofcode.com/2018

# Instructions

You should have [stack](https://docs.haskellstack.org/en/stable/README/) installed before continuing.

```sh
git clone git@github.com:mvaldesdeleon/aoc18.git
cd aoc18
stack build
stack exec day[1-25]
# i.e., stack exec day15
```

# Reflections

I wrote an article based on my experience doing this Advent of Code in Haskell.

[Advent of Haskell - Thoughts and lessons learned after using Haskell consistently for 25 days in a row](https://medium.com/@mvaldesdeleon/advent-of-haskell-950d6408a729)

# License

BSD-3-Clause
",mvaldesdeleon/aoc18
38,MicUurloon,Haxe,{'Haxe': 29269},"# AdventurePathfinding
Example code of a pathfinding method for 2d point and click adventure game
This project is part of a blog entry: : http://www.groebelsloot.com/2016/03/13/pathfinding-part-2/

This software is written in [Haxe](https://www.haxe.org) using [Luxe](http://luxeengine.com/) as a game framework.
A web build of this software can be found here: http://groebelsloot.com/examples/pathfinding/

*This is free and unencumbered software released into the public domain.*

*Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.*
",MicUurloon/AdventurePathfinding
39,lukechampine,Go,"{'Go': 1400173, 'Zig': 16535, 'Haskell': 9870, 'Rust': 4842, 'Assembly': 503}",,lukechampine/advent
40,birkenfeld,Rust,"{'Rust': 59885, 'Makefile': 400}","## 🎄 Advent of Code 2018 🎄

These are Rust-language solutions for the [coding-challenge advent
calendar](http://adventofcode.com/2018).  You'll need stable Rust 1.31 and Cargo
to run.

I've tried to make the solutions small and somewhat optimized for speed (so far,
no solution takes more than about a second on an up-to-date machine).  Inputs
are included in text file form and parsed.

### External code used

A custom helper library is used, called `advtools`.  It provides utilities for
easily parsing the input files, which I don't want to rewrite each year, and
access to often used external crates like itertools and rayon.

For tasks that require nontrivial datastructures or algorithms, I try to find
and use a third-party crate to show off the ease of using Rust's crates
infrastructures, e.g. `petgraph`.

### Building/benchmarking

All code is contained in a single Cargo project, with a different binary target
for each day.  Solutions are printed to stdout.

A simple Makefile is also provided in order to run all days.  Just run `make`.

Benchmarks are now provided by criterion.rs, use
```
cargo bench --bench days [filter]
```
to run them.
",birkenfeld/advent18
41,njoubert,,{},"# A Raspberry Pi Christmas Coding Adventure!

Dieter, Pierre-Henri and Gleb gets Raspberry Pi computers for Christmas, and embarks on a *Coding Adventure!*

This document gives you everything you need to get hacking with the Raspberry Pi!


| Section | **Table of Contents** | 
|---------|-----------------------|
|1|[What is a Raspberry Pi?](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#what-is-the-raspberry-pi)|
|2|[Step-By-Step Getting Started and Warm-up 15-minute Projects!](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#how-do-we-get-started)|
|3|[What Can I Build?](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#ok-i-guess-thats-cool-what-can-i-build)|
|4|[Learning More: My Curriculum for Next Steps with Guides and Resources](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure/blob/master/README.md#learning-more-next-steps-guides-and-resources)|
|5|[Inspiring Projects, Great Communities, and Awesome Additions to the Pi!](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure/blob/master/README.md#inspiring-projects-great-communities-and-awesome-additions-to-the-pi)|
|6|[What's in the Kit?](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#whats-in-the-box)|
|7|[Useful Testing Tools and Debugging Procedures](https://github.com/njoubert/RaspberryPiChristmasCodingAdventure#useful-testing-tools)|

### What the hell Niels, what kind of Christmas gift is this? Now what?

1. I just gave all you guys **real computers!**. It can do everything your laptop can do!
2. You can actually build stuff with it! 
	- Simple stuff, like hook up speakers to it and use it as a music player... or
	- Build your own Hardware! You can connect buttons, lights, a small screen, etc!

### What is the Raspberry Pi?

It's basically the innards of an iPhone 5, with all the pins exposed! It's built and maintained by the [Raspberry Pi foundation](https://www.raspberrypi.org/) as an educational tool.

- It has a powerful graphics card, can play 1080p video and has HDMI out!
- It can run either Linux or Android, and is built for easy programming! We'll mess around with Linux and Python!
- You can easily build your own hardware and attach it! Like buttons, LEDs, the christmas lights, etc...
- It's the most popular educational computer on the market!

Specifically, I gave you guys the newest Raspberry Pi 2! [Here's the Specs](https://www.raspberrypi.org/products/raspberry-pi-2-model-b/)

### How do we get started?

Raspberry Pi has a [quickstart guide here.](https://www.raspberrypi.org/help/quick-start-guide/) 

**Step 1: Setup!** 

[Copy NOOBS onto the SD card I gave you using your computer. Then stick it into your Raspberry Pi.](https://www.raspberrypi.org/help/noobs-setup/)

**Step 2: Connect!** 

Plug your Raspberry Pi into a monitor, keyboard, mouse and power! Then follow the NOOBS installer to install Raspbian (a derivative of Debian Linux, just like Ubuntu)

**Step 3: Mini Project: LEDs and Buttons!** 

Let's do some [Physical Computing on the Raspberry Pi!](https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/) Try to make a little circuit with an LED, and [use python to turn it on and off using the GPIO pins!](http://openmicros.org/index.php/articles/94-ciseco-product-documentation/raspberry-pi/217-getting-started-with-raspberry-pi-gpio-and-python)

Expand it to also read the value of buttons!

	*CAREFUL:* You CAN damage your raspberry pi by connecting the pins incorrectly!

	1. ALWAYS disconnect your circuit before plugging and unplugging components or changing things.
	2. DO NOT draw more than 3.3V or less than 0V from a pin. Don't wire power directly to ground!
	3. Do NOT draw more than 5mA from a pin! Use the included transistors to switch higher power things on and off.
	4. Use Pull-down and Pull-up resistors with buttons.

[What is a pull-up and pull-down resistor?](http://playground.arduino.cc/CommonTopics/PullUpDownResistor)

Check out Pat's course CS107E, it has a [guide to basic electronics with the Raspberry Pi.](https://github.com/cs107e/courseware/blob/master/guides/electricity.md)

**Step 4: Serial Bridge from Laptop to RPi!** 

Install the SILABS USB to UART CP21xx driver, and try to make Python on your Raspberry Pi talk to you computer over Serial!

1 	Install the [SILABS driver](https://www.silabs.com/products/interface/usbtouart/Pages/usb-to-uart-bridge.aspx)

2	Plug the USB to UART adapter into your computer

3	Install a serial console on your computer, like [CoolTerm](http://freeware.the-meiers.org/)

4	[Write a Raspberry Pi program to send and receive serial data](http://www.instructables.com/id/Read-and-write-from-serial-port-with-Raspberry-Pi/), and see if it shows up on your laptop.

**Step 5: Mini Project: Transistors and Lasers!** 

Switch the Laser on and off with the Raspberry Pi using transistors!

The laser wants a higher voltage and higher current supply than the Raspberry Pi can provide. This is where you can use the transistor: The transistor is just a switch. A switch you can control electronically. By switching low power on the ""base"" pin, you can control whether high power flows through the other pins.

Follow [This article on how to switch 9v using a NPN transistor](https://electronics.stackexchange.com/questions/95089/switching-9v-using-a-npn-transistor-and-an-arduino) and hook up a higher voltage to your laser!

**Step 6: Mini Project: Servos and why you also need an Arduino!** 

Drive a Servo with PWM!

[Make the servo turn left and right from Python!](http://razzpisampler.oreilly.com/ch05.html)

Python is not great for driving Servos (and Linux in general isn't!) since it doesn't guarantee the *timing* of when things will happen. The same little processor is also driving your screen, mouse, keyboard, the network, keeping time, etc etc.

You can do better than python by using this [ServoBlaster Kernel Module](https://github.com/richardghirst/PiBits/tree/master/ServoBlaster) or by connecting it to an Arduino or a [Motor Shield / HAT](https://www.adafruit.com/products/2348)

The BEST you can do is to use hardware PWM. RaspberryPi has *one* dedicated little chip just to make PWM signals. This tutorial explains how to [use WiringPi to access this port.](http://raspi.tv/2013/how-to-use-wiringpi2-for-python-with-pull-ups-or-pull-downs-and-pwm)

**Step 7: Start Designing Your Own Stuff, or Get Insired By Others!** 

Read the rest of this page, and check out the ""Cool communities and places to look"" or google for ""Raspberry Pi projects""!

### OK I guess that's cool... What can I build?

We can built *lots* of stuff. But that's not a useful answer. The RaspberryPi is *primarily an educational tool*, but it's beefy enough to do tons of real-world stuff. So, here's the *capabilities* of this little kit:

The **RaspberryPi** is a quad-core 1Ghz computer, with 1Gb RAM and a 16GB SD card for storage. It has a **fast graphics card** on it (for its size) that can decode 1080p movies to your big screen (1920x1080 maximum resolution). So, you can definitely play movies, netflix, youtube, all that kinds of stuff on here. 

It also has **100Mbps ethernet and four USB2.0 ports**. So you can plug in (multiple!) external hard drives, and you can use it as a file server. It can share four hard-drives on your network. It's also powerful enough to run a webserver! You can host your own website on it. Or use it to torrent things! You can even leave it plugged into the university's network at school, and use it as a file server. Log into it remotely, and download things over the fast school internet. Host a minecraft server! Host an IRC chat server! Host a Tor node for anonymous browsing! Naturally, you can plug in many USB devices! Plug in a webcam and use it as a remote monitor!

You can **power it from batteries** (I can help you set this up), and it's reasonable to imagine getting 5 to 10 hours of battery life from it.

It runs **linux or android** so you can learn how to work with a linux system. It's a really great **machine for programming**: Use it to learn how to program all kinds of stuff in Python: For example, use PyGame to write your own game!

- You can buy any size (from tiny to huge) LCD touchscreen on eBay, and [build your own tablet!](https://learn.adafruit.com/7-portable-raspberry-pi-multitouch-tablet/overview)
- You can *build your own hardware* that connects to the GPIO pins on the side! 
	- Buttons, switches, LEDs, and LED matrices! 
	- Stepper motors, DC motors, servos! Things that turn!
	- Accelerometers, Magnetometers, Gyroscopes, Barometers, Thermometers! Tons of sensors that measure the real word!

You can make a weather station that displays the current temperature and the chance of rain. Or measure the current internet ping latency and light up a row of LEDs accordingly. You can have it check your email for you, and light up an LED for every unread message - and beep every time a new message arrives! 

There's a whole range of **RaspberryPi HATs** that sit on top of the Raspberry Pi to give you additional functionalty! My favorite is the [Sense HAT](https://www.raspberrypi.org/blog/the-sense-hat-headgear-for-the-terminally-curious/)! It's currently in *space* on the ISS, and it has a ton of sensors, a small joystick, and a badass 8x8 RGB LED display matrix, so you can make cool animations.

You can pair it with **LED controllers** (like the [PixelPusher](http://www.heroicrobotics.com/products/pixelpusher)) and make an LED wall, or a starry night sky on the ceiling of your room!

You can hook up a **motor controller** and build a 2D cutter that slices up paper into shapes! Or moves a pen around to draw things programmatically! You can even build a **[robot](https://www.raspberrypi.org/blog/tag/robots/)!** A super-fancy robot would be a **[rubix cube solver](https://www.raspberrypi.org/blog/cube-solver/)**!

Hook it up to a Passive Infrared Sensor, and it can sense when someone is moving in your room - regardless of whether the light is on! Build a security system!

Here's some more ideas:

*Multimedia-related:*

- Set it up as Airplay speakers! You can stream music to it from your phone!
- Use it as a media center! Hook it up to a screen and your external harddrive, and it can play movies!

*Software-related:*

- Use it to run a torrent client to save stuff to your external harddrive without needing your computer
- Make a digital picture frame! Have it cycle through instagram pictures.

*Hardware-related:*

- Easier:
	- Display temperature forecast for today on the 7-segment display
	- Make the buttons send emails, texts, or scroll through different things on the display
	- Measure latency to your favorite server, display it as an LED graph
	- Make a sweet animation of LEDs blinking
- Intensely awesome:
	- Pair it with an Arduino Mega and RAMPS shield, and build any 3-axis movable CNC machine!
	- Build a 3D Printer

### Learning More: Next Steps, Guides, and Resources 

**Where to go to learn more?**

The main programming languages I suggest is **Python** and **C**. Use Python for all the experiments and hacking, use C for things that needs to be fast or needs to run *without an operating system: bare metal right on the hardware!*

Here's the **curriculum** I suggest you work through:

- Pat's CS107e [Raspberry Pi Course Guides](https://github.com/cs107e/courseware/blob/master/guides/README.md)
	- For hardware, [understand basic electricity](https://github.com/cs107e/courseware/blob/master/guides/electricity.md)
	- For using a transistor as a switch, [follow this TL;DR](https://electronics.stackexchange.com/questions/95089/switching-9v-using-a-npn-transistor-and-an-arduino) then read [this tutorial](https://www.techhouse.org/~dmorris/projects/tutorials/transistor.switches.pdf)
	- Learn basic electronics with [Make Magazine's Awesome Video Course](http://makezine.com/2016/01/11/take-a-video-crash-course-in-beginner-electronics/)
	- Learn the (UNIX command line)[https://github.com/cs107e/courseware/blob/master/guides/unix.md]
- Learn basic Python!
	- [Instant Hacking with Python! Short, covers all the main stuff!](http://hetland.org/writing/instant-hacking.html)		- [Automate the boring stuff with Python! Lots of great useful things to build](https://automatetheboringstuff.com/)
	- [A Gentle Introduction to Python Coding on the Raspberry Pi](http://davidbriddock.blogspot.com/p/learn-python.html)
	- [Basic hardware programming with Python](http://makezine.com/projects/tutorial-raspberry-pi-gpio-pins-and-python/)
- Once you're ready... Build your [*OWN OPERATING SYSTEM*!!](https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/index.html)


**More Advanced Topics:**

- [Write your own hardware driver for a GPIO pin](http://sysprogs.com/VisualKernel/tutorials/raspberry/leddriver/)

### Inspiring Projects, Great Communities, and Awesome Additions to the Pi!

**Great Communities:** A big part of building stuff is having inspiration and a community to draw from. Here's some great places that's fun to look at people's projects online:

- [Raspberry Pi Blog](https://www.raspberrypi.org/blog/)
- [Adafruit Learn](https://learn.adafruit.com/)
- [Pimoroni Learn](http://learn.pimoroni.com/)
- [Wolfgang Klerk's Arduino and Raspberry Pi Projects](https://wolfgangklenk.wordpress.com/)
- [Hackaday, both the blog and the whole site](https://hackaday.com/blog/)
- [Dangerous Prototypes](http://dangerousprototypes.com/)

**Sources of Hardware and Software:** Where can you browse around and buy all the cool hardware parts for your awesome project?

- [SparkFun Store](https://www.sparkfun.com/)
- [AdaFruit Store](https://www.adafruit.com/categories)
- [Seeed Studio](http://www.seeedstudio.com/depot/)
- [ElectroDragon Prototyping Parts](http://www.electrodragon.com/)
- [NavSpark GPS Modules](http://www.navspark.com.tw/)

- [Adafruit Python GPIO Library](https://github.com/adafruit/Adafruit_Python_GPIO)
 

**Badass Projects Built on Raspberry Pi:**

- [FarmBot](https://hackaday.io/post/7593). Plants and waters a garden. Pairs a Raspberry Pi, Arduino, [stepper motor drivers](https://www.adafruit.com/products/1438)
- [Pi Tablet](https://learn.adafruit.com/7-portable-raspberry-pi-multitouch-tablet/overview). A 7"" multitouch home-made tablet!
- [Pi-Top Laptop](http://www.pi-top.com/). A hackable laptop - slide open the top to reveal a raspberry pi and breadboard space.

**Cool hardware additions to the Raspberry Pi:**

- [AdaFruit Trinket](http://learn.pimoroni.com/tutorial/raspberry-pi/raspberry-pi-programming-adafruit-trinket). Like a tiny arduino: good for PWM generation, analog sensor reading, and real-time programming.
- [SenseHAT](https://www.adafruit.com/products/2738). So cool - RGB LED matrix and a boatload of sensors!
- OLED Displays like [this](http://www.amazon.com/gp/product/B00O2LLT30?keywords=raspberry%20pi%20oled&qid=1451470478&ref_=sr_1_1&sr=8-1) and [this](http://www.amazon.com/gp/product/B00ZOXWA7Y?psc=1&redirect=true&ref_=oh_aui_detailpage_o03_s00). Small, cheap, low-power, programmable displays.
- [Rechargeable LiPo power source.](https://www.adafruit.com/products/2465)
- [LED Matrix Displays](https://www.adafruit.com/products/2345)
- High Fidelity Audio Out such as the [pHAT DAC](https://shop.pimoroni.com/products/phat-dac) for phat beats.

### What's in the Box?
	
Each of you have slight variations on this, but here's the list of everything! 

|Img| What is it?                 | What's it for?? |
|---|-----------------------------|-----------------|
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/01_rpi.jpg)       | 1x Raspberry Pi 2 (Model B) | A single-board 1Ghz quad-core computer with 1GB Ram! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/02_case_power.jpg)| Case and Power Supply       | Put the Pi in it, and power it up! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/03_sd.jpg)        | 16GB MicroSD Card           | This is the ""hard drive"" for your Pi! We'll put Linux on this. |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/04_uart.jpg)      | SILabs USB to UART Bridge   | We can use this to connect to the Pi from our normal computer, when we don't have a screen or a ethernet cable for the Pi. |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/05_cobbler.jpg)   | T-Cobbler                   | A simple way to connect the Pi to a breadboard to hook up electronics! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/06_bboard.jpg)    | Breadboard                  | Build electronic circuits simply by pushing components into this! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/07_cables.jpg)    | Assorted Jumper Cables      | Hook things up together! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/08_buttons.jpg)   | Buttons!                    | Program these to do something on click! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/09_led.jpg)       | R,G,B,W LEDs!               | Light them up from your code! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/10_segment.jpg)   | 7-segment display!          | Display numbers from your code! Temperature? Latency? Unread emails? Anything! |
|   | Micro Servo!          | [Make the servo turn left and right from Python!](http://razzpisampler.oreilly.com/ch05.html) Although an arduino is really better for this, since it can run in real time rather than sitting on top of linux. |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/11_res.jpg)       | 1k and 10k Resistors!       | You need these to hook up LEDs and Buttons! |
|![rpi](https://raw.githubusercontent.com/njoubert/JoubertFamilyChristmasCodingAdventure/master/images/12_trans.jpg)     | 2N3904 Transistors!         | These are NPN Transistors! General purpose digital switch and amplifier! Use it to switch on and off larger stuff from the Pi. You can build a touch switch with it! |



### Useful testing tools...

When you build stuff, you *really* need tools to test what you're doing. This avoids getting really frustrated when things don't work and you don't know why. Here's the testing tools I recommend:

**Hardware:**

- A multimeter! Like our Fluke! With it, you can check that something is turned on, that there's not too much or too little power before you plug something in, and what values your resistors are. This lets you measure voltage, resistance, and continuity.
- A Serial to USB connection! I included one! This lets you plug your computer directly into anything that has a serial connection, so you can check the data going in and out of it. For example, you can check whether a GPS is actually spitting out positions before wiring it up to your raspberry pi.
- A logic analyzer! This connects to a wire, and reads every bit going on that wire. So you can use it to ""snoop"" on the digital data sent between chips. 
- An oscilloscope for analog circuits: This can display the analog wave going along a cable. For example, this can show you the sound waves going to your speaker! So you can check whether they're distorted or clipped.


**Software:**

- First of all, use the Scientific Method to debug your code: Come up with a hypothesis for what might be wrong. Formulate an experiment to test your hypothesis. Then run your experiment and see if it proves or disproves your hypothesis. For example: Problem: ""the LED doesn't turn on"". Hypothesis: ""there is no power coming out of the raspberry pi on that pin"". Test: ""Put a multimeter between the pin and ground. It should read 0v"". Take the measurement, if it is 0v, now you know the problem must be with turning the pin on! If it is 3.3V, then the problem must be something with the LED.
- Put ""print"" statements in your code and check that each part is working as expected.
- Write your code in small chunks, and test every chunk.
- Learn how to use a debugger to step through your code.

",njoubert/RaspberryPiChristmasCodingAdventure
42,aspittel,Python,{'Python': 41816},,aspittel/advent-of-code
43,davedelong,Swift,{'Swift': 309538},"# Advent of Code

A description of this package.
",davedelong/AOC
44,tginsberg,Kotlin,{'Kotlin': 119437},"## Advent of Code 2018 Solutions in Kotlin

[![license](https://img.shields.io/github/license/mashape/apistatus.svg)]()

This repo is my personal attempt at solving the [Advent of Code 2018](http://adventofcode.com/2018) set of problems with the Kotlin programming language.

I am trying to solve these on the day they are posted with clear, idiomatic solutions. That means in some cases I will sacrifice performance for a more clear solution.

|   Day   | Title                                         |  Links                                       |
| --------|-----------------------------------------------|--------------------------------------------- |
|    1    | Chronal Calibration                           | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day1/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day01.kt) [\[AoC\]](http://adventofcode.com/2018/day/1) |
|    2    | Inventory Management System                   | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day2/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day02.kt) [\[AoC\]](http://adventofcode.com/2018/day/2) |
|    3    | No Matter How You Slice It                    | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day3/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day03.kt) [\[AoC\]](http://adventofcode.com/2018/day/3) |
|    4    | Repose Record                                 | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day4/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day04.kt) [\[AoC\]](http://adventofcode.com/2018/day/4) |
|    5    | Alchemical Reduction                          | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day5/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day05.kt) [\[AoC\]](http://adventofcode.com/2018/day/5) |
|    6    | Chronal Coordinates                           | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day6/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day06.kt) [\[AoC\]](http://adventofcode.com/2018/day/6) |
|    7    | The Sum of Its Parts                          | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day7/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day07.kt) [\[AoC\]](http://adventofcode.com/2018/day/7) |
|    8    | Memory Maneuver                               | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day8/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day08.kt) [\[AoC\]](http://adventofcode.com/2018/day/8) |
|    9    | Marble Mania                                  | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day9/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day09.kt) [\[AoC\]](http://adventofcode.com/2018/day/9) |
|   10    | The Stars Align                               | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day10/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day10.kt) [\[AoC\]](http://adventofcode.com/2018/day/10) |
|   11    | Chronal Charge                                | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day11/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day11.kt) [\[AoC\]](http://adventofcode.com/2018/day/11) |
|   12    | Subterranean Sustainability                   | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day12/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day12.kt) [\[AoC\]](http://adventofcode.com/2018/day/12) |
|   13    | Mine Cart Madness                             | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day13/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day13.kt) [\[AoC\]](http://adventofcode.com/2018/day/13) |
|   14    | Chocolate Charts                              | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day14/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day14.kt) [\[AoC\]](http://adventofcode.com/2018/day/14) |
|   15    | Beverage Bandits                              | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day15/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day15.kt) [\[AoC\]](http://adventofcode.com/2018/day/15) |
|   16    | Chronal Classification                        | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day16/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day16.kt) [\[AoC\]](http://adventofcode.com/2018/day/16) |
|   17    | Reservoir Research                            | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day17/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day17.kt) [\[AoC\]](http://adventofcode.com/2018/day/17) |
|   18    | Settlers of The North Pole                    | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day18/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day18.kt) [\[AoC\]](http://adventofcode.com/2018/day/18) |
|   19    | Go With The Flow                              | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day19/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day19.kt) [\[AoC\]](http://adventofcode.com/2018/day/19) |
|   20    | A Regular Map                                 | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day20/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day20.kt) [\[AoC\]](http://adventofcode.com/2018/day/20) |
|   21    | Chronal Conversion                            | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day21/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day21.kt) [\[AoC\]](http://adventofcode.com/2018/day/21) |
|   22    | Mode Maze                                     | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day22/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day22.kt) [\[AoC\]](http://adventofcode.com/2018/day/22) |
|   23    | Experimental Emergency Teleportation          | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day23/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day23.kt) [\[AoC\]](http://adventofcode.com/2018/day/23) |
|   24    | Immune System Simulator 20XX                  | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day24/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day24.kt) [\[AoC\]](http://adventofcode.com/2018/day/24) |
|   25    | Four-Dimensional Adventure                    | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2018/day25/) [\[Code\]](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day25.kt) [\[AoC\]](http://adventofcode.com/2018/day/25) |


Copyright &copy; 2018 by Todd Ginsberg.
",tginsberg/advent-2018-kotlin
45,lynn,Rust,"{'Rust': 10748, 'Idris': 10316, 'Prolog': 8283, 'COBOL': 4782, 'Go': 3915, 'C': 3457, 'F#': 3164, 'EmberScript': 3018, 'Ruby': 2411, 'Kotlin': 2317, 'Haskell': 1524, 'Befunge': 1271, 'J': 808, 'APL': 521, 'Python': 445, 'Perl': 335}",,lynn/aoc-2018
46,sim642,Scala,{'Scala': 438518},"# Advent of Code solutions in Scala

[![Scala CI](https://github.com/sim642/adventofcode/workflows/Scala%20CI/badge.svg?branch=master)](https://github.com/sim642/adventofcode/actions?query=workflow%3A%22Scala+CI%22)

| Year | Solutions | Inputs | Tests |
| ---- | --------- | ------ | ----- |
| 2015 | [Solutions](src/main/scala/eu/sim642/adventofcode2015) | [My inputs](src/main/resources/eu/sim642/adventofcode2015) | [Tests](src/test/scala/eu/sim642/adventofcode2015) |
| 2016 | [Solutions](src/main/scala/eu/sim642/adventofcode2016) | [My inputs](src/main/resources/eu/sim642/adventofcode2016) | [Tests](src/test/scala/eu/sim642/adventofcode2016) |
| 2017 | [Solutions](src/main/scala/eu/sim642/adventofcode2017) | [My inputs](src/main/resources/eu/sim642/adventofcode2017) | [Tests](src/test/scala/eu/sim642/adventofcode2017) |
| 2018 | [Solutions](src/main/scala/eu/sim642/adventofcode2018) | [My inputs](src/main/resources/eu/sim642/adventofcode2018), [other inputs](src/test/resources/eu/sim642/adventofcode2018) | [Tests](src/test/scala/eu/sim642/adventofcode2018) |
| 2019 | [Solutions](src/main/scala/eu/sim642/adventofcode2019) | [My inputs](src/main/resources/eu/sim642/adventofcode2019) | [Tests](src/test/scala/eu/sim642/adventofcode2019) |
",sim642/adventofcode
47,mariotacke,JavaScript,{'JavaScript': 37879},"# Advent of Code 2019 - My Solutions
[![Build Status](https://github.com/mariotacke/advent-of-code-2019/workflows/build/badge.svg)](https://github.com/mariotacke/advent-of-code-2019/actions)
[![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2019/master/.github/badges/completion.json)](https://github.com/mariotacke/advent-of-code-2019)
[![Dependency Status](https://img.shields.io/david/mariotacke/advent-of-code-2019.svg)](https://david-dm.org/mariotacke/advent-of-code-2019)
[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/mariotacke/advent-of-code-2019/master/LICENSE)

Santa has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from **fifty stars**.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants **one star**. Good luck!

## Days

- [Day 1: The Tyranny of the Rocket Equation](day-01-the-tyranny-of-the-rocket-equation/)
- [Day 2: 1202 Program Alarm](day-02-1202-program-alarm/)
- [Day 3: Crossed Wires](day-03-crossed-wires/)
- [Day 4: Secure Container](day-04-secure-container/)
- [Day 5: Sunny with a Chance of Asteroids](day-05-sunny-with-a-chance-of-asteroids/)
- [Day 6: Universal Orbit Map](day-06-universal-orbit-map/)
- [Day 7: Amplification Circuit](day-07-amplification-circuit/)
- [Day 8: Space Image Format](day-08-space-image-format/)
- [Day 9: Sensor Boost](day-09-sensor-boost/)
- [Day 10: Monitoring Station](day-10-monitoring-station/)

## Running Tests

Each day contains its own set of tests. To run them type `npm test`.

## Previous Years
- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2018/master/.github/badges/completion.json&label=2018)](https://github.com/mariotacke/advent-of-code-2018)
- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2017/master/.github/badges/completion.json&label=2017)](https://github.com/mariotacke/advent-of-code-2017)
- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2016/master/.github/badges/completion.json&label=2016)](https://github.com/mariotacke/advent-of-code-2016)
- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2015/master/.github/badges/completion.json&label=2015)](https://github.com/mariotacke/advent-of-code-2015)

## Visit
- http://adventofcode.com/2019
",mariotacke/advent-of-code-2019
48,zero-to-mastery,,{},"# Coding Challenge 12 - Advent of Code 2018

This month we are doing a special coding challenge! December is the best time of the year to be a programmer since the [Advent of Code](https://adventofcode.com/) begins! Every day, we are going to have a programming problem that we all need to solve for 25 days straight. The beauty will be that you will be able to see your solution and compare it with all the other students from our community! **When it comes to problem solving, in my opinion, Advent of Code is the best resource avilable to make you a better logical thinker through code. I cannot recommend it enough if you want to become a better coder so I hope you can all participate even if it is just a few days**. 

## What is the Challenge?
Each day Advent of Code will give you a problem to solve. Each day, the questions get harder and harder. All you will need to do is to submit your code anytime you finish the question (Please note: Although each day is a new question, you can submit your code anytime and even do the questions a few days late if you miss the actual day)

### Here are the steps:
1. Read the about section here: https://adventofcode.com/2018/about
2. Watch **Santa's Node Helper** videos - Lecture 240, 241 and 242 in the Complete Web Developer in 2019 course to see me solve one of these problems. *this is optional for those that have the course*
3. Start solving problems starting December 1st, 2018!
4. Submit your code and share it with the rest of our community every day by following the steps below. All community code will be on a website built by @Matt and @notAnkur - https://zerotomastery.io/events/advent-of-code.html (note: You will see test entries before the challenge begins Dec 1st in order to show you how it will work. These dummy entries will be removed come the beginning of the challenge)

## How to submit and view Solutions:
Thanks to @Matt and @notAnkur, we have a great system in place for you to submit your daily code, and compare your answer to the rest of the students who will participate in the challenge. Here is how it will work and how you can see other submissions:

### Submit your solution
1. Add your solution to a platform such as Github, Repl.it, Glot.io and grab the link for it.
2. Head on over to #coding-challenge
3. Use the following command structure to infrom the bot of your solution (See examples):
 ```+aoc submit <Day> <URL-Link> <Solution Language>```
4. If successful you should have a parrot emoji and your solution will be list in #submissions and on the website: https://zerotomastery.io/events/advent-of-code.html

![Channel Listing](https://cdn.discordapp.com/attachments/486857368249040906/518019412838842368/unknown.png)

#### Examples
```+aoc submit 1 https://mylink.com/ javascript```

```+aoc submit 4 https://github.com/test/link python```

```+aoc submit 24 https://tests.com/ssj py```

```+aoc submit 4 https://mttadddadasejs.com/sssj js```

```+aoc submit 4 https://mttejs.net/ssj java```

### View Solutions
Solutions will obviously be listed in the #submissions channel on Discord, but we also have a web interface available, with sorting and filtering capabilities [here](https://zerotomastery.io/events/advent-of-code.html). 


## Disclaimer
**Please note: As with all my challenges there is zero benefit or monetary gain I receive from it. This is just my way of thanking my students and making sure that you are able to continue gaining valuable knowledge outside of just my videos. It would mean a lot to me if you are able to rate my course...5 star reviews make my day :)**
",zero-to-mastery/coding_challenge-12
49,cls1991,Python,{'Python': 9869},"# advent-of-code
Solutions for http://adventofcode.com, just for fun!
",cls1991/advent-of-code
50,poteto,Rust,{'Rust': 3434},"# 2018

[![Build Status](https://travis-ci.org/poteto/advent-of-code-2018.svg?branch=master)](https://travis-ci.org/poteto/advent-of-code-2018)

Learning Rust from scratch! Pull requests are welcome. Because I'm learning, please feel free to correct style mistakes, share idiomatic patterns, etc.

I'm pretty behind due to busy work schedules. Please don't spoil anything for me!

Thanks!

## Running

```
cargo run -p <day-xx> --release
```

## Tests

```
cargo test
```
",poteto/advent-of-code-2018
51,glguy,Haskell,{'Haskell': 48451},"# Advent of Code 2019

These are my Advent of Code 2019 solutions. I try to focus on making clean and documented Haskell solutions to each puzzle.

We'll be chatting about AoC on IRC all December. You can find AoC discussion on [freenode](https://freenode.net)'s `##adventofcode` and `#haskell` ([webchat](https://webchat.freenode.net/#haskell,##adventofcode))

## Building

I recommend installing `ghc` with `ghcup`.

```
$ curl https://get-ghcup.haskell.org -sSf | sh
```

I'm using `GHC 8.8.1` this year

```
$ ghcup install 8.8.1
$ ghcup set     8.8.1
```

`cabal-install-3` is the best way to get things built

```
$ cabal update
$ cabal build
```

## Running solutions

All the solutions take an optional command line argument that can be an input file name or `-` to read the input from `stdin`.

```
$ cabal run Day01
...
3188480
4779847
```

## Intcode Interpreter

A few of my solutions rely on a common Intcode interpreter: [Intcode.hs](https://github.com/glguy/advent2019/blob/master/common/Advent/Intcode.hs)

## Common libraries used

* **containers** - Almost all of the solutions will benefit from having access to `Map` and `Set` types from this package.
* **megaparsec** - Each problem features a simple text-file format input. Parser combinators make it easy to define the simple parser needed to consume these inputs.
* **doctest** - Having checked examples in the documentation makes it easier to understand what code does and easy to add unit tests.
",glguy/advent2019
52,benediktwerner,Python,{'Python': 125136},"Advent of Code
===================
My solutions for [Advent of Code](http://adventofcode.com) written in Python 3
",benediktwerner/AdventOfCode
53,jayfoad,APL,{'APL': 10802},"# aoc2018apl
Advent of Code 2018 solutions in Dyalog APL

Tested on Linux with `dyalog -script < pN.dyalog`. Some solutions require Dyalog APL version 17.0 or later.

See also: my [solutions for 2017](https://github.com/jayfoad/aoc2017apl).
",jayfoad/aoc2018apl
54,Janiczek,Elm,"{'Elm': 1335527, 'HTML': 152276, 'Clojure': 2742, 'Python': 1623, 'Shell': 1472, 'JavaScript': 414}","
# Advent of Code

## Progress

| Day | 2015                                     | 2016               | 2017                                     | 2018                                     |
| --- | ---------------------------------------- | ------------------ | ---------------------------------------- | ---------------------------------------- |
| 1   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 2   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 3   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 4   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 5   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 6   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 7   | :heavy_check_mark:                       | :heavy_check_mark: | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 8   | :heavy_check_mark:                       |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 9   | :heavy_check_mark:                       |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 10  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 11  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 12  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 13  |                                          |                    | :heavy_check_mark:                       | :heavy_check_mark:                       |
| 14  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       | :heavy_check_mark::question:<sup>3</sup> |
| 15  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |
| 16  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |
| 17  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |
| 18  | :heavy_check_mark:                       |                    | :heavy_check_mark:                       |                                          |
| 19  | :heavy_check_mark::question:<sup>1</sup> |                    | :heavy_check_mark:                       |                                          |
| 20  |                                          |                    | :heavy_check_mark:                       |                                          |
| 21  |                                          |                    | :heavy_check_mark:                       |                                          |
| 22  |                                          |                    | :heavy_check_mark:                       |                                          |
| 23  |                                          |                    | :heavy_check_mark::question:<sup>2</sup> |                                          |
| 24  |                                          |                    | :heavy_check_mark:                       |                                          |
| 25  |                                          |                    | :heavy_check_mark:                       |                                          |

* <sup>1</sup>: Done efficiently in Clojure thanks to the library `instaparse`. Done not-so-efficiently in Elm, and exceeds heap memory limit.
* <sup>2</sup>: Elm was mainly used for exploring the problem. After an insight was obtained, the real solution was written in Python.
* <sup>3</sup>: Couldn't get Elm code to do part 2 fast. Did it in Python ¯\_(ツ)_/¯

--------

```
$ ./start.sh 2018 01     # makes a new Elm module, copies the puzzle input into it, opens vim and watcher in two tmux panes
```

May the error messages lead you towards the right dependencies :smirk:
",Janiczek/advent-of-code
55,Dementophobia,Python,{'Python': 46924},"# Advent of Code 2019
My [Advent of Code](https://adventofcode.com/2019) (Season 2019) solutions written in Python 3.8. I will highlight some of the interesting Python mechanisms I am using on Twitter, so feel free to [follow me](https://twitter.com/Dementophobia).

| Puzzle                                         | Solution                                                     | Tips & Tricks                                                |
| ---------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| [Day 1](https://adventofcode.com/2019/day/1)   | [Part 1](./2019_01_p1.py) and [Part 2](./2019_01_p2.py)      | [Assignment Expressions](https://twitter.com/Dementophobia/status/1201027632349040640) |
| [Day 2](https://adventofcode.com/2019/day/2)   | [Part 1](./2019_02_p1.py) and [Part 2](./2019_02_p2.py)      | [Slicing Notation](https://twitter.com/Dementophobia/status/1201382006774468608) |
| [Day 3](https://adventofcode.com/2019/day/3)   | [Part 1](./2019_03_p1.py) and [Part 2](./2019_03_p2.py)      | [List Comprehension](https://twitter.com/Dementophobia/status/1201749348083781632) |
| [Day 4](https://adventofcode.com/2019/day/4)   | [Part 1](./2019_04_p1.py) and [Part 2](./2019_04_p2.py)      | [Short Circuiting](https://twitter.com/Dementophobia/status/1202108904429309952) |
| [Day 5](https://adventofcode.com/2019/day/5)   | [Part 1](./2019_05_p1.py) and [Part 2](./2019_05_p2.py)      | [Zero Padding with F-Strings](https://twitter.com/Dementophobia/status/1202487898194546689) |
| [Day 6](https://adventofcode.com/2019/day/6)   | [Part 1](./2019_06_p1.py) and [Part 2](./2019_06_p2.py)      | [Intersection of Sets](https://twitter.com/Dementophobia/status/1202848979328876546) |
| [Day 7](https://adventofcode.com/2019/day/7)   | [Part 1](./2019_07_p1.py) and [Part 2](./2019_07_p2.py)      | [Permutations from Itertools](https://twitter.com/Dementophobia/status/1203214917697970178) |
| [Day 8](https://adventofcode.com/2019/day/8)   | [Part 1](./2019_08_p1.py) and [Part 2](./2019_08_p2.py) <br />Bonus: [Animated Solution](./extras/README.md#day-8---animation-using-python-and-gimp) | [Avoiding Line Breaks with Print](https://twitter.com/Dementophobia/status/1203560697940119553) |
| [Day 9](https://adventofcode.com/2019/day/9)   | [Part 1](./2019_09_p1.py) and [Part 2](./2019_09_p2.py)      | [Defaultdict from Collections](https://twitter.com/Dementophobia/status/1203932274280022017) |
| [Day 10](https://adventofcode.com/2019/day/10) | [Part 1](./2019_10_p1.py) and [Part 2](./2019_10_p2.py)      | [Sorting with Function as Key](https://twitter.com/Dementophobia/status/1204468347917783042) |
| [Day 11](https://adventofcode.com/2019/day/11) | [Part 1](./2019_11_p1.py) and [Part 2](./2019_11_p2.py) <br />Bonus: [Animated Solution](./extras/README.md#day-11---another-animation-using-python-and-gimp) | [Using Modulo for Turning](https://twitter.com/Dementophobia/status/1204657448361086976) |
| [Day 12](https://adventofcode.com/2019/day/12) |                                                              |                                                              |
| [Day 13](https://adventofcode.com/2019/day/13) |                                                              |                                                              |
| [Day 14](https://adventofcode.com/2019/day/14) |                                                              |                                                              |
| [Day 15](https://adventofcode.com/2019/day/15) |                                                              |                                                              |
| [Day 16](https://adventofcode.com/2019/day/16) |                                                              |                                                              |
| [Day 17](https://adventofcode.com/2019/day/17) |                                                              |                                                              |
| [Day 18](https://adventofcode.com/2019/day/18) |                                                              |                                                              |
| [Day 19](https://adventofcode.com/2019/day/19) |                                                              |                                                              |
| [Day 20](https://adventofcode.com/2019/day/20) |                                                              |                                                              |
| [Day 21](https://adventofcode.com/2019/day/21) |                                                              |                                                              |
| [Day 22](https://adventofcode.com/2019/day/22) |                                                              |                                                              |
| [Day 23](https://adventofcode.com/2019/day/23) |                                                              |                                                              |
| [Day 24](https://adventofcode.com/2019/day/24) |                                                              |                                                              |
| [Day 25](https://adventofcode.com/2019/day/25) |                                                              |                                                              |

",Dementophobia/advent-of-code-2019
56,joelgrus,Python,{'Python': 61087},"# advent2018
solutions for advent of code 2018

twitter: [@joelgrus](https://twitter.com/joelgrus)

youtube: https://youtube.com/joelgrus

patreon: https://www.patreon.com/joelgrus
",joelgrus/advent2018
57,Lokeh,OCaml,"{'OCaml': 103096, 'JavaScript': 101532}","# Advent of Code, 2017

I'll be updating this repository with each day's solution in ReasonML.
It's built using BuckleScript; check out the [ReasonML quick start guide](https://reasonml.github.io/guide/javascript/quickstart) for installing the tool chain if you want to build changes to the project.

Solution source files are in `src/*.re`. Common utilities and data structures are found in `src/utils/*.re`.

If you want to just try out the solutions, you can build the project (`yarn build`) and run them with the command:
```
yarn solve day4 part1 ""my test input""
```

Or, by starting up a node REPL:
```
~/Code/advent-2017 $ node
> let day4 = require('./src/dayFour.bs')
undefined
> day4.part1('my test input')
```

Tests are located in the `src/tests` directory; they are automatically generated using the `Solution` functor and are based on the `cases` binding found in each solution module. The tests run automatically on compiling.

# Editor
If you use `vscode`, Press `Windows + Shift + B` it will build automatically
",Lokeh/advent-2017
58,IdrisTheDragon,Go,{'Go': 80045},"# Advent of Code 2018

My Golang solutions for the advent of code 2018.
I am learning go as I go.
So it's not perfect by any means.

https://adventofcode.com/2018

Let's save Christmas!

## Installation & Excecution

get the code like this:

`go get github.com/IdrisTheDragon/AdventOfCode2018`

navigate to the directory of the day/Part you wish to run

`go run main.go`

## utils package

You can import the utils and use the functions in your own go files

`import ""github.com/IdrisTheDragon/AdventOfCode2018/utils""`

## Authors

- Nathan Williams
",IdrisTheDragon/AdventOfCode2018
59,jcazevedo,Java,"{'Java': 8099, 'Pony': 6049, 'Scala': 4986, 'TypeScript': 4941, 'Perl': 4466, 'Swift': 4133, 'Kotlin': 4083, 'Go': 3592, 'Lua': 3414, 'Erlang': 2908, 'PHP': 2776, 'Rust': 2770, 'OCaml': 2321, 'Objective-C': 2309, 'Ruby': 2289, 'Prolog': 2238, 'Clojure': 2123, 'Elixir': 1981, 'Shell': 1800, 'Dart': 1697, 'Haskell': 1689, 'Nim': 1567, 'Idris': 1359, 'R': 1149, 'Python': 762, 'C++': 742}","# Advent of Code 2018

This repository contains my solutions to [Advent of Code
2018][advent-of-code-2018]. [After][2015] [three][2016] [years][2017] solving
the problems exclusively in Scala, I decided to solve each day of 2018 in a
different programming language.

## Rules

Some ""rules"" I set up for myself before starting solving the problems:

- The languages to be used in each day are the following, in order: Idris,
  Prolog, Lua, Rust, C++, Ruby, Octave, Python, Erlang, R, OCaml, Dart, PHP,
  Elixir, Pony, Scala, Swift, Haskell, Go, Nim, Kotlin, TypeScript, Perl, Java
  and Clojure.
- The solutions should read the input from a predefined file (named
  `<day>.input`) and write the solution to the standard output.
- The solutions should take less than a minute to output the correct answer on
  my machine.
- Dependencies should be limited to each language's standard library.

## Problems

- **Day 1: Chronal Calibration** (*Idris*): [problem statement](https://adventofcode.com/2018/day/1) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day01-idris/day01.idr)
- **Day 2: Inventory Management System** (*Prolog*): [problem statement](https://adventofcode.com/2018/day/2) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day02-prolog/day02.pl)
- **Day 3: No Matter How You Slice It** (*Lua*): [problem statement](https://adventofcode.com/2018/day/3) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day03-lua/day03.lua)
- **Day 4: Repose Record** (*Rust*): [problem statement](https://adventofcode.com/2018/day/4) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day04-rust/day04.rs)
- **Day 5: Alchemical Reduction** (*C++*): [problem statement](https://adventofcode.com/2018/day/5) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day05-c++/day05.cpp)
- **Day 6: Chronal Coordinates** (*Ruby*): [problem statement](https://adventofcode.com/2018/day/6) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day06-ruby/day06.rb)
- **Day 7: The Sum of Its Parts** (*Octave*): [problem statement](https://adventofcode.com/2018/day/7) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day07-octave/day07.m)
- **Day 8: Memory Maneuver** (*Python*): [problem statement](https://adventofcode.com/2018/day/8) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day08-python/day08.py)
- **Day 9: Marble Mania** (*Erlang*): [problem statement](https://adventofcode.com/2018/day/9) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day09-erlang/day09.erl)
- **Day 10: The Stars Align** (*R*): [problem statement](https://adventofcode.com/2018/day/10) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day10-r/day10.R)
- **Day 11: Chronal Charge** (*OCaml*): [problem statement](https://adventofcode.com/2018/day/11) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day11-ocaml/day11.ml)
- **Day 12: Subterranean Sustainability** (*Dart*): [problem statement](https://adventofcode.com/2018/day/12) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day12-dart/day12.dart)
- **Day 13: Mine Cart Madness** (*PHP*): [problem statement](https://adventofcode.com/2018/day/13) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day13-php/day13.php)
- **Day 14: Chocolate Charts** (*Elixir*): [problem statement](https://adventofcode.com/2018/day/14) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day14-elixir/day14.exs)
- **Day 15: Beverage Bandits** (*Pony*): [problem statement](https://adventofcode.com/2018/day/15) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day15-pony/day15.pony)
- **Day 16: Chronal Classification** (*Scala*): [problem statement](https://adventofcode.com/2018/day/16) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day16-scala/day16.scala)
- **Day 17: Reservoir Research** (*Swift*): [problem statement](https://adventofcode.com/2018/day/17) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day17-swift/day17.swift)
- **Day 18: Settlers of The North Pole** (*Haskell*): [problem statement](https://adventofcode.com/2018/day/18) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day18-haskell/day18.hs)
- **Day 19: Go With The Flow** (*Go*): [problem statement](https://adventofcode.com/2018/day/19) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day19-go/day19.go)
- **Day 20: A Regular Map** (*Nim*): [problem statement](https://adventofcode.com/2018/day/20) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day20-nim/day20.nim)
- **Day 21: Chronal Conversion** (*Kotlin*): [problem statement](https://adventofcode.com/2018/day/21) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day21-kotlin/day21.kt)
- **Day 22: Mode Maze** (*TypeScript*): [problem statement](https://adventofcode.com/2018/day/22) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day22-typescript/day22.ts)
- **Day 23: Experimental Emergency Teleportation** (*Perl*): [problem statement](https://adventofcode.com/2018/day/23) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day23-perl/day23.pl)
- **Day 24: Immune System Simulator 20XX** (*Java*): [problem statement](https://adventofcode.com/2018/day/24) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day24-java/day24.java)
- **Day 25: Four-Dimensional Adventure** (*Clojure*): [problem statement](https://adventofcode.com/2018/day/25) / [solution](https://github.com/jcazevedo/advent-of-code-2018/tree/master/day25-clojure/day25.clj)

## Running

You can run a solution by typing the following, replacing `<X>` with the day of
the desired problem:

```
$ ./run.sh <X>
```

You might need to install some dependencies. It should be easy to guess which
ones by looking at the
[`run.sh`](https://github.com/jcazevedo/advent-of-code-2018/blob/master/run.sh)
script.

[advent-of-code-2018]: https://adventofcode.com/2018
[2015]: https://github.com/jcazevedo/advent-of-code-2015
[2016]: https://github.com/jcazevedo/advent-of-code-2016
[2017]: https://github.com/jcazevedo/advent-of-code-2017
",jcazevedo/advent-of-code-2018
60,Voltara,C,"{'C': 59439, 'CMake': 586}","# advent2017-fast

[Advent of Code 2017](http://adventofcode.com/2017/) optimized C solutions.  The AoC creator issued a [challenge](https://www.reddit.com/r/adventofcode/comments/7m9mg8/all_years_all_days_solve_them_within_the_time/) to solve each of the puzzles within 250 ms.  I decided to take that a step further and do the whole month within that limit, and managed to get it down to 195 ms.

Here are the timings from an example run on a 4.20 GHz i7-7700K CPU.  The total is greater than the sum of the individual days because of rounding.

    Day  1       28 μs
    Day  2       15 μs
    Day  3        1 μs
    Day  4       63 μs
    Day  5   36,131 μs
    Day  6       82 μs
    Day  7      117 μs
    Day  8       60 μs
    Day  9       66 μs
    Day 10       87 μs
    Day 11       55 μs
    Day 12      100 μs
    Day 13        3 μs
    Day 14    4,574 μs
    Day 15  119,350 μs
    Day 16      127 μs
    Day 17      122 μs
    Day 18      206 μs
    Day 19       21 μs
    Day 20      798 μs
    Day 21       17 μs
    Day 22   28,369 μs
    Day 23      231 μs
    Day 24    3,241 μs
    Day 25    1,270 μs
    ------------------
    Total   195,145 μs

The input parsing is ugly not because of optimization, but rather as a result of continuing my self-imposed challenge during December to avoid using any Perl modules (or in the case of my C implementation, library functions.)  I later did away with that restriction because it was obscuring the intent of my code too much, but I never did bother going back to rewrite the input parsing.

In some of the solutions (especially where the naive solution is already blindingly fast) I decide to get a little silly.  So when you see that [SIMD](https://en.wikipedia.org/wiki/SIMD) [bitonic sort network](https://en.wikipedia.org/wiki/Bitonic_sorter) in Day 4, I did it because I thought it was interesting, not because it was particularly fast.
",Voltara/advent2017-fast
61,tginsberg,Kotlin,{'Kotlin': 86778},"## Advent of Code 2017 Solutions in Kotlin

[![license](https://img.shields.io/github/license/mashape/apistatus.svg)]()

This repo is my personal attempt at solving the [Advent of Code 2017](http://adventofcode.com/2017) set of problems with the Kotlin programming language.

I am trying to solve these on the day they are posted with clear, idiomatic solutions. That means in some cases I will sacrifice performance for a more clear solution.

I am also trying to write about each solution [on my blog](https://todd.ginsberg.com/). See the index below for a link to each post.
### Index

|   Day   | Title                                         |  Links                                       |
| --------|-----------------------------------------------|--------------------------------------------- |
|    1    | Inverse Captcha                               | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day1/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day01.kt) [\[AoC\]](http://adventofcode.com/2017/day/1) |
|    2    | Corruption Checksum                           | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day2/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day02.kt) [\[AoC\]](http://adventofcode.com/2017/day/2) |
|    3    | Spiral Memory                                 | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day3/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day03.kt) [\[AoC\]](http://adventofcode.com/2017/day/3) |
|    4    | High-Entropy Passphrases                      | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day4/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day04.kt) [\[AoC\]](http://adventofcode.com/2017/day/4) |
|    5    | A Maze of Twisty Trampolines, All Alike       | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day5/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day05.kt) [\[AoC\]](http://adventofcode.com/2017/day/5) |
|    6    | Memory Reallocation                           | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day6/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day06.kt) [\[AoC\]](http://adventofcode.com/2017/day/6) |
|    7    | Recursive Circus                              | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day7/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day07.kt) [\[AoC\]](http://adventofcode.com/2017/day/7) |
|    8    | I Heard You Like Registers                    | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day8/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day08.kt) [\[AoC\]](http://adventofcode.com/2017/day/8) |
|    9    | Stream Processing                             | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day9/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day09.kt) [\[AoC\]](http://adventofcode.com/2017/day/9) |
|   10    | Knot Hash                                     | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day10/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day10.kt) [\[AoC\]](http://adventofcode.com/2017/day/10) |
|   11    | Hex Ed                                        | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day11/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day11.kt) [\[AoC\]](http://adventofcode.com/2017/day/11) |
|   12    | Digital Plumber                               | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day12/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day12.kt) [\[AoC\]](http://adventofcode.com/2017/day/12) |
|   13    | Packet Scanners                               | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day13/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day13.kt) [\[AoC\]](http://adventofcode.com/2017/day/13) |
|   14    | Disk Defragmentation                          | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day14/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day14.kt) [\[AoC\]](http://adventofcode.com/2017/day/14) |
|   15    | Dueling Generators                            | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day15/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day15.kt) [\[AoC\]](http://adventofcode.com/2017/day/15) |
|   16    | Permutation Promenade                         | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day16/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day16.kt) [\[AoC\]](http://adventofcode.com/2017/day/16) |
|   17    | Spinlock                                      | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day17/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day17.kt) [\[AoC\]](http://adventofcode.com/2017/day/17) |
|   18    | Duet                                          | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day18/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day18.kt) [\[AoC\]](http://adventofcode.com/2017/day/18) |
|   18    | Duet - Part 2 using Coroutines                | [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day18Coroutines.kt) [\[AoC\]](http://adventofcode.com/2017/day/18) |
|   19    | A Series of Tubes                             | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day19/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day19.kt) [\[AoC\]](http://adventofcode.com/2017/day/19) |
|   20    | Particle Swarm                                | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day20/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day20.kt) [\[AoC\]](http://adventofcode.com/2017/day/20) |
|   21    | Fractal Art                                   | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day21/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day21.kt) [\[AoC\]](http://adventofcode.com/2017/day/21) |
|   22    | Sporifica Virus                               | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day22/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day22.kt) [\[AoC\]](http://adventofcode.com/2017/day/22) |
|   23    | Coprocessor Conflagration                     | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day23/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day23.kt) [\[AoC\]](http://adventofcode.com/2017/day/23) |
|   24    | Electromagnetic Moat                          | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day24/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day24.kt) [\[AoC\]](http://adventofcode.com/2017/day/24) |
|   25    | The Halting Problem                           | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2017/day25/) [\[Code\]](https://github.com/tginsberg/advent-2017-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2017/Day25.kt) [\[AoC\]](http://adventofcode.com/2017/day/25) |

Copyright &copy; 2017 by Todd Ginsberg.",tginsberg/advent-2017-kotlin
62,jeroenheijmans,JavaScript,"{'JavaScript': 61139, 'HTML': 1055, 'PowerShell': 482, 'Shell': 436}","# Advent of Code Charts

This is an [unofficial](#license-and-affiliation-disclaimer) small hacked-up set of charts for a private leaderboard for [Advent of Code](https://adventofcode.com/).
Get it as an extension:

[![browser-store-chrome.png](browser-store-chrome.png)](https://chrome.google.com/webstore/detail/advent-of-code-charts/ipbomkmbokofodhhjpipflmdplipblbe) [![browser-store-firefox.png](browser-store-firefox.png)](https://addons.mozilla.org/en-US/firefox/addon/advent-of-code-charts/)

## Disclaimers

It is *not* a well-architectured, well-written, neat, nice, fluffy, industry-strength piece of code.
Instead it's something fun I wanted to make, stepping out of my *normal* way of coding. NO WARRANTY!

## Developing

Install dependencies:

```sh
npm ci # or npm install
```

Serve a test website with the dummy data:

```sh
npm run start # runs 'serve' and 'watch' in parallel
```

And open up `http://localhost:5000`.

## Building

Run `build.ps1` or `build.sh` to re-create a `/build` folder which is a ready-to-go browser extension.
Test the extension by loading it in the browser.
For full reference, see Chrome's or Firefox's full documentation, but the basics are:

- Firefox: go to `about:debugging` and load a temporary addon (pick the `/build/manifest.json` file)
- Chrome: go to `chrome://extensions` and load unpacked extension (pick the `/build` folder)

Test by browsing to a private leaderboard and you should see charts popping up at the bottom.

## License and Affiliation Disclaimer

The code in this project is MIT licensed, with the explicit exception of `dummyData.js`.
That file contains JSON in a format thought up by the owner and creator of Advent of Code, but we suppose that using a small snippet of it like this falls under ""fair use"" (given for one that the AoC website itself suggests using the ""JSON API"" for integrations, albeit without spamming that API).

Note that ""Advent of Code"" and ""AoC"" are Eric Wastl's.
This project is not ""official"", and in no way (directly or indirectly) endorsed by- or affiliated to Advent of Code and its creator/owner.
Read more [about Advent of Code](https://adventofcode.com/2018/about) to learn about the project itself.

**Oh, and of course, please [consider donating to _Advent of Code_ itself](https://adventofcode.com/2018/support)!**

## Example

Here's what it should more or less look like:

![example-001.png](example-001.png)
",jeroenheijmans/advent-of-code-charts
63,dzikoysk,Shell,{'Shell': 116},"# Advent of Code
[Advent of Code 2019](https://adventofcode.com/) in [Panda](https://github.com/panda-lang/panda)

### Background
The aim of project is to explore the pre-alpha version of [Panda](https://github.com/panda-lang/panda) language.
Implementations of various programming puzzles should expose vulnerabilities, bugs and ill-thought-out solutions.

### Run
```bash
./run.sh <day> <user>
```

### Progress
| Day | Name | Panda | 
|:---:|:---|:---:|
| 01 | [The Tyranny of the Rocket Equation][day01] | ✓ |
| 02 | [1202 Program Alarm][day02] | ✓ |
| 03 | [Crossed Wires][day03] | ✓ |
| 04 | [Secure Container][day04] | ✓ |
| 05 | [Sunny with a Chance of Asteroids][day05] | ✓ |
| 06 | [Universal Orbit Map][day06] | ✓ |
| 07 | [Amplification Circuit][day07] | ✓ |
| 08 | [Space Image Format][day08] | ✓ |
| 09 | [Sensor Boost][day09] | ✓ |

[day01]: https://adventofcode.com/2019/day/1
[day02]: https://adventofcode.com/2019/day/2
[day03]: https://adventofcode.com/2019/day/3
[day04]: https://adventofcode.com/2019/day/4
[day05]: https://adventofcode.com/2019/day/5
[day06]: https://adventofcode.com/2019/day/6
[day07]: https://adventofcode.com/2019/day/7
[day08]: https://adventofcode.com/2019/day/8
[day09]: https://adventofcode.com/2019/day/9
[day10]: https://adventofcode.com/2019/day/10
[day11]: https://adventofcode.com/2019/day/11
[day12]: https://adventofcode.com/2019/day/12
[day13]: https://adventofcode.com/2019/day/13
[day14]: https://adventofcode.com/2019/day/14
[day15]: https://adventofcode.com/2019/day/15
[day16]: https://adventofcode.com/2019/day/16
[day17]: https://adventofcode.com/2019/day/17
[day18]: https://adventofcode.com/2019/day/18
[day19]: https://adventofcode.com/2019/day/19
[day20]: https://adventofcode.com/2019/day/20
[day21]: https://adventofcode.com/2019/day/21
[day22]: https://adventofcode.com/2019/day/22
[day23]: https://adventofcode.com/2019/day/23
[day24]: https://adventofcode.com/2019/day/24
[day25]: https://adventofcode.com/2019/day/25
",dzikoysk/advent-of-code
64,ploeh,Haskell,{'Haskell': 76990},"# Advent of Code 2017

My solutions for [Advent of Code 2017](https://adventofcode.com/2017).

Originally, I had no intention to publish these files, but [at least one person has expressed interest](https://twitter.com/michielrutting/status/936892474433216512), so why not? These code files represent a balance between finding a solution fast, but still keeping the code acceptable and interesting to myself. I do tend to polish it a bit after I've found the solution, but before I commit it, but no aggressive refactoring takes place. Some of the code may be rough around the edges.
",ploeh/advent-of-code-2017
65,xocolatl,TSQL,"{'TSQL': 52913, 'PLpgSQL': 8447}","This is my attempt to solve the [Advent Of Code 2019](http://adventofcode.com/2019)
puzzles using [PostgreSQL 12](https://www.postgresql.org/). I don't plan to use
any extensions except for what comes in contrib. I'm also going to try to avoid
using plpgsql (and certainly any other pl).

The goal is to challenge my SQL skills, and also showcase what can be done in this
language.

**Comments and improvements welcome.**

If you would like to run these yourself, save your session cookie in a file called
`session.cookie` at the top of this repository. In it, add the line
`Set-Cookie: session=1234` (where 1234 is replaced by what the site gives you after
logging in). Then run `psql -Xqf 2019/decXX.sql`.

  - <http://adventofcode.com/2019> :christmas\_tree:
  - <https://www.postgresql.org/> :elephant:
",xocolatl/advent-of-code
66,purcell,Haskell,"{'Haskell': 49032, 'Emacs Lisp': 188}","# Haskell solutions for 2016 [Advent of Code](https://adventofcode.com/)

These little solutions are optimised for tidiness rather than speed of
writing. In some cases I've code-golfed them for performance or
elegance, in the interest of learning new tools and techniques.

## Usage

With [stack](https://www.haskellstack.org/) installed:
```
stack setup
stack build
stack exec adventofcode2016 [DAYNUM]
```
where `DAYNUM` is the number of one of the days of Advent!
",purcell/adventofcode2016
67,ephemient,Haskell,{'Haskell': 90660},app/Main.lhs,ephemient/aoc2017
68,adriennetacke,JavaScript,{'JavaScript': 23065},"# advent-of-code-2018
[![Build Status](https://travis-ci.org/adriennetacke/advent-of-code-2018.svg?branch=master)](https://travis-ci.org/adriennetacke/advent-of-code-2018) [![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)

Advent of Code 2018 Solutions - Adrienne Style

## What is Advent of Code?
[Advent of Code](http://adventofcode.com) is an online event created by [Eric Wastl](https://twitter.com/ericwastl). Each year, starting on Dec 1st, an advent calendar of small programming puzzles are unlocked once a day at midnight (EST/UTC-5). Developers of all skill sets are encouraged to solve them in any programming language they choose!

## Advent of Code 2018 Story
""We've detected some temporal anomalies,"" one of Santa's Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. ""At 500-year intervals into the past, someone has been changing Santa's history!""

""The good news is that the changes won't propagate to our time stream for another 25 days, and we have a device"" - she attaches something to your wrist - ""that will let you fix the changes with no such propagation delay. It's configured to send you 500 years further into the past every few days; that was the best we could do on such short notice.""

""The bad news is that we are detecting roughly fifty anomalies throughout time; the device will indicate fixed anomalies with stars. The other bad news is that we only have one device and you're the best person for the job! Good lu--"" She taps a button on the device and you suddenly feel like you're falling. To save Christmas, you need to get all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

## Days

| Day  | Part One | Part Two | 
|---|:---:|:---:|
|✔️ [Day 1: Chronal Calibration](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-1-chronal-calibration)  | ⭐️ | ⭐️ |
|✔️ [Day 2: Inventory Management System](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-2-inventory-management-system)  | ⭐️ | ⭐️ |
|✔️ [Day 3: Inventory Management System](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-3-no-matter-how-you-slice-it)  | ⭐️ | ⭐ |
|✔️ [Day 4: Repose Record](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-4-repose-record) | ⭐ | ⭐ |
|✔️ [Day 5: Alchemical Reduction](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-5-alchemical-reduction) | ⭐ | ⭐ |
|✔️ [Day 6: Chronal Coordinates](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-6-chronal-coordinates) | ⭐ | ⭐ |
| [Day 7: The Sum of Its Parts](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-7-the-sum-of-its-parts) | ⭐ | 🕗 In progress  |
| [Day 8: Memory Maneuver ](https://github.com/adriennetacke/advent-of-code-2018/tree/master/day-8-memory-maneuver) | 🕗 In progress | 😅 Not Started  |


## Running Tests

Each day contains its own set of tests. To run them type `npm test`.

## Let's connect:
`@adrienne.tacke`

[Instagram](https://www.instagram.com/adrienne.tacke/)
| 
[Medium](https://medium.com/@adrienne.tacke)
|
[Twitter](https://twitter.com/adriennetacke)
",adriennetacke/advent-of-code-2018
69,KrzaQ,Ruby,"{'Ruby': 36826, 'C++': 19707, 'D': 10278, 'Rust': 9101, 'HTML': 4322}","[Advent of Code 2018](https://adventofcode.com) solutions by [KrzaQ][kq]
========================

I'm using various languages to provide solutions.

| Day | Name | Ruby | Rust | D | C++ |
|:---:|:---|:---:|:---:|:---:|:---:|
| 01 | [Chronal Calibration][day01] | [:heavy_check_mark:](solutions/day01/main.rb) | [:heavy_check_mark:](solutions/day01/rust/src/main.rs) | [:heavy_check_mark:](solutions/day01/main.d) |  |
| 02 | [Inventory Management System][day02] | [:heavy_check_mark:](solutions/day02/main.rb) | [:heavy_check_mark:](solutions/day02/rust/src/main.rs) | [:heavy_check_mark:](solutions/day02/dlang/source/main.d) |  |
| 03 | [No Matter How You Slice It][day03] | [:heavy_check_mark:](solutions/day03/main.rb) | [:heavy_check_mark:](solutions/day03/rust/src/main.rs) |  |  |
| 04 | [Repose Record][day04] | [:heavy_check_mark:](solutions/day04/main.rb) |  |  |  |
| 05 | [Alchemical Reduction][day05] | [:heavy_check_mark:](solutions/day05/main.rb) | [:heavy_check_mark:](solutions/day05/rust/src/main.rs) |  |  |
| 06 | [Chronal Coordinates][day06] | [:heavy_check_mark:](solutions/day06/main.rb) |  |  |  |
| 07 | [The Sum of Its Parts][day07] |  |  | [:heavy_check_mark:](solutions/day07/main.d) |  |
| 08 | [Memory Maneuver][day08] | [:heavy_check_mark:](solutions/day08/main.rb) |  |  |  |
| 09 | [Marble Mania][day09] | [:heavy_check_mark:](solutions/day09/main.rb) | [:heavy_check_mark:](solutions/day09/rust/src/main.rs) | [:heavy_check_mark:](solutions/day09/main.d) | [:heavy_check_mark:](solutions/day09/main.cpp) |
| 10 | [The Stars Align][day10] | [:heavy_check_mark:](solutions/day10/main.rb) |  |  |  |
| 11 | [Chronal Charge][day11] | [:heavy_check_mark:](solutions/day11/main.rb) |  |  |  |
| 12 | [Subterranean Sustainability][day12] | [:heavy_check_mark:](solutions/day12/main.rb) |  |  |  |
| 13 | [Mine Cart Madness][day13] | [:heavy_check_mark:](solutions/day13/main.rb) |  |  |  |
| 14 | [Chocolate Charts][day14] |  | [:heavy_check_mark:](solutions/day14/rust/src/main.rs) | [:heavy_check_mark:](solutions/day14/main.d) | [:heavy_check_mark:](solutions/day14/main.cpp) |
| 15 | [Beverage Bandits][day15] | [:heavy_check_mark:](solutions/day15/main.rb) |  |  |  |
| 16 | [Chronal Classification][day16] | [:heavy_check_mark:](solutions/day16/main.rb) |  |  |  |
| 17 | [Reservoir Research][day17] | [:heavy_check_mark:](solutions/day17/main.rb) |  |  |  |
| 18 | [Settlers of The North Pole][day18] | [:heavy_check_mark:](solutions/day18/main.rb) |  |  |  |
| 19 | [Go With The Flow][day19] | [:heavy_check_mark:](solutions/day19/main.rb) |  |  |  |
| 21 | [Chronal Conversion][day21] | [:heavy_check_mark:](solutions/day21/main.rb) |  |  | [:heavy_check_mark:](solutions/day21/machine.cpp) |
| 22 | [Mode Maze][day22] | [:heavy_check_mark:](solutions/day22/main.rb) |  | [:heavy_check_mark:](solutions/day22/main.d) |  |
| 24 | [Immune System Simulator 20XX][day24] | [:heavy_check_mark:](solutions/day24/main.rb) |  |  |  |
| 25 | [Four-Dimensional Adventure][day25] | [:heavy_check_mark:](solutions/day25/main.rb) |  |  |  |

[day01]: https://adventofcode.com/2018/day/1
[day02]: https://adventofcode.com/2018/day/2
[day03]: https://adventofcode.com/2018/day/3
[day04]: https://adventofcode.com/2018/day/4
[day05]: https://adventofcode.com/2018/day/5
[day06]: https://adventofcode.com/2018/day/6
[day07]: https://adventofcode.com/2018/day/7
[day08]: https://adventofcode.com/2018/day/8
[day09]: https://adventofcode.com/2018/day/9
[day10]: https://adventofcode.com/2018/day/10
[day11]: https://adventofcode.com/2018/day/11
[day12]: https://adventofcode.com/2018/day/12
[day13]: https://adventofcode.com/2018/day/13
[day14]: https://adventofcode.com/2018/day/14
[day15]: https://adventofcode.com/2018/day/15
[day16]: https://adventofcode.com/2018/day/16
[day17]: https://adventofcode.com/2018/day/17
[day18]: https://adventofcode.com/2018/day/18
[day19]: https://adventofcode.com/2018/day/19
[day21]: https://adventofcode.com/2018/day/21
[day22]: https://adventofcode.com/2018/day/22
[day24]: https://adventofcode.com/2018/day/24
[day25]: https://adventofcode.com/2018/day/25

[kq]: https://dev.krzaq.cc

Readme generated on 2018-12-25 06:29:11 +0100",KrzaQ/AdventOfCode2018
70,fogleman,Python,"{'Python': 9876, 'Go': 2771}",,fogleman/AdventOfCode2019
71,ephemient,Haskell,{'Haskell': 94858},app/Main.lhs,ephemient/aoc2018
72,joelgrus,Python,{'Python': 65538},"# advent2019
advent of code 2019
",joelgrus/advent2019
73,mitsuhiko,Rust,{'Rust': 22644},"# Advent of Code 2019

https://adventofcode.com/2019/
",mitsuhiko/aoc19
74,mevdschee,HTML,"{'HTML': 7328144, 'TSQL': 4442347, 'Java': 22712}","# Advent of Code Statistics

Advent of Code statistics (including scraper and scraped data files). Click these screenshots to see the code in action:

[![Scatterplot of positions with same player highlight](http://www.maurits.vdschee.nl/scatterplot/positions.png)](http://www.maurits.vdschee.nl/scatterplot/)

[![Medals list](http://www.maurits.vdschee.nl/scatterplot/medals.png?v2)](http://www.maurits.vdschee.nl/scatterplot/medals.html)

See: http://adventofcode.com
",mevdschee/aoc-stats
75,ttencate,C,"{'C': 31704, 'D': 11904, 'Assembly': 7970, 'Pascal': 7513, 'C#': 7153, 'C++': 5978, 'OCaml': 5766, 'COBOL': 5192, 'Perl': 3234, 'Fortran': 2948, 'Scheme': 2894, 'Go': 2824, 'Haxe': 2519, 'Groovy': 2222, 'Lua': 1572, 'JavaScript': 1430, 'Ruby': 1158, 'Haskell': 1089, 'Python': 963, 'Shell': 879, 'Makefile': 807, 'Scala': 557, 'R': 332}","# Polyglot Advent of Code 2016

[Advent of Code 2016](http://adventofcode.com/2016) is a programming contest,
in which a new puzzle comes online every day from 1 until 25 December. These
are my solutions to the puzzles. As an additional challenge, I solved each
day's puzzle in a different programming language.

## Languages

I used only ""mainstream"" programming languages, not esoteric or toy languages,
because this will be hard enough as is. However, I did include some older
languages in the list out of historic interest. Plus, a free (as in beer)
implementation for Linux has to exist.

Languages I could still have used, roughly in order of decreasing preference
(based both on what I know, and what might be suitable for such puzzles):

* Java
* PHP
* BASIC
* Clojure
* Elixir
* CoffeeScript
* Dart
* Nim
* REBOL
* Forth
* F#
* Kotlin
* Octave
* Erlang
* Icon
* Eiffel
* Prolog
* CUDA
* GLSL
* TCL
* Smalltalk
* Julia
* AWK
* J
* APL
* Ada
* Algol
* 6502 assembly

Used:

* C ([day 23](23_c))
* C++ ([day 24](24_cpp))
* C# ([day 17](17_cs))
* COBOL ([day 1](01_cobol))
* D ([day 11](11_d))
* Fortran 90 ([day 8](08_fortran))
* Go ([day 25](25_go))
* Groovy ([day 13](13_groovy))
* Haskell ([day 16](16_haskell))
* Haxe ([day 22](22_haxe))
* JavaScript ([day 20](20_javascript))
* Lua ([day 18](18_lua))
* OCaml ([day 12](12_ocaml))
* OpenCL ([day 14](14_opencl))
* Pascal ([day 10](10_pascal))
* Pen and paper (and a calculator) ([day 15](15_pen_and_paper))
* Perl ([day 21](21_perl))
* Python ([day 5](05_python))
* R ([day 6](06_r))
* Ruby ([day 19](19_ruby))
* Rust ([day 9](09_rust))
* Scala ([day 3](03_scala))
* Scheme ([day 2](02_scheme))
* Sh (bash and common shell utilities) ([day 4](04_bash))
* x86 assembly ([day 7](07_x86_assembly))

## Rules

* Input should be read from stdin if at all possible. Otherwise, read from a
  file named `input`.
* The input file must be read and parsed exactly as provided. No modifications
  are allowed.
",ttencate/aoc2016
76,willkill07,C++,"{'C++': 46002, 'Python': 957, 'CMake': 704, 'Shell': 122}","# Advent of Code - 2017

All implementations are written in C++, adhering to C++17 guidelines.

## Prerequisites

* clang (>= 5.0)
* libc++ (>= 5.0)
* CMake (>= 3.8)
* macOS or Linux (only two systems I've tested on)

## Compiling

* A `compile.sh` script is provided
* Just run it and it should be good to go!

## Running

* Invoke `./Advent` to execute all the days
* To run a specific day, invoke `./Advent -f <dayXX>`
* To run a specific part, invoke `./Advent -p <1,2>`
* To see more detailed help, consult `./Advent --help`

## Metrics

* Lines: Number of lines given by `wc`
* Code: `Lines` - `(# preprocessor lines)` - `(lines with no alphanumeric chars)`
* Bytes: Number of total characters
* Chars: Number of non-whitespace characters
* Time: Time in milliseconds to execute each part independently (separate runs)
* Source: link to implementation
* Headers: C++ includes used for solution

## Leaderboard Highlights:

*To be determined*

## Detailed Information

 Day | Lines | Code | Bytes | Chars | Time (ms) | Source | Headers
:---:|:-----:|:----:|:-----:|:-----:| ---------:|:------:|:-------
01|19|12|457|366|`0.2611`|[Day01.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day01.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `vector`
02|30|17|704|511|`0.2616`|[Day02.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day02.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `sstream` `vector`
03|61|43|1501|1069|`0.0631`|[Day03.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day03.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `array` `cmath` `unordered_map`
04|26|14|632|487|`2.5986`|[Day04.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day04.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `numeric` `set` `sstream`
05|24|15|548|437|`83.7925`|[Day05.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day05.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `vector`
06|20|12|593|498|`14.4240`|[Day06.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day06.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `map` `vector`
07|107|76|2580|2048|`20.6566`|[Day07.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day07.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `regex` `sstream` `vector` `unordered_map`
08|28|17|930|768|`1.7914`|[Day08.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day08.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `unordered_map`
09|30|21|657|459|`0.7433`|[Day09.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day09.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp)
10|59|38|1787|1478|`1.9382`|[Day10.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day10.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `array` `initializer_list` `iomanip` `locale` `numeric` `vector` `utility`
11|30|20|763|525|`1.2970`|[Day11.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day11.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `cctype` `cmath` `utility`
12|23|12|618|523|`24.2345`|[Day12.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day12.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `regex` [`util.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/util.hpp)
13|40|25|955|749|`25.5269`|[Day13.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day13.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `iterator` `algorithm` `type_traits` `utility` `vector` [`util.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/util.hpp)
14|42|26|1070|836|`146.6637`|[Day14.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day14.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) [`util.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/util.hpp) `algorithm` `array` `sstream` `string`
15|36|25|877|692|`563.4783`|[Day15.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day15.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `random` `regex`
16|51|32|1374|1055|`18.9237`|[Day16.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day16.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `functional` `map` `numeric` `cstdio` `vector`
17|31|22|682|481|`22.3354`|[Day17.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day17.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `iterator` `vector`
18|28|17|733|571|`56.2923`|[Day18.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day18.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) [`duet_asm.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/duet_asm.hpp) `iterator` `thread` `vector`
19|28|19|757|584|`0.9427`|[Day19.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day19.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `tuple` `utility` `vector`
20|48|32|1628|1266|`79.5694`|[Day20.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day20.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `iterator` `valarray` `vector` `utility`
21|116|73|3302|2483|`246.2430`|[Day21.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day21.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `algorithm` `initializer_list` `numeric` `unordered_map` `utility` `vector`
22|68|43|1636|1177|`829.1147`|[Day22.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day22.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `vector` `unordered_map` `utility`
23|37|29|1000|778|`4.2999`|[Day23.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day23.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `vector` [`duet_asm.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/duet_asm.hpp)
24|49|33|1229|890|`186.4934`|[Day24.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day24.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `iterator` `vector`
25|64|45|1598|1168|`391.8774`|[Day25.hpp](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Day25.hpp)|[`Solution.hpp`](https://github.com/willkill07/AdventOfCode2017/blob/master/include/Solution.hpp) `cstdio` `unordered_map`
**TOTAL**|**1095**|**718**|**28611**|**21899**|**2723.82**| |`  Solution.hpp`&nbsp;<sup>**`25`**</sup> ` vector`&nbsp;<sup>**`16`**</sup> ` algorithm`&nbsp;<sup>**`12`**</sup> ` iterator`&nbsp;<sup>**`9`**</sup> ` utility`&nbsp;<sup>**`7`**</sup> ` unordered_map`&nbsp;<sup>**`6`**</sup> ` sstream`&nbsp;<sup>**`4`**</sup> ` numeric`&nbsp;<sup>**`4`**</sup> ` regex`&nbsp;<sup>**`3`**</sup> ` array`&nbsp;<sup>**`3`**</sup> ` util.hpp`&nbsp;<sup>**`3`**</sup> ` cstdio`&nbsp;<sup>**`2`**</sup> ` map`&nbsp;<sup>**`2`**</sup> ` duet_asm.hpp`&nbsp;<sup>**`2`**</sup> ` cmath`&nbsp;<sup>**`2`**</sup> ` initializer_list`&nbsp;<sup>**`2`**</sup> ` set`&nbsp;<sup>**`1`**</sup> ` type_traits`&nbsp;<sup>**`1`**</sup> ` valarray`&nbsp;<sup>**`1`**</sup> ` iomanip`&nbsp;<sup>**`1`**</sup> ` random`&nbsp;<sup>**`1`**</sup> ` cctype`&nbsp;<sup>**`1`**</sup> ` locale`&nbsp;<sup>**`1`**</sup> ` thread`&nbsp;<sup>**`1`**</sup> ` tuple`&nbsp;<sup>**`1`**</sup> ` functional`&nbsp;<sup>**`1`**</sup> ` string`&nbsp;<sup>**`1`**</sup> ` `
",willkill07/AdventOfCode2017
77,dlew,Kotlin,{'Kotlin': 99014},"Answers for [Advent of Code](http://adventofcode.com/) 2016.

Be gentle, I admit that some answers are fairly ugly.",dlew/aoc-2016
78,krisajenkins,PureScript,{'PureScript': 167990},"# Advent of Code

My entries for AdventOfCode.com, written in PureScript.

_Disclaimer: I'm not claiming that this code is beautiful, or even
100% correct, just that it earns me those precious, precious
stars. :-D_

## Building

``` sh
npm install -g yarn
yarn
yarn run bower install
yarn run pulp test
```

## Thoughts

### 2017, Day 25

That was fun. Since it was the last one, I drew it out a bit by
writing a full parser instead of just Vimming the instruction list
into data. I made the infinite tape out of just a set of the addresses
that are 1s.

### 2017, Day 24

Forced me to think about bidirectional graph representation, which is
interesting. There's probably a better go-to data structure that I
must hunt out.

### 2017, Day 23

Another really interesting one - reverse-engineering machine
code. I've never done anything like that before. It was very
satisfying when the penny dropped about what the program actually
does.

### 2017, Day 22
Performance problems at first, but basically it's just Langton's Ant,
which I've done before.

### 2017, Day 21

Ugh! Did it, but this is my personal shame list. :-(

### 2017, Day 20

Part 1 was trivial. Part 2 took ages, but because I insisted on going
with maths rather than simulation, and I got one of the intermediate
formulea wrong, which took ages to find. I'm please I can still solve
a quadratic equation though!

### 2017, Day 19

Much easier than it looked at first!

### 2017, Day 18

Probably the most interesting challenge yet. I've solved it, but
hopefully I'll find time to circle back and actually do something
elegant. :-}

### 2017, Day 17

Phew! Editor problems and life getting in the way. Nearly didn't
finish this one. Good puzzle though.

### 2017, Day 16

Another fun one. I made a wrong assumption about how I could optimise
step 2, and that slowed me down, but ended up with a nice optimisation
that made the whole thing performant enough. :-)

### 2017, Day 15

Had to deal with integer overflow (!), but easy enough if you'll
forgive the fact that eachs solution takes 60s to run.

### 2017, Day 14

Much easier than it initially looked, thanks to Day 12.

### 2017, Day 13

Bit disappointed I could get this performant with lazy sequences, but
the sieving trick works nicely.

### 2017, Day 12

Enjoyable. I reckon I could write a simple parser blindfolded
now. This is great practice.

### 2017, Day 11

Fun. I've never looked into hexagonal coordinate systems before. :-)

### 2017, Day 10

This one was a bit of a slog. I'm going to start fearing the
Sundays. The spec could have been clearer. Lord alone knows how people
managed to solve this in less than 10 minutes. :-o

### 2017, Day 9

Fun. My parser practice is paying off. I would not like to do this
challenge without a combinator-style parser library!

Also, that's probably the easiest conversion-to-round-2 so far.

### 2017, Day 8

Probably my most elegant solution yet, just through using
Control.Fold. Also - wow - a real, decent-sized parser. :-)

### 2017, Day 7

Nice. Makes me want to sit down with a bowl of satsumas and
catamorphism tutorial.

### 2017, Day 6

This seemed like an easy one that just had a lot of legwork.

I have clearly gotten over my phobia of Data.Tuple.Nested, as I'm
using `/\` syntax everywhere now. :-)

### 2017, Day 5

Not hard, but hard to get performant. Part 2 really falls apart if
your implementation isn't quick enough.

### 2017, Day 4

Easy. I'm willfully over-using `Fold` here for the fun of it.

### 2017, Day 3

The hardest so far. I got the algorithm really quickly, but getting it
right took me ages. I'm very gad this challenge happened on a weekend.

### 2017, Day 2

Used a real parser today! Nice excuse to use Control.Fold too. I wish I'd
figured out how to solve this one in O(n) time. :-/

### 2017, Day 1

Fun. An easy start. I wish the spec had been clearer though.

### Warm Up - 2016, Day 1

I need to get familiar with PureScript parsing libraries. Arguably
using a real parser is overkill for the task, but why am I doing this
if not to learn? :-D
",krisajenkins/AdventOfCode
79,willkill07,C++,"{'C++': 49451, 'CMake': 1341, 'Shell': 66}","# Advent of Code - 2016

All implementations are written in C++, ~~strictly~~ _sort of_ adhering to C++14 guidelines.

## Prerequisites

* clang (>= 3.5)
* libc++ (>= 3.5)
* CMake (>= 3.1)
* macOS or Linux (only two systems I've tested on)

## Compiling

* A `compile.sh` script is provided
* Just run it and it should be good to go!

## Running

* Invoke `./Advent` to execute all the days
* To run a specific day, invoke `./Advent -f <dayXX>`
* To run a specific part, invoke `./Advent -p <1,2>`
* To see more detailed help, consult `./Advent --help`

## Metrics

* Lines: Number of lines given by `wc`
* Code: `Lines` - `(# preprocessor lines)` - `(lines with no alphanumeric chars)`
* Bytes: Number of total characters
* Chars: Number of non-whitespace characters
* Time: Time in milliseconds to execute each part independently (separate runs)
* Source: link to implementation
* Headers: C++ includes used for solution

## Leaderboard Highlights:

Day | Part 1 | Part 2 | Points
:--:|-------:|-------:|-------:
02  | 31     | 90     | 81
09  | 233    | 66     | 35
10  | 50     | 44     | 108
11  | 112    | 84     | 17
12  | 31     | 19     | 152
13  | 125    | 79     | 22
14  | 145    | 79     | 22
19  | 214    | 41     | 60
20  | 131    | 40     | 61
21  | 89     | 23     | 90
22  | 60     | 61     | 81
23  | 193    | 88     | 13
24  | 25     | 21     | 156
25  | 24     | 18     | 160
--  |        |        | **1058**

## Detailed Information

 Day | Lines | Code | Bytes | Chars | Time (ms) | Source | Headers
:---:|:-----:|:----:|:-----:|:-----:| ---------:|:------:|:-------
01|24|14|615|471|`0.5518`|[Day01.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day01.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `cmath` `set` `utility`
02|41|24|1228|936|`0.3735`|[Day02.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day02.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `initializer_list` `type_traits` `utility`
03|25|14|555|431|`3.8354`|[Day03.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day03.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `iterator` `vector`
04|35|26|1107|819|`5.8549`|[Day04.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day04.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `vector`
05|37|26|1145|922|`1040.5915`|[Day05.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day05.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp) `algorithm`
06|18|12|511|422|`5.9470`|[Day06.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day06.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `algorithm` `array`
07|38|26|942|714|`5.4559`|[Day07.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day07.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `cstring`
08|37|28|1567|1262|`0.5520`|[Day08.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day08.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `unordered_map` `valarray`
09|28|21|687|536|`0.3758`|[Day09.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day09.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)
10|60|45|1698|1237|`1.4471`|[Day10.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day10.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `map` `vector`
11|15|9|442|370|`0.3987`|[Day11.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day11.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `regex`
12|9|4|227|200|`0.3566`|[Day12.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day12.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`assembunny.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/assembunny.hpp)
13|34|21|1125|905|`0.6832`|[Day13.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day13.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) `array` `set`
14|79|52|1893|1441|`1192.6846`|[Day14.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day14.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp) `algorithm` `array` `mutex` `set` `vector`
15|41|26|1110|869|`0.4527`|[Day15.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day15.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `numeric` `vector`
16|45|31|1197|960|`0.5364`|[Day16.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day16.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)
17|34|21|1155|901|`38.7939`|[Day17.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day17.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp) `algorithm` `array` `list`
18|20|13|615|508|`1.4500`|[Day18.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day18.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)
19|11|6|409|346|`0.5743`|[Day19.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day19.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `cmath`
20|28|19|769|614|`2.7715`|[Day20.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day20.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `set` `utility` `vector`
21|40|31|1913|1557|`1.2612`|[Day21.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day21.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) `algorithm`
22|30|22|915|706|`3.8691`|[Day22.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day22.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) `array`
23|9|4|228|201|`0.7739`|[Day23.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day23.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`assembunny.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/assembunny.hpp)
24|73|52|2226|1611|`4.7776`|[Day24.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day24.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) `algorithm` `numeric` `vector`
25|21|13|521|426|`45.9015`|[Day25.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day25.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`assembunny.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/assembunny.hpp)
**TOTAL**|**832**|**560**|**24800**|**19365**|**2360.27**| |`  Solution.hpp`&nbsp;<sup>**`25`**</sup> ` algorithm`&nbsp;<sup>**`9`**</sup> ` vector`&nbsp;<sup>**`7`**</sup> ` array`&nbsp;<sup>**`5`**</sup> ` set`&nbsp;<sup>**`4`**</sup> ` md5.hpp`&nbsp;<sup>**`3`**</sup> ` assembunny.hpp`&nbsp;<sup>**`3`**</sup> ` io.hpp`&nbsp;<sup>**`3`**</sup> ` utility`&nbsp;<sup>**`3`**</sup> ` util.hpp`&nbsp;<sup>**`2`**</sup> ` cmath`&nbsp;<sup>**`2`**</sup> ` numeric`&nbsp;<sup>**`2`**</sup> ` regex`&nbsp;<sup>**`1`**</sup> ` cstring`&nbsp;<sup>**`1`**</sup> ` type_traits`&nbsp;<sup>**`1`**</sup> ` mutex`&nbsp;<sup>**`1`**</sup> ` valarray`&nbsp;<sup>**`1`**</sup> ` iterator`&nbsp;<sup>**`1`**</sup> ` map`&nbsp;<sup>**`1`**</sup> ` list`&nbsp;<sup>**`1`**</sup> ` unordered_map`&nbsp;<sup>**`1`**</sup> ` initializer_list`&nbsp;<sup>**`1`**</sup> ` `
",willkill07/AdventOfCode2016
80,encse,C#,{'C#': 375611},"
# Advent of Code (2015-2019)
C# solutions to the advent of code problems.
Check out http://adventofcode.com.
![](demo.gif)
## Dependencies

- This project is based on `.NET Core 3.1`. It should work on Windows, Linux and OS X.
- `AngleSharp` is used for problem download.

## Running

To run the project:

1. Install .NET Core
2. Clone the repo
3. Get help with `dotnet run`
```

Usage: dotnet run [arguments]
Supported arguments:

 [year]/[day|last|all] Solve the specified problems
 [year]                Solve the whole year
 last                  Solve the last problem
 all                   Solve everything

To start working on new problems:
login to https://adventofcode.com, then copy your session cookie, and export it in your console like this 

  export SESSION=73a37e9a72a87b550ef58c590ae48a752eab56946fb7328d35857279912acaa5b32be73bf1d92186e4b250a15d9120a0

then run the app with

 update [year]/[day]   Prepares a folder for the given day, updates the input, 
                       the readme and creates a solution template.
 update last           Same as above, but for the current day. Works in December only.  

```
",encse/adventofcode
81,tfausak,Haskell,{'Haskell': 103045},"# Advent of Code

These are my solutions to the [Advent of Code][]. There is a top-level folder
for each year. Inside each of those is a folder for each day. I write my
solutions in Haskell, and I recommend that you use [Stack][] to run them. For
example:

``` sh
$ cd 2017/1
$ stack 1.hs
1031
```

When working on solutions, I typically use [ghcid][] to get fast feedback. For
instance:

``` sh
$ cd 2017/1
$ stack --resolver lts-13.0 exec --package ghcid -- \
  ghcid --test main 1.hs
...
```

These solutions aren't meant to show best practices. They're quick and dirty.
They are probably too clever for their own good.

You can find other solutions, both in Haskell and other languages, on this list:
<https://github.com/Bogdanp/awesome-advent-of-code>.

[Advent of Code]: https://adventofcode.com
[Stack]: https://docs.haskellstack.org/en/stable/README/
[ghcid]: https://github.com/ndmitchell/ghcid
",tfausak/advent-of-code
82,afonsojramos,Go,{'Go': 21844},"# advent-of-code-2018
### 🎄 My submissions for this year's Advent of Code using Golang 🎁🎅

## **[Go Guide Me! 🏁](https://github.com/afonsojramos/advent-of-code-2018/blob/master/go-guide.md)** - small Golang guide made by me 👨‍💻 

## Advent of Code
From the [Advent Of Code](https://adventofcode.com) page:

*""Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.""*

## Why Golang
I've seen Golang being used in a lot of big projects, and since I've never programmed in Go I've decided to learn it! If you want to learn it too, I'm compiling a **[small introductory guide](https://github.com/afonsojramos/advent-of-code-2018/blob/master/go-guide.md)** for it!

## Disclaimer
These solutions may be poorly implemented since I'm still learning how to use this language, but I expect an improvement over time. Furthermore, I do not have much free time, so some solutions might seem rushed. Still, I'll try to keep it clean.
",afonsojramos/advent-of-code-2018
83,betaveros,,{},"Advent of Code Golf 2019
========================

tl;dr same setup as [last year](https://github.com/betaveros/advent-of-code-golf-2018). Let's see when I burn out.

---

This repository contains [golfed](https://en.wikipedia.org/wiki/Code_golf) solutions to [Advent of Code 2019](https://adventofcode.com/2019) in my personal golfing programming language, [Paradoc](https://github.com/betaveros/paradoc), version 0.5.

(These are not the solutions I compete on the leaderboard with; I think there are enough repos with such solutions and my solutions wouldn't be that different. I have also not been careful about preserving my code for level 1 before doing level 2 of each day.)

I could obviously cheat at golf by adding built-ins to Paradoc tailored to each challenge after seeing it, so my programs here ought to run on Paradoc version 0.5, which was pushed just before this year's Advent of Code. I will be using the results here to guide improving Paradoc in the future, though.

Note on byte count: Like a lot of the other golfing languages [seen on the Programming Puzzles & Code Golf StackExchange](https://codegolf.meta.stackexchange.com/questions/5878/what-character-encodings-may-a-submission-use/5879#5879), the byte counts here assume programs were encoded in the Paradoc code page. These programs will almost always take up more than the stated byte count as UTF-8 strings, and for the sake of easy viewability, they are UTF-8 encoded below and in the programs in this repository.

Day-Level | Bytes | Code
--- | -- | ----
1-1 |  7 | `v]3÷v«š`
1-2 | 14 | `v]{3÷«0Ã}Iv»mŠ`
2-1 | 48 | `iIgHr2:12HudHL,4/εHt(3%""Q+*""=S{)\Ht~}uPdHu};sHq`
2-2 | 66 | `iIg–Ak{•Hr1h‰‡J¨~HudHL,4/εHt(3%""Q+*""=S{)\Ht~}uPdHu};sHq19690720=}=`
3-1 | 35 | `l{"",""/µ(17:)‡{\|3%(}y\I°~}Ás}d&LwŠmŒ`
3-2 | 43 | `l{"",""/µ(17:)‡{\|3%(}y\I°~}ÁsJ›ø›m}d+›ø»f‹šmŒ`
4-1 | 15 | `iIg~M…Sm$pfÛ_-L`
4-2 | 19 | `iIg~M…Sm$pf{GLm2#}ç`
5-1 | 92 | `iIgHr{\H=b\|}—G{•)+vHt}—T{\ABD0+3T)Gzu\a~Hu4}—O0λ·H=1h‰9%[E_Š_ObÞ_Ob{1T~Ho2}{1T~G:P_&2}]=~•+}`
5-2 | 127 | `iIgHr{\H=b\|}—G{•)+vHt}—T{\ABD0+3T)Gzu\a~Hu•4+}—O{ABD0+2TGz~•3+}—J0λ·H=1h‰9%[E_Š_ObÞ_Ob{1T~5Hu•»}{1T~GP•»}{J?}{J\?}<p_ObÎ_Ob]=~}`
6-1 | 22 | `l]"")""/vÐDc–•k•z_IvLm«š`
6-2 | 31 | `l]"")""/vÐDc–""YOU SAN""W•z_Iv¨ØÛç«`
7   | -  | punted
8-1 | 17 | `l150/'0#bœ""12""#yÞ`
8-2 | 19 | `l5Ú150/™ gm',Á25/Pe`
",betaveros/advent-of-code-golf-2019
84,mbutterick,Racket,{'Racket': 1307869},"2015 edition
-

Racket solutions &amp; explanations for the [Advent of Code](http://adventofcode.com) puzzles. Written in Racket's literate-programming dialect, `scribble/lp2`.

Install from the command line:

    raco pkg install aoc-racket

Explanations will be installed automatically as part of the Scribble documentation.

[Or just read the code and explanations online, right now.](http://pkg-build.racket-lang.org/doc/aoc-racket/)

2016 & onward editions
-

Solutions in the respective annual subdirectories.
",mbutterick/aoc-racket
85,tckmn,Ruby,"{'Ruby': 10932, 'Assembly': 1949, 'C': 1587, 'Haskell': 834, 'Julia': 753, 'JavaScript': 474, 'Vim script': 216, 'Python': 206, 'Shell': 159}","|    | asm        | bash        | c        | dc         | haskell   | js        | julia     | mathematica | python    | ruby      | vim        |
| -- | ---        | ----        | -        | --         | -------   | --        | -----     | ----------- | ------    | ----      | ---        |
| 01 | [✓][01asm] |             |          | [✓][01dc]  | [✓][01hs] |           |           | [✓][01mma]  | [✓][01py] | [✓][01rb] |            |
| 02 |            |             | [✓][02c] | [1][02dc]  |           |           |           |             |           | [✓][02rb] |            |
| 03 |            |             |          |            |           |           | [✓][03jl] |             |           | [✓][03rb] |            |
| 04 |            | [✓][04bash] | [✓][04c] |            | [✓][04hs] | [✓][04js] |           | [✓][04mma]  |           | [✓][04rb] | [✓][04vim] |
| 05 |            |             |          | [✓][05dc]  |           |           |           |             |           | [✓][05rb] |            |
| 06 |            |             |          |            |           |           |           |             |           | [✓][06rb] |            |
| 07 |            |             |          |            |           |           |           |             |           | [✓][07rb] |            |
| 08 |            |             |          |            |           |           |           |             |           | [✓][08rb] |            |
| 09 |            |             |          |            |           |           |           |             |           | [✓][09rb] |            |
| 10 |            |             |          |            |           |           |           |             |           | [✓][10rb] |            |
| 11 |            |             |          |            |           |           |           |             |           | [✓][11rb] |            |

[01asm]:  https://github.com/tckmn/polyaoc-2019/tree/master/01/asm
[01dc]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/dc
[01hs]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/hs
[01mma]:  https://github.com/tckmn/polyaoc-2019/tree/master/01/mma
[01py]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/py
[01rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/01/rb
[02c]:    https://github.com/tckmn/polyaoc-2019/tree/master/02/c
[02dc]:   https://github.com/tckmn/polyaoc-2019/tree/master/02/dc
[02rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/02/rb
[03jl]:   https://github.com/tckmn/polyaoc-2019/tree/master/03/jl
[03rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/03/rb
[04bash]: https://github.com/tckmn/polyaoc-2019/tree/master/04/bash
[04c]:    https://github.com/tckmn/polyaoc-2019/tree/master/04/c
[04hs]:   https://github.com/tckmn/polyaoc-2019/tree/master/04/hs
[04js]:   https://github.com/tckmn/polyaoc-2019/tree/master/04/js
[04mma]:  https://github.com/tckmn/polyaoc-2019/tree/master/04/mma
[04rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/04/rb
[04vim]:  https://github.com/tckmn/polyaoc-2019/tree/master/04/vim
[05dc]:   https://github.com/tckmn/polyaoc-2019/tree/master/05/dc
[05rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/05/rb
[06rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/06/rb
[07rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/07/rb
[08rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/08/rb
[09rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/09/rb
[10rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/10/rb
[11rb]:   https://github.com/tckmn/polyaoc-2019/tree/master/11/rb
",tckmn/polyaoc-2019
86,borkdude,Clojure,"{'Clojure': 64838, 'Haskell': 4453}","# Advent of Code 2017

Solutions in Clojure.

## Run

Clone this repo and install [boot](http://boot-clj.com/).

Run all completed solutions:

    boot run-all

or just one day:

    boot run-day -d 1

or just one part of a day:

    boot run-day -d 1 -p 2
",borkdude/aoc2017
87,tginsberg,Kotlin,{'Kotlin': 48261},"## Advent of Code 2019 Solutions in Kotlin

[![license](https://img.shields.io/github/license/tginsberg/advent-2019-kotlin)]()

This repo is my personal attempt at solving the [Advent of Code 2019](http://adventofcode.com/2019) set of problems with the Kotlin programming language.

I am trying to solve these on the day they are posted with clear, idiomatic solutions. That means in some cases I will sacrifice performance for a more clear solution. Unlike [2017](https://github.com/tginsberg/advent-2017-kotlin) and [2018](https://github.com/tginsberg/advent-2018-kotlin), I have some travel commitments in December, so while I will endeavour to have these done day-of I can't promise it. We'll see how it goes! :)

Past years, also in Kotlin:
 * 2017 - [GitHub](https://github.com/tginsberg/advent-2017-kotlin/) and [Blog Posts](https://todd.ginsberg.com/post/advent-of-code/2017/)
 * 2018 - [GitHub](https://github.com/tginsberg/advent-2018-kotlin/) and [Blog Posts](https://todd.ginsberg.com/post/advent-of-code/2018/)


#### Daily Solution Index for 2019
|   Day   | Title                                         |  Links                                       |
| --------|-----------------------------------------------|--------------------------------------------- |
|    1    | The Tyranny of the Rocket Equation            | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day1/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day01.kt) [\[AoC\]](http://adventofcode.com/2019/day/1) |
|    2    | 1202 Program Alarm                            | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day2/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day02.kt) [\[AoC\]](http://adventofcode.com/2019/day/2) |
|    2    | 1202 Program Alarm - IntCodeComputer Version  | [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day02IntCode.kt) |
|    3    | Crossed Wires                                 | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day3/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day03.kt) [\[AoC\]](http://adventofcode.com/2019/day/3) |
|    4    | Secure Container                              | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day4/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day04.kt) [\[AoC\]](http://adventofcode.com/2019/day/4) |
|    5    | Sunny with a Chance of Asteroids              | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day5/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day05.kt) [\[AoC\]](http://adventofcode.com/2019/day/5) |
|    6    | Universal Orbit Map                           | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day6/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day06.kt) [\[AoC\]](http://adventofcode.com/2019/day/6) |
|    7    | Amplification Circuit                         | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day7/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day07.kt) [\[AoC\]](http://adventofcode.com/2019/day/7) |
|    8    | Space Image Format                            | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day8/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day08.kt) [\[AoC\]](http://adventofcode.com/2019/day/8) |
|    9    | Sensor Boost                                  | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day9/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day09.kt) [\[AoC\]](http://adventofcode.com/2019/day/9) |
|    10   | Monitoring Station                            | [\[Blog Post\]](https://todd.ginsberg.com/post/advent-of-code/2019/day10/) [\[Code\]](https://github.com/tginsberg/advent-2019-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2019/Day10.kt) [\[AoC\]](http://adventofcode.com/2019/day/10) |
      

Copyright &copy; 2019 by Todd Ginsberg.
",tginsberg/advent-2019-kotlin
88,fhinkel,JavaScript,{'JavaScript': 80195},"# Advent of Code 2018 with Node.js 10

[Advent of Code](https://adventofcode.com/2018/about) is an Advent
calendar of small programming puzzles
for a variety of skill sets and skill levels that can be
solved in any programming language you like.
[47,000 people](https://adventofcode.com/2018/stats) are playing in 2018.

Some of my solutions are live streamed and the recordings are available in this
[playlist on YouTube](https://www.youtube.com/playlist?list=PL65pp6Tpk6913swH54jCu6VWGgWUV-5tV).

How did you solve the puzzles?",fhinkel/AdventOfCode2018
89,ghaiklor,JavaScript,{'JavaScript': 96106},"# Advent of Code 2015

Solutions for Advent of Code which are written with NodeJS.

## What is Advent of Code?

Advent of Code is a series of small programming puzzles for a variety of skill levels.
They are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code.
Each puzzle calls upon different skills and has two parts that build on a theme.

## Project structure

Each solution is divided by folders and named as it is named in game.

## Running

These solutions is written with NodeJS 4 and ES6, so you need to have NodeJS 4, at least, for running these solutions.

## License

The MIT License (MIT)

Copyright (c) 2015 Eugene Obrezkov

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
",ghaiklor/advent-of-code-2015
90,sophiebits,Python,{'Python': 18604},"# Advent of Code Solutions

My solutions to [Advent of Code](https://adventofcode.com/).
",sophiebits/adventofcode
91,KrzaQ,Ruby,"{'Ruby': 25347, 'C++': 4369}","[Advent of Code 2017](https://adventofcode.com) solutions by [KrzaQ][kq]
========================

I'm using various languages to provide solutions.

| Day | Name                                           | D    | C++    | Ruby | Shakespeare |
|:---:|:-----------------------------------------------|:----:|:------:|:----:|:-----------:|
| 01  | [Inverse Captcha][day01]                       |      |        | [:heavy_check_mark:](./day01/main.rb)      |             |
| 02  | [Corruption Checksum][day02]                   |      |        | [:heavy_check_mark:](./day02/main.rb)      |             |
| 03  | [Spiral Memory][day03]                         |      |        | [:heavy_check_mark:](./day03/main.rb)      |             |
| 04  | [High-Entropy Passphrases][day04]              |      | [:heavy_check_mark:](./day04/main.cpp) | [:heavy_check_mark:](./day04/main.rb)      |             |
| 05  | [Maze of Twisty Trampolines, All Alike][day05] |      |        | [:heavy_check_mark:](./day05/main.rb)      |             |
| 06  | [Memory Reallocation][day06]                   |      |        | [:heavy_check_mark:](./day06/main.rb)      |             |
| 07  | [Recursive Circus][day07]                      |      |        | [:heavy_check_mark:](./day07/main.rb)      |             |
| 08  | [I Heard You Like Registers][day08]            |      |        | [:heavy_check_mark:](./day08/main.rb)      |             |
| 09  | [Stream Processing][day09]                     |      |        | [:heavy_check_mark:](./day09/main.rb)      |             |
| 10  | [Knot Hash][day10]                             |      |        | [:heavy_check_mark:](./day10/main.rb)      |             |
| 11  | [Hex Ed][day11]                                |      |        | [:heavy_check_mark:](./day11/main.rb)      |             |
| 12  | [Digital Plumber][day12]                       |      |        | [:heavy_check_mark:](./day12/main.rb)      |             |
| 13  | [Packet Scanners][day13]                       |      |        | [:heavy_check_mark:](./day13/main.rb)      |             |
| 14  | [Disk Defragmentation][day14]                  |      |        | [:heavy_check_mark:](./day14/main.rb)      |             |
| 15  | [Dueling Generators][day15]                    |      | [:heavy_check_mark:](./day15/main.cpp) | [:heavy_check_mark:](./day15/main.rb)      |             |
| 16  | [Permutation Promenade][day16]                 |      |        | [:heavy_check_mark:](./day16/main.rb)      |             |
| 17  | [Spinlock][day17]                              |      |        | [:heavy_check_mark:](./day17/main.rb)      |             |
| 18  | [Duet][day18]                                  |      |        | [:heavy_check_mark:](./day18/main.rb)      |             |
| 19  | [A Series of Tubes][day19]                     |      |        | [:heavy_check_mark:](./day19/main.rb)      |             |
| 20  | [Particle Swarm][day20]                        |      |        | [:heavy_check_mark:](./day20/main.rb)      |             |
| 21  | [Fractal Art][day21]                           |      |        | [:heavy_check_mark:](./day21/main.rb)      |             |
| 22  | [Sporifica Virus][day22]                       |      |        | [:heavy_check_mark:](./day22/main.rb)      |             |
| 23  | [Coprocessor Conflagration][day23]             |      |        | [:heavy_check_mark:](./day23/main.rb)      |             |
| 24  | [Electromagnetic Moat][day24]                  |      |        | [:heavy_check_mark:](./day24/main.rb)      |             |
| 25  | [The Halting Problem][day25]                   |      |        | [:heavy_check_mark:](./day25/main.rb)      |             |

[day01]: https://adventofcode.com/2017/day/1
[day02]: https://adventofcode.com/2017/day/2
[day03]: https://adventofcode.com/2017/day/3
[day04]: https://adventofcode.com/2017/day/4
[day05]: https://adventofcode.com/2017/day/5
[day06]: https://adventofcode.com/2017/day/6
[day07]: https://adventofcode.com/2017/day/7
[day08]: https://adventofcode.com/2017/day/8
[day09]: https://adventofcode.com/2017/day/9
[day10]: https://adventofcode.com/2017/day/10
[day11]: https://adventofcode.com/2017/day/11
[day12]: https://adventofcode.com/2017/day/12
[day13]: https://adventofcode.com/2017/day/13
[day14]: https://adventofcode.com/2017/day/14
[day15]: https://adventofcode.com/2017/day/15
[day16]: https://adventofcode.com/2017/day/16
[day17]: https://adventofcode.com/2017/day/17
[day18]: https://adventofcode.com/2017/day/18
[day19]: https://adventofcode.com/2017/day/19
[day20]: https://adventofcode.com/2017/day/20
[day21]: https://adventofcode.com/2017/day/21
[day22]: https://adventofcode.com/2017/day/22
[day23]: https://adventofcode.com/2017/day/23
[day24]: https://adventofcode.com/2017/day/24
[day25]: https://adventofcode.com/2017/day/25

[kq]: https://dev.krzaq.cc

",KrzaQ/AdventOfCode2017
92,willkill07,C++,"{'C++': 43215, 'CMake': 1049, 'Makefile': 174, 'Shell': 66}","# Advent of Code - 2015

All implementations are written in C++, ~~strictly~~ _sort of_ adhering to C++14 guidelines.

## Prerequisites

* clang (>= 3.5)
* libc++ (>= 3.5)
* CMake (>= 3.1)
* macOS or Linux (only two systems I've tested on)

## Compiling

* A `compile.sh` script is provided
* Just run it and it should be good to go!

## Running

* Invoke `./Advent` to execute all the days
* To run a specific day, invoke `./Advent -f <dayXX>`
* To run a specific part, invoke `./Advent -p <1,2>`
* To see more detailed help, consult `./Advent --help`

## Metrics

* Lines: Number of lines given by `wc`
* Code: `Lines` - `(# preprocessor lines)` - `(lines with no alphanumeric chars)`
* Bytes: Number of total characters
* Chars: Number of non-whitespace characters
* Time: Time in milliseconds to execute each part independently (separate runs)
* Source: link to implementation
* Headers: C++ includes used for solution
# Advent of Code - 2015

## Leaderboard Highlights:

* Day 5: Placed #60
* Day 8: Placed #14
* Day 10: Placed #64
* Day 17: Placed #68
* Day 20: Placed #33
* Day 23: Placed #83
* Day 24: Placed #62

## Detailed Information

 Day | Lines | Code | Bytes | Chars | Time (ms) | Source | Headers
:---:|:-----:|:----:|:-----:|:-----:| ---------:|:------:|:-------
01|8|5|285|219|`1.1782`|[Day01.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day01.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)
02|16|10|586|462|`6.3465`|[Day02.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day02.cpp)|`algorithm` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
03|25|15|622|479|`2.7311`|[Day03.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day03.cpp)|`map` `tuple` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
04|16|9|592|480|`310.0225`|[Day04.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day04.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`md5.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/md5.hpp)
05|45|31|1403|1053|`2.0288`|[Day05.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day05.cpp)|`array` `climits` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
06|25|17|957|723|`16.9409`|[Day06.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day06.cpp)|`array` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
07|61|42|2025|1488|`11.0841`|[Day07.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day07.cpp)|`unordered_map` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
08|18|12|546|412|`6.3003`|[Day08.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day08.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
09|38|26|1334|1051|`13.6350`|[Day09.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day09.cpp)|`limits` `set` `unordered_map` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
10|22|13|609|436|`32.3288`|[Day10.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day10.cpp)|`vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
11|35|23|916|650|`18.2054`|[Day11.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day11.cpp)|[`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
12|34|26|1029|697|`1.2039`|[Day12.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day12.cpp)|`stack` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
13|36|25|1346|1064|`14.8666`|[Day13.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day13.cpp)|`limits` `set` `unordered_map` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
14|46|30|1549|1140|`1.0479`|[Day14.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day14.cpp)|`algorithm` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
15|48|31|1682|1321|`8.2416`|[Day15.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day15.cpp)|`numeric` `valarray` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
16|32|18|1292|1047|`7.2845`|[Day16.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day16.cpp)|`functional` `unordered_map` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp)
17|26|18|908|693|`0.4104`|[Day17.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day17.cpp)|`algorithm` `array` `limits` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
18|36|23|1316|1016|`4.6127`|[Day18.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day18.cpp)|`array` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
19|28|22|1066|830|`2.1255`|[Day19.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day19.cpp)|`unordered_map` `unordered_set` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
20|16|9|523|387|`33.6636`|[Day20.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day20.cpp)|`array` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
21|28|20|1352|1012|`0.4910`|[Day21.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day21.cpp)|`array` `cmath` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
22|72|49|2257|1682|`5.3560`|[Day22.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day22.cpp)|`limits` `unordered_set` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp)
23|30|20|1314|1027|`1.2647`|[Day23.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day23.cpp)|`algorithm` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp)
24|31|19|986|767|`9.6601`|[Day24.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day24.cpp)|`algorithm` `numeric` `vector` [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp) [`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`util.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/util.hpp)
25|24|16|736|536|`0.2636`|[Day25.cpp](https://github.com/willkill07/adventofcode2016/blob/master/src/Day25.cpp)|[`io.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/io.hpp) [`Solution.hpp`](https://github.com/willkill07/adventofcode2016/blob/master/include/Solution.hpp)
**TOTAL**|**796**|**529**|**27231**|**20672**|**511.294**| |`  Solution.hpp`&nbsp;<sup>**`25`**</sup> ` io.hpp`&nbsp;<sup>**`24`**</sup> ` vector`&nbsp;<sup>**`8`**</sup> ` array`&nbsp;<sup>**`6`**</sup> ` algorithm`&nbsp;<sup>**`5`**</sup> ` unordered_map`&nbsp;<sup>**`5`**</sup> ` limits`&nbsp;<sup>**`4`**</sup> ` util.hpp`&nbsp;<sup>**`3`**</sup> ` set`&nbsp;<sup>**`2`**</sup> ` numeric`&nbsp;<sup>**`2`**</sup> ` unordered_set`&nbsp;<sup>**`2`**</sup> ` map`&nbsp;<sup>**`1`**</sup> ` stack`&nbsp;<sup>**`1`**</sup> ` tuple`&nbsp;<sup>**`1`**</sup> ` climits`&nbsp;<sup>**`1`**</sup> ` cmath`&nbsp;<sup>**`1`**</sup> ` valarray`&nbsp;<sup>**`1`**</sup> ` md5.hpp`&nbsp;<sup>**`1`**</sup> ` functional`&nbsp;<sup>**`1`**</sup> ` `
",willkill07/AdventOfCode2015
93,ferrolho,Python,"{'Python': 64874, 'Julia': 27162}","# Advent of Code

:santa: :christmas_tree: :gift:

My solutions for the Advent of Code problems.

I might write something here, eventually.
",ferrolho/advent-of-code
94,betaveros,,{},"Advent of Code Golf 2018
========================

This repository contains [golfed](https://en.wikipedia.org/wiki/Code_golf) solutions to [Advent of Code 2018](https://adventofcode.com/2018) in my personal golfing programming language, [Paradoc](https://github.com/betaveros/paradoc).

(These are not the solutions I compete on the leaderboard with; I think there are enough repos with such solutions and my solutions wouldn't be that different. I have also not been careful about preserving my code for level 1 before doing level 2 of each day.)

I could obviously cheat at golf by adding built-ins to Paradoc tailored to each challenge after seeing it, so my programs here are all meant to run on Paradoc version v0.2.15, which was pushed (way) before this year's Advent of Code. I will be using the results here to guide improving Paradoc in the future, though. The programs also may not run on future versions.

Note on byte count: Like a lot of the other golfing languages [seen on the Programming Puzzles & Code Golf StackExchange](https://codegolf.meta.stackexchange.com/questions/5878/what-character-encodings-may-a-submission-use/5879#5879), the byte counts here assume programs were encoded in the Paradoc code page. These programs will almost always take up more than the stated byte count as UTF-8 strings, and for the sake of easy viewability, they are UTF-8 encoded below and in the programs in this repository.

Day-Level | Bytes | Code
--- | -- | ----
1-1 | 3  | `v]Š`
1-2 | 14 | `v¬1k*+s:U]zÛg‹`
2-1 | 18 | `l]μ$GLmE4B#ßÂm}ÁrÞ`
2-2 | 16 | `l]²¨Ûfμ™Îf‹m}L_Æ`
3-1 | 29 | `l¬μ""\d+""El¨Im»~\u+ßd*¨}¨$G«_#`
3-2 | 42 | `l¬μ""\d+""El¨Im~\u+ßd*¨\+bm}¨$«_G½f¨›mU$JÛg‹`
4-1 | 50 | `l]$ε""\d+""El¨Im4>:LÎ+x}]μ2/(›\μ~¨}¨‡ß}¨$‹_{GL_Æ}×‹Þ`
4-2 | 45 | `l]$ε""\d+""El¨Im4>:LÎ+x}]μ2/(›\μ~¨}¨‡ß}¨$GL_Æ‹Þ`
5-1 | 17 | `l0\εXc=k¸;_X?}]L(`
5-2 | 31 | `lUa{{Ucu-}bf0\εXc=k¸;_X?}]L(}ßŒ`
6-1 | 88 | `l]μ',-WIm}.E™εŒqÆ}{…d*¨}q‡d¦\{~…*¨}dÐ+{μ;9k:EεZ±zŠ<k;_{>kX&p¸u¸u\}?};} f$G}d+$‹_G«_-¨LmÆ`
",betaveros/advent-of-code-golf-2018
95,jchristman,Python,{'Python': 38238},"# Advent Of Code - Python One-Liner Challenge

A fun way of making the Advent of Code a little more challenging and also a fun way to learn some intracacies of the python language! For an example of what is ok, see the day 1 solution. I have done several of them already, so spoilers in the individual folders!

Rules:

- Reading input into a variable from another file or with an assignment is acceptable and does not count against your total for lines.
- Your solution must take the form of 'print INSERT_CODE_HERE'
- Formatting your print with a format string is acceptable so long as you are only substituting ONE value (multiple calculations are not allowed)
- No global variables (outside of the input variable)
",jchristman/adventofcode
96,carols10cents,Rust,{'Rust': 75146},"# Advent of Code 2019

My solutions, in Rust of course. I'm doing these for fun, not for leaderboard points, so my
solutions might be posted late or not at all.

Starting on day 2, I tried to commit before doing `cargo test` or `cargo run`, and then not
squashing any commits, so that you can see all my mistakes!
",carols10cents/aoc-rs-2019
97,mariotacke,JavaScript,{'JavaScript': 74866},"# Advent of Code 2018 - My Solutions
[![Build Status](https://github.com/mariotacke/advent-of-code-2018/workflows/build/badge.svg)](https://github.com/mariotacke/advent-of-code-2018/actions)
[![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2018/master/.github/badges/completion.json)](https://github.com/mariotacke/advent-of-code-2018)
[![Dependency Status](https://img.shields.io/david/mariotacke/advent-of-code-2018.svg)](https://david-dm.org/mariotacke/advent-of-code-2018)
[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/mariotacke/advent-of-code-2018/master/LICENSE)

""We've detected some temporal anomalies,"" one of Santa's Elves at the Temporal Anomaly Research and Detection Instrument Station tells you. She sounded pretty worried when she called you down here. ""At 500-year intervals into the past, someone has been changing Santa's history!""

""The good news is that the changes won't propagate to our time stream for another 25 days, and we have a device"" - she attaches something to your wrist - ""that will let you fix the changes with no such propagation delay. It's configured to send you 500 years further into the past every few days; that was the best we could do on such short notice.""

""The bad news is that we are detecting roughly **fifty** anomalies throughout time; the device will indicate fixed anomalies with **stars**. The other bad news is that we only have one device and you're the best person for the job! Good lu--"" She taps a button on the device and you suddenly feel like you're falling. To save Christmas, you need to get all **fifty stars** by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants **one star**. Good luck!

## Days

- [Day 1: Chronal Calibration](day-01-chronal-calibration/)
- [Day 2: Inventory Management System](day-02-inventory-management-system/)
- [Day 3: No Matter How You Slice It](day-03-no-matter-how-you-slice-it/)
- [Day 4: Repose Record](day-04-repose-record/)
- [Day 5: Alchemical Reduction](day-05-alchemical-reduction/)
- [Day 6: Chronal Coordinates](day-06-chronal-coordinates/)
- [Day 7: The Sum of Its Parts](day-07-the-sum-of-its-parts/)
- [Day 8: Memory Maneuver](day-08-memory-maneuver/)
- [Day 9: Marble Mania](day-09-marble-mania/)
- [Day 10: The Stars Align](day-10-the-stars-align/)
- [Day 11: Chronal Charge](day-11-chronal-charge/)
- [Day 12: Subterranean Sustainability](day-12-subterranean-sustainability/)
- [Day 13: Mine Cart Madness](day-13-mine-cart-madness/)
- [Day 14: Chocolate Charts](day-14-chocolate-charts/)
- [Day 15: Beverage Bandits](day-15-beverage-bandits/)
- [Day 16: Chronal Classification](day-16-chronal-classification/)
- [Day 18: Settlers of The North Pole](day-18-settlers-of-the-north-pole/)

## Running Tests

Each day contains its own set of tests. To run them type `npm test`.

## Previous Years
- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2017/master/.github/badges/completion.json&label=2017)](https://github.com/mariotacke/advent-of-code-2017)
- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2016/master/.github/badges/completion.json&label=2016)](https://github.com/mariotacke/advent-of-code-2016)
- [![Completion Status](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/mariotacke/advent-of-code-2015/master/.github/badges/completion.json&label=2015)](https://github.com/mariotacke/advent-of-code-2015)

## Visit
- http://adventofcode.com/2018
",mariotacke/advent-of-code-2018
98,dmjio,Haskell,{'Haskell': 3901},"# AdventOfCode2018
https://adventofcode.com/2018
",dmjio/AdventOfCode2018
99,FlorianCassayre,Scala,{'Scala': 42155},"_My solutions to the 2018 edition of [Advent Of Code](https://adventofcode.com)._

Check out [my 2017 participation](https://github.com/FlorianCassayre/AdventOfCode-2017)!


## Problems & Solutions

* [Day 1](https://adventofcode.com/2018/day/1): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day01.scala)
* [Day 2](https://adventofcode.com/2018/day/2): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day02.scala)
* [Day 3](https://adventofcode.com/2018/day/3): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day03.scala)
* [Day 4](https://adventofcode.com/2018/day/4): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day04.scala)
* [Day 5](https://adventofcode.com/2018/day/5): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day05.scala)
* [Day 6](https://adventofcode.com/2018/day/6): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day06.scala)
* [Day 7](https://adventofcode.com/2018/day/7): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day07.scala)
* [Day 8](https://adventofcode.com/2018/day/8): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day08.scala)
* [Day 9](https://adventofcode.com/2018/day/9): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day09.scala)
* [Day 10](https://adventofcode.com/2018/day/10): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day10.scala)
* [Day 11](https://adventofcode.com/2018/day/11): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day11.scala)
* [Day 12](https://adventofcode.com/2018/day/12): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day12.scala)
* [Day 13](https://adventofcode.com/2018/day/13): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day13.scala)
* [Day 14](https://adventofcode.com/2018/day/14): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day14.scala)
* [Day 15](https://adventofcode.com/2018/day/15): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day15.scala)
* [Day 16](https://adventofcode.com/2018/day/16): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day16.scala)
* [Day 17](https://adventofcode.com/2018/day/17): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day17.scala)
* [Day 18](https://adventofcode.com/2018/day/18): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day18.scala)
* [Day 19](https://adventofcode.com/2018/day/19): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day19.scala)
* [Day 20](https://adventofcode.com/2018/day/20): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day20.scala)
* [Day 21](https://adventofcode.com/2018/day/21): [solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day21.scala)
* [Day 22](https://adventofcode.com/2018/day/22): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day22.scala)
* [Day 23](https://adventofcode.com/2018/day/23): –[](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day23.scala)
* [Day 24](https://adventofcode.com/2018/day/24): –[](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day24.scala)
* [Day 25](https://adventofcode.com/2018/day/25): –[](https://github.com/FlorianCassayre/AdventOfCode-2018/blob/master/src/main/scala/adventofcode/solutions/Day25.scala)


## Testing

You'll need Scala `2.12.7` and sbt `1.2.6`.

Start by entering the sbt shell:
```
$ sbt
```

To run a solution - for instance **day 1** - you can conveniently use the following command:
```
> day 1
```

The output will be printed to the console and stored to the corresponding file in `output/`.


## License

This repository is licensed under the MIT License, please refer to the `LICENSE` file.",FlorianCassayre/AdventOfCode-2018
100,narimiran,Nim,{'Nim': 29897},"# Advent of Code 2018

All my Advent of Code repos:

* [AoC 2015 in Nim](https://github.com/narimiran/advent_of_code_2015)
* [AoC 2016 in Python](https://github.com/narimiran/advent_of_code_2016)
* [AoC 2017 in Nim, Python, OCaml](https://github.com/narimiran/AdventOfCode2017)
* [AoC 2018 in Nim](https://github.com/narimiran/AdventOfCode2018) (this repo)
* [AoC 2019 in OCaml](https://github.com/narimiran/AdventOfCode2019)

This year, I will do it once again in [Nim](https://nim-lang.org/), and later on maybe in some other language too.

My aim is to provide clean, readable, and idiomatic solutions.
If you have any comment/suggestion/advice, please let me know!


&nbsp;


## Solutions

Task                                                                        | Solution                   | Comment
---                                                                         | ---                        | ---
[Day 1: Chronal Calibration](https://adventofcode.com/2018/day/1)           | [day01.nim](nim/day01.nim) | Dogfooding by using [itertools](https://github.com/narimiran/itertools) to `cycle` through the input. Using `IntSet` for fast lookups.
[Day 2: Inventory Management System](https://adventofcode.com/2018/day/2)   | [day02.nim](nim/day02.nim) | The original solution used `zip`, but that allocates a new sequence.
[Day 3: No Matter How You Slice It](https://adventofcode.com/2018/day/3)    | [day03.nim](nim/day03.nim) | No need for regex, `scanf` macro is great for these kinds of inputs. Using smaller integers instead of `int` gives noticeable speed boost. Using templates to keep the main part short and readable, without unnecessary repetitions.
[Day 4: Repose Record](https://adventofcode.com/2018/day/4)                 | [day04.nim](nim/day04.nim) | [2018-12-04 06:00] Guard narimiran begins shift
[Day 5: Alchemical Reduction](https://adventofcode.com/2018/day/5)          | [day05.nim](nim/day05.nim) | 4x speed improvement when using the already shortened polymer (first part) for the second part.
[Day 6: Chronal Coordinates](https://adventofcode.com/2018/day/6)           | [day06.nim](nim/day06.nim) | The slowest task so far.
[Day 7: The Sum of Its Parts](https://adventofcode.com/2018/day/7)          | [day07.nim](nim/day07.nim) | Using `heapqueue` is a no-brainer here.
[Day 8: Memory Maneuver](https://adventofcode.com/2018/day/8)               | [day08.nim](nim/day08.nim) | Using recursion is a no-brainer here.
[Day 9: Marble Mania](https://adventofcode.com/2018/day/9)                  | [day09.nim](nim/day09.nim) | Compile it with `--gc:regions` to get the most performance out of it.
[Day 10: The Stars Align](https://adventofcode.com/2018/day/10)             | [day10.nim](nim/day10.nim) | The first usage of Nim templates this year. Using [unpack](https://github.com/technicallyagd/unpack) for `<-` sequence unpacking.
[Day 11: Chronal Charge](https://adventofcode.com/2018/day/11)              | [day11.nim](nim/day11.nim) | Using [summed-area table](https://en.wikipedia.org/wiki/Summed-area_table) to have O(n^3) solution (naïve solution is O(n^5)). Using threads gives 2x speed boost.
[Day 12: Subterranean Sustainability](https://adventofcode.com/2018/day/12) | [day12.nim](nim/day12.nim) | Nothing to write home about.
[Day 13: Mine Cart Madness](https://adventofcode.com/2018/day/13)           | [day13.nim](nim/day13.nim) | Using [complex plane](https://en.wikipedia.org/wiki/Complex_plane) is the obvious choice for the tasks like this, but `complex` in Nim is limited to floats, so I decided to use plain old tuples of integers.
[Day 14: Chocolate Charts](https://adventofcode.com/2018/day/14)            | [day14.nim](nim/day14.nim) | Using `int8` to keep the memory usage down.
[Day 15: Beverage Bandits](https://adventofcode.com/2018/day/15)            |                            | Ain't nobody got time for that.
[Day 16: Chronal Classification](https://adventofcode.com/2018/day/16)      | [day16.nim](nim/day16.nim) | Nim bitsets don't have `pop`.
[Day 17: Reservoir Research](https://adventofcode.com/2018/day/17)          | [day17.nim](nim/day17.nim) | Recursion keeps things nice and simple. Templates help with the readability.
[Day 18: Settlers of The North Pole](https://adventofcode.com/2018/day/18)  | [day18.nim](nim/day18.nim) | Simplified boundary conditions by creating a border around the area.
[Day 19: Go With The Flow](https://adventofcode.com/2018/day/19)            | [day19.nim](nim/day19.nim) | Figured out the inner loop, do it ""automatically"".
[Day 20: A Regular Map](https://adventofcode.com/2018/day/20)               | [day20.nim](nim/day20.nim) | The initial solution first created a maze and then DFS-ed through it. Current solution immediately calculates the distances, for 3x performance gain.
[Day 21: Chronal Conversion](https://adventofcode.com/2018/day/21)          | [day21.nim](nim/day21.nim) | The most interesting part of the task (figuring out what the instructions really do) was done on paper. [Here](inputs/21-annotated.txt) is a part of it.
[Day 22: Chronal Conversion](https://adventofcode.com/2018/day/22)          | [day22.nim](nim/day22.nim) | The first time in four years that I use [`A*` algorithm](https://www.redblobgames.com/pathfinding/a-star/introduction.html#astar) for some AoC task.
",narimiran/AdventOfCode2018
101,markheath,JavaScript,{'JavaScript': 82820},"# Advent of Code JavaScript Solutions

This is a repository for me to attempt the [Advent of Code](http://adventofcode.com) challenges in JavaScript.

In past years I've solved them using C# and F#. [read about my solutions here](http://markheath.net/category/advent+of+code). This repository is for me to improve my JavaScript skills by solving the puzzles with node.js as ES6. I've ported my 2015 solutions to JavaScript, and in 2017 I just used JavaScript.

To get started:
```
npm install
```

To solve all puzzles for this year

```
node index.js
```

To run all tests for 2015:
```
node index.js 2015
```

To run tests for 2015 day 10
```
node index.js 2015 10
```

To run Jasmine unit tests
```
npm test
```

To run a subset of Jasmine unit tests
```
npm test -- --filter=""flatMap""
```

## Blog posts about 2017 solutions

- [Day 1](http://markheath.net/post/advent-of-code-2017-day-1)
- [Day 2](http://markheath.net/post/advent-of-code-2017-day-2)
- [Day 3](http://markheath.net/post/advent-of-code-2017-day-3)
- [Day 4](http://markheath.net/post/advent-of-code-2017-day-4)
- [Day 5](http://markheath.net/post/advent-of-code-2017-day-5)
- [Day 6](http://markheath.net/post/advent-of-code-2017-day-6)
- [Day 7](http://markheath.net/post/advent-of-code-2017-day-7)
- [Day 8](http://markheath.net/post/advent-of-code-2017-day-8)
- [Day 9](http://markheath.net/post/advent-of-code-2017-day-9)
- [Day 10](http://markheath.net/post/advent-of-code-2017-day-10)
- [Day 11](http://markheath.net/post/advent-of-code-2017-day-11)
- [Day 12](http://markheath.net/post/advent-of-code-2017-day-12)
- [Day 13](http://markheath.net/post/advent-of-code-2017-day-13)
- [Day 14](http://markheath.net/post/advent-of-code-2017-day-14)
- [Day 15](http://markheath.net/post/advent-of-code-2017-day-15)
- [Day 16](http://markheath.net/post/advent-of-code-2017-day-16)
- [Day 17](http://markheath.net/post/advent-of-code-2017-day-17)
- [Day 18](http://markheath.net/post/advent-of-code-2017-day-18)
- [Day 19](http://markheath.net/post/advent-of-code-2017-day-19)
- [Day 20](http://markheath.net/post/advent-of-code-2017-day-20)
- [Day 21](http://markheath.net/post/advent-of-code-2017-day-21)
- [Day 22](http://markheath.net/post/advent-of-code-2017-day-22)
- [Day 23](http://markheath.net/post/advent-of-code-2017-day-23)
- [Day 24](http://markheath.net/post/advent-of-code-2017-day-24)
- [Day 25](http://markheath.net/post/advent-of-code-2017-day-25)
",markheath/advent-of-code-js
102,stephjs,JavaScript,{'JavaScript': 21237},"#  🎄 Advent of Code 2019
##### solutions by me 👩🏻‍💻 [@_steph.js](https://www.instagram.com/_steph.js/)

[Advent of Code](https://adventofcode.com/2019) is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.

## It's Christmas themed leetcode!
##### here's the first question:
--- Day 1: The Tyranny of the Rocket Equation ---
Santa has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.

The Elves quickly load you into a spacecraft and prepare to launch.

At the first Go / No Go poll, every Elf is Go until the Fuel Counter-Upper. They haven't determined the amount of fuel required yet.

Fuel required to launch a given module is based on its mass. Specifically, to find the fuel required for a module, take its mass, divide by three, round down, and subtract 2.

For example:

For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.
For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.
For a mass of 1969, the fuel required is 654.
For a mass of 100756, the fuel required is 33583.
The Fuel Counter-Upper needs to know the total fuel requirement. To find it, individually calculate the fuel needed for the mass of each module (your puzzle input), then add together all the fuel values.

What is the sum of the fuel requirements for all of the modules on your spacecraft?

##### see? you can totally do this!

## My Solutions

This year I'm solving the puzzles with JavaScript. To run my code, clone the repo locally 

```bash
git clone https://github.com/stephjs/advent-of-code-2019.git
```

Navigate into the puzzles folder

```bash
cd advent-of-code-2019/puzzles
```

... and run the puzzle you are interested in

```bash
node day1-part1
```

### Merry Christmas! 🎄🎁 🎉",stephjs/advent-of-code-2019
103,ephemient,,{},"# [Advent of Code 2019](https://adventofcode.com/2019)
### my answers

Development occurs on language-specific branches:

  - [Haskell](https://github.com/ephemient/aoc2019/tree/hs)
  - [Kotlin](https://github.com/ephemient/aoc2019/tree/kt)
  - [Python](https://github.com/ephemient/aoc2019/tree/py)
  - [Rust](https://github.com/ephemient/aoc2019/tree/rs)
",ephemient/aoc2019
104,Ullaakut,Go,"{'Go': 46248, 'Shell': 2346, 'Makefile': 2070, 'Awk': 616}","# Advent of Code 2019

This repository contains my solutions for the advent of code puzzles of year 2019. If you're looking for 2018, [here it is](https://github.com/Ullaakut/aoc18).

The improvement over last year is that this year, I'm adding a handy **Makefile** which does the following:

* **Automatically downloads** the challenge and input for the day (e.g.: `make download DAY=03`)
    * In order to use this target, you need to specify your session cookie from `adventofcode.com` in `AOC_COOKIE`.
    * Parses the challenge into a markdown file (adds Markdown style headers and code blocks).
    * This part still needs a bit of work, as multiline code blocks are not supported yet, and formatting (bold, italics etc.) is lost.
* Automatically **generates a folder structure** to contain a program for each part of each day
* Runs the solutions for each day that was currently implemented (`make run`)
* Runs all unit tests (`make test`)
* Is self-documented (`make help`)

You can reuse this Makefile for other years by specifying the `YEAR` variable in your environment. By default, it is going to use `2019`.

Here is an example of how it looks (the output is normally not cut, but puzzle descriptions are too long to fit on an example screenshot). It takes about one second to download and parse the challenge, download the input, and create the folders and files for solving them. Feel free to change the template to fit your way of solving AOC puzzles, if you want to reuse this repository :)

<p align=""center"">
    <img width=""65%"" src=""img/make_download.png"" />
</p>

## Recap

Day | Completed | Project | Challenge | Language | Tests
----|--------------|---------|-------|---------|------
01 | :white_check_mark: | [day01](day01) | [Advent of Code 2019 - Day 01](https://adventofcode.com/2019/day/1)  | Go | :white_check_mark:
02 | :white_check_mark: | [day02](day02) | [Advent of Code 2019 - Day 02](https://adventofcode.com/2019/day/2)  | Go | :white_check_mark:
03 | :white_check_mark: | [day03](day03) | [Advent of Code 2019 - Day 03](https://adventofcode.com/2019/day/3)  | Go | :white_check_mark:
04 | :white_check_mark: | [day04](day04) | [Advent of Code 2019 - Day 04](https://adventofcode.com/2019/day/4)  | Go | :white_check_mark:
05 | :white_check_mark: | [day05](day05) | [Advent of Code 2019 - Day 05](https://adventofcode.com/2019/day/5)  | Go | :white_check_mark:
06 | :white_check_mark: | [day06](day06) | [Advent of Code 2019 - Day 06](https://adventofcode.com/2019/day/6)  | Go | :white_check_mark:
07 | :soon: | [day07](day07) | [Advent of Code 2019 - Day 07](https://adventofcode.com/2019/day/7)  | Go | :soon:
08 | :soon: | [day08](day08) | [Advent of Code 2019 - Day 08](https://adventofcode.com/2019/day/8)  | Go | :soon:
09 | :soon: | [day09](day09) | [Advent of Code 2019 - Day 09](https://adventofcode.com/2019/day/9)  | Go | :soon:
10 | :soon: | [day10](day10) | [Advent of Code 2019 - Day 10](https://adventofcode.com/2019/day/10) | Go | :soon:
11 | :soon: | [day11](day11) | [Advent of Code 2019 - Day 11](https://adventofcode.com/2019/day/11) | Go | :soon:
12 | :soon: | [day12](day12) | [Advent of Code 2019 - Day 12](https://adventofcode.com/2019/day/12) | Go | :soon:
13 | :soon: | [day13](day13) | [Advent of Code 2019 - Day 13](https://adventofcode.com/2019/day/13) | Go | :soon:
14 | :soon: | [day14](day14) | [Advent of Code 2019 - Day 14](https://adventofcode.com/2019/day/14) | Go | :soon:
15 | :soon: | [day15](day15) | [Advent of Code 2019 - Day 15](https://adventofcode.com/2019/day/15) | Go | :soon:
16 | :soon: | [day16](day16) | [Advent of Code 2019 - Day 16](https://adventofcode.com/2019/day/16) | Go | :soon:
17 | :soon: | [day17](day17) | [Advent of Code 2019 - Day 17](https://adventofcode.com/2019/day/17) | Go | :soon:
18 | :soon: | [day18](day18) | [Advent of Code 2019 - Day 18](https://adventofcode.com/2019/day/18) | Go | :soon:
19 | :soon: | [day19](day19) | [Advent of Code 2019 - Day 19](https://adventofcode.com/2019/day/19) | Go | :soon:
20 | :soon: | [day20](day20) | [Advent of Code 2019 - Day 20](https://adventofcode.com/2019/day/20) | Go | :soon:
21 | :soon: | [day21](day21) | [Advent of Code 2019 - Day 21](https://adventofcode.com/2019/day/21) | Go | :soon:
22 | :soon: | [day22](day22) | [Advent of Code 2019 - Day 22](https://adventofcode.com/2019/day/22) | Go | :soon:
23 | :soon: | [day23](day23) | [Advent of Code 2019 - Day 23](https://adventofcode.com/2019/day/23) | Go | :soon:
24 | :soon: | [day24](day24) | [Advent of Code 2019 - Day 24](https://adventofcode.com/2019/day/24) | Go | :soon:
25 | :soon: | [day25](day25) | [Advent of Code 2019 - Day 25](https://adventofcode.com/2019/day/25) | Go | :soon:

## Day 1

### Part 1

<p align=""center"">
    <img width=""65%"" src=""img/0101.png"">
    <img width=""65%"" src=""img/0101_test.png"">
</p>

### Part 2

<p align=""center"">
    <img width=""65%"" src=""img/0102.png"">
    <img width=""65%"" src=""img/0102_test.png"">
</p>

## Day 2

### Part 1

<p align=""center"">
    <img width=""65%"" src=""img/0201.png"">
    <img width=""65%"" src=""img/0201_test.png"">
</p>

### Part 2

<p align=""center"">
    <img width=""65%"" src=""img/0202.png"">
    <img width=""65%"" src=""img/0202_test.png"">
</p>

## Day 3

### Part 1

<p align=""center"">
    <img width=""65%"" src=""img/0301.png"">
    <img width=""65%"" src=""img/0301_test.png"">
</p>

### Part 2

<p align=""center"">
    <img width=""65%"" src=""img/0302.png"">
    <img width=""65%"" src=""img/0302_test.png"">
</p>

## Day 4

### Part 1

<p align=""center"">
    <img width=""65%"" src=""img/0401.png"">
    <img width=""65%"" src=""img/0401_test.png"">
</p>

### Part 2

<p align=""center"">
    <img width=""65%"" src=""img/0402.png"">
    <img width=""65%"" src=""img/0402_test.png"">
</p>

## Day 5

### Part 1

<p align=""center"">
    <img width=""65%"" src=""img/0501.png"">
    <img width=""65%"" src=""img/0501_test.png"">
</p>

### Part 2

<p align=""center"">
    <img width=""65%"" src=""img/0502.png"">
    <img width=""65%"" src=""img/0502_test.png"">
</p>

## Day 6

### Part 1

<p align=""center"">
    <img width=""65%"" src=""img/0601.png"">
    <img width=""65%"" src=""img/0601_test.png"">
</p>

### Part 2

<p align=""center"">
    <img width=""65%"" src=""img/0602.png"">
    <img width=""65%"" src=""img/0602_test.png"">
</p>
",Ullaakut/aoc19
105,moesol,Pony,{'Pony': 511139},"# pony-advent-2016

Advent of Code 2016 implemented in the Pony Language

Each day a new coding challenge comes here:

http://adventofcode.com/2016

",moesol/pony-advent-2016
106,amochtar,JavaScript,"{'JavaScript': 107614, 'HTML': 3842, 'CSS': 568}","# Advent of Code private leaderboard ranking extension

Visualize the ranking over time of an [Advent of Code](https://www.adventofcode.com/) private leaderboard.

See https://amochtar.github.io/aoc-ranking/ for an interactive example.

![#Global Leaderboard Ranking](example/ranking.png ""Private Leaderboard Ranking Example"")


## Installation

* Firefox - https://addons.mozilla.org/en-US/firefox/addon/aoc-ranking/
* Chrome - https://chrome.google.com/webstore/detail/advent-of-code-ranking/jbnlafikncgjjhdkmfhokcplgahebmjl


## Building locally

To build the extension locally, run `npm install && npm run build`. This will generate an exploded version of the extension in the `dist/` folder.

Use [`web-ext run`](https://github.com/mozilla/web-ext) from the `dist/` folder to run it locally in Firefox, or `web-ext build` to create a package.
",amochtar/aoc-ranking
107,AlexAegis,TypeScript,"{'TypeScript': 178903, 'Rust': 68139, 'Smarty': 4412}","# [Advent of Code](https://adventofcode.com/)

[![Build Status](https://travis-ci.com/AlexAegis/advent-of-code.svg?branch=master)](https://travis-ci.com/AlexAegis/advent-of-code) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/3dbac1abe814499882d2ed419cbe8a55)](https://app.codacy.com/app/AlexAegis/advent-of-code?utm_source=github.com&utm_medium=referral&utm_content=AlexAegis/advent-of-code&utm_campaign=Badge_Grade_Dashboard) [![Maintainability](https://api.codeclimate.com/v1/badges/5df3d3d67dfe389dc929/maintainability)](https://codeclimate.com/github/AlexAegis/advent-of-code/maintainability) [![Test Coverage](https://api.codeclimate.com/v1/badges/5df3d3d67dfe389dc929/test_coverage)](https://codeclimate.com/github/AlexAegis/advent-of-code/test_coverage) [![codecov](https://img.shields.io/codecov/c/github/AlexAegis/advent-of-code.svg?label=node%20coverage)](https://codecov.io/gh/AlexAegis/advent-of-code) [![Coverage Status](https://img.shields.io/coveralls/github/AlexAegis/advent-of-code.svg?label=rust%20coverage)](https://coveralls.io/github/AlexAegis/advent-of-code?branch=master) [![snyk: vulnerabilities](https://img.shields.io/snyk/vulnerabilities/github/AlexAegis/advent-of-code.svg?style=popout)](https://app.snyk.io/org/alexaegis/project/82929b9b-f679-4b1c-8804-bff40110b7dd) [![Greenkeeper badge](https://badges.greenkeeper.io/AlexAegis/advent-of-code.svg)](https://greenkeeper.io/) [![Last Commit on GitHub](https://img.shields.io/github/last-commit/AlexAegis/advent-of-code.svg)](https://github.com/AlexAegis/advent-of-code) [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)

[![2019 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2019.json)](./src/2019/) [![2018 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2018.json)](./src/2018/) [![2017 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2017.json)](./src/2017/) [![2016 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2016.json)](./src/2016/) [![2015 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2015.json)](./src/2015/)

### [Leaderboards](https://adventofcode.com/2019/leaderboard/private/view/515399)

Join me on my private leaderboard! You can find my invitation code [here](./.aoc/leaderboard.md).

## [2019](https://adventofcode.com/2017/)

[![2019 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2019.json)](./src/2019/)

| Day                         | Part One                                          |                                             | Part Two                                          |                                             |
| --------------------------- | ------------------------------------------------- | ------------------------------------------- | ------------------------------------------------- | ------------------------------------------- |
|                             | TypeScript                                        | Rust                                        | TypeScript                                        | Rust                                        |
| [Day 1](./src/2019/day01/)  | [0.3ms](./src/2019/day01/typescript/part_one.ts)  | [1.6μs\*](./src/2019/day01/rust/src/lib.rs) | [0.39ms](./src/2019/day01/typescript/part_two.ts) | [3.6μs\*](./src/2019/day01/rust/src/lib.rs) |
| [Day 2](./src/2019/day02/)  | [0.25ms](./src/2019/day02/typescript/part_one.ts) | [2.2μs\*](./src/2019/day02/rust/src/lib.rs) | [11ms](./src/2019/day02/typescript/part_two.ts)   | [1ms\*](./src/2019/day02/rust/src/lib.rs)   |
| [Day 3](./src/2019/day03/)  | [154ms](./src/2019/day03/typescript/part_one.ts)  |                                             | [151ms](./src/2019/day03/typescript/part_two.ts)  |                                             |
| [Day 4](./src/2019/day04/)  | [62ms](./src/2019/day04/typescript/part_one.ts)   |                                             | [77ms](./src/2019/day04/typescript/part_two.ts)   |                                             |
| [Day 5](./src/2019/day05/)  | [1.2ms](./src/2019/day05/typescript/part_one.ts)  |                                             | [1.25ms](./src/2019/day05/typescript/part_two.ts) |                                             |
| [Day 6](./src/2019/day06/)  | [526ms](./src/2019/day06/typescript/part_one.ts)  |                                             | [35ms](./src/2019/day06/typescript/part_two.ts)   |                                             |
| [Day 7](./src/2019/day07/)  | [9.4ms](./src/2019/day07/typescript/part_one.ts)  |                                             | [13.5ms](./src/2019/day07/typescript/part_two.ts) |                                             |
| [Day 8](./src/2019/day08/)  | [2.3ms](./src/2019/day08/typescript/part_one.ts)  |                                             | [3.26ms](./src/2019/day08/typescript/part_two.ts) |                                             |
| [Day 9](./src/2019/day09/)  | [1.62ms](./src/2019/day09/typescript/part_one.ts) |                                             | [107ms](./src/2019/day09/typescript/part_two.ts)  |                                             |
| [Day 10](./src/2019/day10/) | [61ms](./src/2019/day10/typescript/part_one.ts)   |                                             | [64ms](./src/2019/day10/typescript/part_two.ts)   |                                             |
| [Day 11](./src/2019/day11/) | [44ms](./src/2019/day11/typescript/part_one.ts)   |                                             | [10ms](./src/2019/day11/typescript/part_two.ts)   |                                             |
| Day 12                      |                                                   |                                             |                                                   |                                             |
| Day 13                      |                                                   |                                             |                                                   |                                             |
| Day 14                      |                                                   |                                             |                                                   |                                             |
| Day 15                      |                                                   |                                             |                                                   |                                             |
| Day 16                      |                                                   |                                             |                                                   |                                             |
| Day 17                      |                                                   |                                             |                                                   |                                             |
| Day 18                      |                                                   |                                             |                                                   |                                             |
| Day 19                      |                                                   |                                             |                                                   |                                             |
| Day 20                      |                                                   |                                             |                                                   |                                             |
| Day 21                      |                                                   |                                             |                                                   |                                             |
| Day 22                      |                                                   |                                             |                                                   |                                             |
| Day 23                      |                                                   |                                             |                                                   |                                             |
| Day 24                      |                                                   |                                             |                                                   |                                             |
| Day 25                      |                                                   |                                             |                                                   |                                             |

## [2018](https://adventofcode.com/2018/)

[![2018 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2018.json)](./src/2018/)

| Day                         | Part One                                                    |                                          | Part Two                                                 |                                            |
| --------------------------- | ----------------------------------------------------------- | ---------------------------------------- | -------------------------------------------------------- | ------------------------------------------ |
|                             | TypeScript                                                  | Rust                                     | TypeScript                                               | Rust                                       |
| [Day 1](./src/2018/day01/)  | [0.9ms](./src/2018/day01/typescript/part_one.ts)            | [13μs](./src/2018/day01/rust/src/lib.rs) | [ 10ms ](./src/2018/day01/typescript/part_two.ts)        | [12.2μs](./src/2018/day01/rust/src/lib.rs) |
| [Day 2](./src/2018/day02/)  | [9ms](./src/2018/day02/typescript/part_one.ts)              |                                          | [ 9.6ms ](./src/2018/day02/typescript/part_two.ts)       |                                            |
| [Day 3](./src/2018/day03/)  | [265ms](./src/2018/day03/typescript/part_one.ts)            |                                          | [ 234ms ](./src/2018/day03/typescript/part_two.ts)       |                                            |
| [Day 4](./src/2018/day04/)  | [6ms](./src/2018/day04/typescript/part_one.ts)              |                                          | [ 4ms ](./src/2018/day04/typescript/part_two.ts)         |                                            |
| [Day 5](./src/2018/day05/)  | [15ms](./src/2018/day05/typescript/collapse.function.ts) 🌟 |                                          | [ 326ms ](./src/2018/day05/typescript/part_two.ts)       |                                            |
| [Day 6](./src/2018/day06/)  | [230ms](./src/2018/day06/typescript/part_one.ts)            |                                          | [ 46ms ](./src/2018/day06/typescript/part_two.ts)        |                                            |
| [Day 7](./src/2018/day07/)  | [1ms](./src/2018/day07/typescript/part_one.ts)              |                                          | [ 24ms ](./src/2018/day07/typescript/part_two.ts)        |                                            |
| [Day 8](./src/2018/day08/)  | [6ms](./src/2018/day08/typescript/model/node.class.ts) 🌟   |                                          | [ 6ms ](./src/2018/day08/typescript/model/node.class.ts) |                                            |
| [Day 9](./src/2018/day09/)  | [9ms ](./src/2018/day09/typescript/part_one.ts)             |                                          | [ 274ms ](./src/2018/day09/typescript/part_two.ts)       |                                            |
| [Day 10](./src/2018/day10/) | [305ms](./src/2018/day10/typescript/task.ts)                |                                          | [ 305ms ](./src/2018/day10/typescript/task.ts)           |                                            |
| [Day 11](./src/2018/day11/) | [165ms](./src/2018/day11/typescript/part_one.ts)            |                                          | [ 63007ms ](./src/2018/day11/typescript/part_two.ts)     |                                            |
| [Day 12](./src/2018/day12/) | [0.8ms](./src/2018/day12/typescript/part_one.ts)            |                                          | [ 11ms ](./src/2018/day12/typescript/part_two.ts)        |                                            |
| [Day 13](./src/2018/day13/) | [17ms](./src/2018/day13/typescript/model/cart.class.ts)     |                                          | [ 51ms ](./src/2018/day13/typescript/part_two.ts)        |                                            |
| [Day 14](./src/2018/day14/) | [9.6ms](./src/2018/day14/typescript/part_one.ts)            |                                          | [ 900ms ](./src/2018/day14/typescript/part_two.ts)       |                                            |
| [Day 15](./src/2018/day15/) |                                                             |                                          |                                                          |                                            |
| Day 16                      |                                                             |                                          |                                                          |                                            |
| Day 17                      |                                                             |                                          |                                                          |                                            |
| Day 18                      |                                                             |                                          |                                                          |                                            |
| Day 19                      |                                                             |                                          |                                                          |                                            |
| Day 20                      |                                                             |                                          |                                                          |                                            |
| Day 21                      |                                                             |                                          |                                                          |                                            |
| Day 22                      |                                                             |                                          |                                                          |                                            |
| Day 23                      |                                                             |                                          |                                                          |                                            |
| Day 24                      |                                                             |                                          |                                                          |                                            |
| Day 25                      |                                                             |                                          |                                                          |                                            |

## [2017](https://adventofcode.com/2017/)

[![2017 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2017.json)](./src/2017/)

| Day                        | Part One                                         |                                            | Part Two                                         |                                            |
| -------------------------- | ------------------------------------------------ | ------------------------------------------ | ------------------------------------------------ | ------------------------------------------ |
|                            | TypeScript                                       | Rust                                       | TypeScript                                       | Rust                                       |
| [Day 1](./src/2017/day01/) | [0.9ms](./src/2017/day01/typescript/part_one.ts) | [51μs\*](./src/2017/day01/rust/src/lib.rs) | [0.9ms](./src/2017/day01/typescript/part_two.ts) | [59μs\*](./src/2017/day01/rust/src/lib.rs) |
| Day 2                      |                                                  |                                            |                                                  |                                            |
| Day 3                      |                                                  |                                            |                                                  |                                            |
| Day 4                      |                                                  |                                            |                                                  |                                            |
| Day 5                      |                                                  |                                            |                                                  |                                            |
| Day 6                      |                                                  |                                            |                                                  |                                            |
| Day 7                      |                                                  |                                            |                                                  |                                            |
| Day 8                      |                                                  |                                            |                                                  |                                            |
| Day 9                      |                                                  |                                            |                                                  |                                            |
| Day 10                     |                                                  |                                            |                                                  |                                            |
| Day 11                     |                                                  |                                            |                                                  |                                            |
| Day 12                     |                                                  |                                            |                                                  |                                            |
| Day 13                     |                                                  |                                            |                                                  |                                            |
| Day 14                     |                                                  |                                            |                                                  |                                            |
| Day 15                     |                                                  |                                            |                                                  |                                            |
| Day 16                     |                                                  |                                            |                                                  |                                            |
| Day 17                     |                                                  |                                            |                                                  |                                            |
| Day 18                     |                                                  |                                            |                                                  |                                            |
| Day 19                     |                                                  |                                            |                                                  |                                            |
| Day 20                     |                                                  |                                            |                                                  |                                            |
| Day 21                     |                                                  |                                            |                                                  |                                            |
| Day 22                     |                                                  |                                            |                                                  |                                            |
| Day 23                     |                                                  |                                            |                                                  |                                            |
| Day 24                     |                                                  |                                            |                                                  |                                            |
| Day 25                     |                                                  |                                            |                                                  |                                            |

## [2016](https://adventofcode.com/2016/)

[![2016 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2016.json)](./src/2016/)

| Day                        | Part One                                          |      | Part Two                                          |      |
| -------------------------- | ------------------------------------------------- | ---- | ------------------------------------------------- | ---- |
|                            | TypeScript                                        | Rust | TypeScript                                        | Rust |
| [Day 1](./src/2015/day01/) | [0.37ms](./src/2016/day01/typescript/part_one.ts) |      | [0.48ms](./src/2016/day01/typescript/part_two.ts) |      |
| Day 2                      |                                                   |      |                                                   |      |
| Day 3                      |                                                   |      |                                                   |      |
| Day 4                      |                                                   |      |                                                   |      |
| Day 5                      |                                                   |      |                                                   |      |
| Day 6                      |                                                   |      |                                                   |      |
| Day 7                      |                                                   |      |                                                   |      |
| Day 8                      |                                                   |      |                                                   |      |
| Day 9                      |                                                   |      |                                                   |      |
| Day 10                     |                                                   |      |                                                   |      |
| Day 11                     |                                                   |      |                                                   |      |
| Day 12                     |                                                   |      |                                                   |      |
| Day 13                     |                                                   |      |                                                   |      |
| Day 14                     |                                                   |      |                                                   |      |
| Day 15                     |                                                   |      |                                                   |      |
| Day 16                     |                                                   |      |                                                   |      |
| Day 17                     |                                                   |      |                                                   |      |
| Day 18                     |                                                   |      |                                                   |      |
| Day 19                     |                                                   |      |                                                   |      |
| Day 20                     |                                                   |      |                                                   |      |
| Day 21                     |                                                   |      |                                                   |      |
| Day 22                     |                                                   |      |                                                   |      |
| Day 23                     |                                                   |      |                                                   |      |
| Day 24                     |                                                   |      |                                                   |      |
| Day 25                     |                                                   |      |                                                   |      |

## [2015](https://adventofcode.com/2015/)

[![2015 Progress](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/AlexAegis/advent-of-code/master/.github/badges/2015.json)](./src/2015/)

| Day                        | Part One                                                     |                                             | Part Two                                                   |                                             |
| -------------------------- | ------------------------------------------------------------ | ------------------------------------------- | ---------------------------------------------------------- | ------------------------------------------- |
|                            | TypeScript                                                   | Rust                                        | TypeScript                                                 | Rust                                        |
| [Day 1](./src/2015/day01/) | [0.5ms](./src/2015/day01/typescript/part_one.ts)             | [6.2μs\*](./src/2015/day01/rust/src/lib.rs) | [1.2ms](./src/2015/day01/typescript/part_two.ts)           | [1.9μs\*](./src/2015/day01/rust/src/lib.rs) |
| [Day 2](./src/2015/day02/) | [2ms](./src/2015/day02/typescript/part_one.ts)               | [194μs\*](./src/2015/day02/rust/src/lib.rs) | [2.4ms](./src/2015/day02/typescript/part_two.ts)           | [196μs\*](./src/2015/day02/rust/src/lib.rs) |
| [Day 3](./src/2015/day03/) | [2.6ms](./src/2015/day03/typescript/part_one.ts)             | [231μs\*](./src/2015/day03/rust/src/lib.rs) | [2.8ms](./src/2015/day03/typescript/part_two.ts)           | [256μs\*](./src/2015/day03/rust/src/lib.rs) |
| [Day 4](./src/2015/day04/) | [663ms](./src/2015/day04/typescript/hash-search.function.ts) | [506ms](./src/2015/day04/rust/src/lib.rs)   | [19s](./src/2015/day04/typescript/hash-search.function.ts) | [14s](./src/2015/day04/rust/src/lib.rs)     |
| [Day 5](./src/2015/day05/) | [13ms](./src/2015/day05/typescript/part_one.ts)              | [193μs](./src/2015/day05/rust/src/lib.rs)   | [21ms](./src/2015/day05/typescript/part_two.ts)            | [4ms](./src/2015/day05/rust/src/lib.rs)     |
| Day 6                      |                                                              |                                             |                                                            |                                             |
| Day 7                      |                                                              |                                             |                                                            |                                             |
| Day 8                      |                                                              |                                             |                                                            |                                             |
| Day 9                      |                                                              |                                             |                                                            |                                             |
| Day 10                     |                                                              |                                             |                                                            |                                             |
| Day 11                     |                                                              |                                             |                                                            |                                             |
| Day 12                     |                                                              |                                             |                                                            |                                             |
| Day 13                     |                                                              |                                             |                                                            |                                             |
| Day 14                     |                                                              |                                             |                                                            |                                             |
| Day 15                     |                                                              |                                             |                                                            |                                             |
| Day 16                     |                                                              |                                             |                                                            |                                             |
| Day 17                     |                                                              |                                             |                                                            |                                             |
| Day 18                     |                                                              |                                             |                                                            |                                             |
| Day 19                     |                                                              |                                             |                                                            |                                             |
| Day 20                     |                                                              |                                             |                                                            |                                             |
| Day 21                     |                                                              |                                             |                                                            |                                             |
| Day 22                     |                                                              |                                             |                                                            |                                             |
| Day 23                     |                                                              |                                             |                                                            |                                             |
| Day 24                     |                                                              |                                             |                                                            |                                             |
| Day 25                     |                                                              |                                             |                                                            |                                             |

> \* measured on 8700k@4.8Ghz

> All benchmarks are calculated with input parsing. I plan to refactor my solutions so I can bench without it.

---

## TypeScript

1. Install [Node.js](https://nodejs.org/en/)

2. Open with [VS Code](https://code.visualstudio.com/)

3. Install the suggested extensions when prompted (Recommended)

4. Install the required packages

   ```bash
   npm i
   ```

   > Select `Current TS File` launch option. **F5** runs the file you're focusing in debug mode.

### Testing

There are tests on every task. You can run them with

```bash
npm test
```

With coverage report

```bash
npm run test:coverage
```

or if you installed the recommended mocha extension you can run them with that

## Rust

1. Install [Rust](https://www.rust-lang.org/tools/install)

2. Open with [VS Code](https://code.visualstudio.com/)

3. Install the suggested extensions when prompted (Recommended)

4. Install the required crates

   ```bash
   cargo build
   ```

   > Select `Current Rust Cargo` launch option. **F5** runs the cargo you're focusing in debug mode.

   > Set Rust to default to `nightly`

   ```bash
   rustup default nightly
   ```

### Running individual days

```bash
cargo run -p aoc201601
```

### Testing

Run in the cargo you'd like to test

```bash
cargo test
```

Or in the workspace cargo if you'd like to run all tests

```bash
cargo test --all
```

### Benchmarking

Run a specific days benchmark

```bash
cargo bench -p aoc201501
```

Or in the workspace cargo if you'd like to run all benchmarks (Takes a while!)

```bash
cargo bench --all
```

## Scaffolding

```bash
cargo run -p scaffold 2016 01
```

## Notes

> All times are measured on i7-8700k@4.8Ghz

> 🌟 marks my favourites

> If you have material-icon-theme installed copy the ""material-icon-theme.folders.associations"" and ""material-icon-theme.files.associations"" to your user settings to see the custom icons

> Right now the **CodeClimate** and **Codecov** coverage reporters only report the _Node_ test coverage and the **Coverall** reporter only the _Rust_ results. This is because for _Node_ `nyc` generates `lcov` reports and `Tarpaulin` generates `cobertura.xml` type reports. Once either _Rust_ gets a native coverage reporter that will output `lcov` or `Tarpaulin` supports `lcov`, these two reports can't be merged.

---

## Technologies ([TypeScript](#TypeScript))

### [Node 12](https://nodejs.org/en/)

> **JavaScript** runtime

### [NPM](https://www.npmjs.com/)

> **Package manager** for Node

### [TypeScript](https://www.typescriptlang.org/)

> **Typed superset** of JavaScript

### [RxJS](http://reactivex.io/)

> **Reactive** programming with observable streams

### [Mocha](https://mochajs.org/)

> **Behaviour driven testing** framework

### [Chai](https://www.chaijs.com/)

> **Assertion** library

### [Istanbul](https://istanbul.js.org/)

> **Code coverage** tool

## Technologies ([Rust](#Rust))

### [Rust](https://www.rust-lang.org/)

> **Systems** programmin language

### [Criterion](https://github.com/bheisler/criterion.rs)

> **Benchmarking** tool

### [Clippy](https://github.com/rust-lang/rust-clippy)

> **Linter** for rust

## Recommendations

### [Visual Studio Code](https://code.visualstudio.com/)

> **IDE** for everything. [Settings](./.vscode/)

### [Fira Code](https://github.com/tonsky/FiraCode)

> **Font** with ligatures

## Services

### [Travis](https://travis-ci.com/)

> **Continuous Integration** solution

### [Codacy](https://codacy.com/)

> **Code Quality** monitoring

### [Code Climate](https://codeclimate.com/)

> **Maintainability and Coverage** reports

### [Snyk](https://snyk.io/)

> **Vulnerability** detection

### [Libraries.io](https://libraries.io/)

> **Dependency** watcher

### [Shields.io](https://shields.io/#/)

> **Badges** to look cool
",AlexAegis/advent-of-code
108,bewuethr,Perl,"{'Perl': 138429, 'Awk': 60552, 'Shell': 59915, 'Go': 24937}","# Advent of Code

My solutions to [Advent of Code](https://adventofcode.com).

See the [aoc-stats](https://github.com/bewuethr/aoc-stats) repo for a static
site generator with extended statistics.

## 2015

I started out with Bash, but added some Perl to the mix when Bash just took too
long.

I tried sticking to pure Bash without too much reliance on command line tools
(reason: definitely not performance), but whenever pure Bash really was too
slow or cumbersome (day 10, second part for example), I gladly took the
multiple orders of improved performance.

## 2016

Everything in awk, with the odd solution in Perl or Bash and utilities such as
grep or `sort`.

For MD5 hashing, I used [this awk
extension](http://git.codu.in/sup/gawk-extensions) written in C.

## 2017

Perl for speed, Go to learn.

Uploads are ""polished"", but the oldest commit per file is the honest version
used to solve the puzzle.

## 2018

Perl. First commits per day are the honest truth, afterwards I clean up.

## 2019

I thought ""probably Go"", but ended up with Perl again for day 1.
",bewuethr/advent-of-code
109,jwoLondon,Elm,"{'Elm': 19422, 'CSS': 818}","---
id: litvis
---

@import ""./css/aoc.less""

# Literate Elm Solutions

Solutions to the [Advent of Code](http://adventofcode.com) programming challenges using _literate Elm_.
These are created in the [litvis environment](https://github.com/gicentre/litvis) and although viewable as normal markdown, to compute the answers and format output, they are best viewed in Atom/VSCode with litvis installed.

| Day | 2015                                                       | 2016                                                | 2017                                                        | 2018                                                     | 2019                                                   |
| --: | :--------------------------------------------------------- | :-------------------------------------------------- | :---------------------------------------------------------- | :------------------------------------------------------- | ------------------------------------------------------ |
|   1 | [Not Quite Lisp](2015/d01_2015.md)                         | [No Time for a Taxicab](2016/d01_2016.md)           | [Inverse Captcha](2017/d01_2017.md)                         | [Chronal Calibration](2018/d01_2018.md)                  | [The Tyranny of the Rocket Equation](2019/d01_2019.md) |
|   2 | [I Was Told There Would Be No Math](2015/d02_2015.md)      | [Bathroom Security](2016/d02_2016.md)               | [Corruption Checksum](2017/d02_2017.md)                     | [Inventory Management System](2018/d02_2018.md)          | [1202 Program Alarm](2019/d02_2019.md)                 |
|   3 | [Perfectly Spherical Houses in a Vacuum](2015/d03_2015.md) | [Squares With Three Sides](2016/d03_2016.md)        | [Spiral Memory](2017/d03_2017.md)                           | [No Matter How You Slice It](2018/d03_2018.md)           | [Crossed Wires](2019/d03_2019.md)                      |
|   4 | [The Ideal Stocking Stuffer](2015/d04_2015.md)             | [Security Through Obscurity](2016/d04_2016.md)      | [High-Entropy Passphrases](2017/d04_2017.md)                | [Repose Record](2018/d04_2018.md)                        | [Secure Container](2019/d04_2019.md)                   |
|   5 | [Doesn't He Have Intern-Elves For This?](2015/d05_2015.md) | [How About a Nice Game of Chess?](2016/d05_2016.md) | [A Maze of Twisty Trampolines, All Alike](2017/d05_2017.md) | [Alchemical Reduction](2018/d05_2018.md)                 | [Sunny with a Chance of Asteroids](2019/d05_2019.md)   |
|   6 | [Probably a Fire Hazard](2015/d06_2015.md)                 | [Signals and Noise](2016/d06_2016.md)               | [Memory Reallocation](2017/d06_2017.md)                     | [Chronal Coordinates](2018/d06_2018.md)                  | [Universal Orbit Map](2019/d06_2019.md)                |
|   7 | [Some Assembly Required](2015/d07_2015.md)                 | [Internet Protocol Version 7](2016/d07_2016.md)     | [Recursive Circus](2017/d07_2017.md)                        | [The Sum of Its Parts](2018/d07_2018.md)                 | [Amplification Circuit](2019/d07_2019.md)              |
|   8 | [Matchsticks](2015/d08_2015.md)                            | [Two-Factor Authentication](2016/d08_2016.md)       | [I Heard You Like Registers](2017/d08_2017.md)              | [Memory Maneuver](2018/d08_2018.md)                      | [Space Image Format](2019/d08_2019.md)                 |
|   9 | [All in a Single Night](2015/d09_2015.md)                  | x                                                   | [Stream Processing](2017/d09_2017.md)                       | [Marble Mania](2018/d09_2018.md)                         | [?](2019/d09_2019.md)                                  |
|  10 | [Elves Look, Elves Say](2015/d10_2015.md)                  | x                                                   | [Knot Hash](2017/d10_2017.md)                               | [The Stars Align](2018/d10_2018.md)                      | [?](2019/d10_2019.md)                                  |
|  11 | [Corporate Policy](2015/d11_2015.md)                       | x                                                   | [Hex Ed](2017/d11_2017.md)                                  | [Chronal Charge](2018/d11_2018.md)                       | [?](2019/d11_2019.md)                                  |
|  12 | [JSAbacusFramework.io](2015/d12_2015.md)                   | x                                                   | x                                                           | [Subterranean Sustainability](2018/d12_2018.md)          | [?](2019/d12_2019.md)                                  |
|  13 | [Knights of the Dinner Table](2015/d13_2015.md)            | x                                                   | x                                                           | [Mine Cart Madness](2018/d13_2018.md)                    | [?](2019/d13_2019.md)                                  |
|  14 | [Reindeer Olympics](2015/d14_2015.md)                      | x                                                   | [Disk Defragmentation](2017/d14_2017.md)                    | [Chocolate Charts](2018/d14_2018.md)                     | [?](2019/d14_2019.md)                                  |
|  15 | [Science for Hungry People](2015/d15_2015.md)              | x                                                   | x                                                           | [Beverage Bandits](2018/d15_2018.md)                     | [?](2019/d15_2019.md)                                  |
|  16 | [Aunt Sue](2015/d16_2015.md)                               | x                                                   | x                                                           | [Chronal Classification](2018/d16_2018.md)               | [?](2019/d16_2019.md)                                  |
|  17 | [No Such Thing as Too Much](2015/d17_2015.md)              | x                                                   | x                                                           | [Reservoir Research](2018/d17_2018.md)                   | [?](2019/d17_2019.md)                                  |
|  18 | [Like a GIF For Your Yard](2015/d18_2015.md)               | x                                                   | x                                                           | [Settlers of The North Pole](2018/d18_2018.md)           | [?](2019/d18_2019.md)                                  |
|  19 | [Medicine for Rudolph](2015/d19_2015.md)                   | x                                                   | x                                                           | [ Go With The Flow](2018/d19_2018.md)                    | [?](2019/d19_2019.md)                                  |
|  20 | [Infinite Elves and Infinite Houses](2015/d20_2015.md)     | x                                                   | x                                                           | [ A Regular Map](2018/d20_2018.md)                       | [?](2019/d20_2019.md)                                  |
|  21 | [RPG Simulator 20XX](2015/d21_2015.md)                     | x                                                   | x                                                           | [Chronal Conversion](2018/d21_2018.md)                   | [?](2019/d21_2019.md)                                  |
|  22 | x                                                          | x                                                   | x                                                           | [Mode Maze](2018/d22_2018.md)                            | [?](2019/d22_2019.md)                                  |
|  23 | [Opening the Turing Lock](2015/d23_2015.md)                | x                                                   | x                                                           | [Experimental Emergency Teleportation](2018/d23_2018.md) | [?](2019/d23_2019.md)                                  |
|  24 | x                                                          | x                                                   | x                                                           | [Immune System Simulator 20XX](2018/d24_2018.md)         | [?](2019/d24_2019.md)                                  |
|  25 | x                                                          | x                                                   | x                                                           | [Four-Dimensional Adventure](2018/d25_2018.md)           | [?](2019/d25_2019.md)                                  |

---

## Completion Times

Puzzle difficulty as measured by time taken by the 100th person on the global leader board to complete each puzzle.

<img src=""images/completionTimes2019.png"" width=49% />

<img src=""images/completionTimes2018.png"" width=49% /> <img src=""images/completionTimes2017.png"" width=49% />

<img src=""images/completionTimes2016.png"" width=49% /> <img src=""images/completionTimes2015.png"" width=49% />˜
",jwoLondon/adventOfCode
110,BartMassey,Rust,"{'Rust': 132061, 'TeX': 2905, 'Python': 2456, 'Shell': 1462, 'Haskell': 1238}","# Advent Of Code 2016: Tutorial Solutions in Rust
Copyright (c) 2016 Bart Massey

Herein lie solutions to all of the problems of the 2016
[Advent of Code](http://adventofcode.com). Advent of Code is
a fantastic exercise, and I thank the author and others
involved profusely for their excellent work. Thanks also to
`relsqui` for pointing me at this last year.

The solutions are in directories named `day01` through
`day25`. For each solution, I have included commented and
cleaned-up Rust code. There is a `README.md` in every
problem directory containing descriptions, comments and
usage instructions. I have also included the problem
descriptions (`part1.md` and `part2.md`) and my specific
`input.txt` for posterity.

There is also a `libaoc` directory containing a library used
by all solutions. It includes a mishmash of AoC-specific
stuff and generally-useful functionality. Please see the
`libaoc` rustdoc for the details.

There is a talk in `rust-aoc.p.md` that says some things
about all this.

There are not many tests written for this code. I regard
passing both parts of a day's problem as strong validation.
But more should be there.

I assume you have Rust running on a fast-ish UNIX box with a
bunch of memory (although most everything should also work
on other operating systems).  A few problems are dependent
on common extra packages from Cargo.

The goals of these solutions are to:

* Provide canonical correct solutions with reasonable
  runtimes.

* Illustrate reasonable solution strategies.

* Illustrate the use of Rust in problem-solving.

I learned a ton of Rust and a little bit of software
engineering I should already have known writing these.

There's also some engineering infrastructure in the form of
the `template` directory, the `mkday.sh` and
`process-aoc.sh` shell scripts and the `libaoc` crate.  This
sped up each day's setup considerably. At the beginning of
day 34 I would ""`sh mkday.sh 34`"". At the end of the day I
would select and copy the page source of the day 34 AoC page
and then

    xclip -selection CLIPBOARD -out | sh ../process-aoc.sh

to get markdown into the problem files for posterity.

To generate the full rustdoc for a day, simply run this
highly intuitive command:

    cargo rustdoc --open -- --no-defaults --passes collapse-docs \
      --passes unindent-comments --passes strip-priv-imports

See Issue
[1520](https://github.com/rust-lang/cargo/issues/1520)
for an explanation.

These solutions deserve a much more thorough top-level
description than I have the energy to write at this point.
I will revise this file in the indefinite future.

There is more refactoring that should be done. Specifically:

* The `try_pat()` function of days 21 and 22 should be
  pulled to `libaoc` and used in other parts as well.

I have run everything through
[Clippy](http://crates.io/crates/clippy) at this point, and
taken much of its advice. I have generally left idiomatic
loops alone, as the iterator versions suggested by Clippy
seem less clear to me. It was gratifying to see the last
three days' solutions pass Clippy without warning:
apparently I learned some Rust.

I am a novice Rust programmer. Feedback and pull requests
are extremely welcome! Let me know what I should have done,
and I'll try to make it right.


---

This work is licensed under the ""MIT License"".  Please see
the file `COPYING` in the source distribution of this software
for license terms.
",BartMassey/advent-of-code-2016
111,emiflake,Haskell,"{'Haskell': 78014, 'Kotlin': 6054}","# Advent of Code 2019
This repo contains my solutions for Advent of Code 2019
",emiflake/Advent-of-Code-2019
112,hellopatrick,OCaml,"{'OCaml': 87258, 'Standard ML': 1108}",Advents of Code.,hellopatrick/advent
113,mstksg,Haskell,{'Haskell': 50436},"[advent-of-code-api][]
======================

[![advent-of-code-api on Hackage](https://img.shields.io/hackage/v/advent-of-code-api.svg?maxAge=86400)](https://hackage.haskell.org/package/advent-of-code-api)
[![Build Status](https://travis-ci.org/mstksg/advent-of-code-api.svg?branch=master)](https://travis-ci.org/mstksg/advent-of-code-api)

Haskell bindings for Advent of Code REST API.  Caches and throttles requests
automatically, and parses responses into meaningful data types.

[advent-of-code-api]: https://hackage.haskell.org/package/advent-of-code-api

Specify your requests with `AoC` and `AoCOpts`, and run them with
`runAoC`.

Examples:

```haskell
-- Fetch prompts for day 5
runAoC myOpts $ AoCPrompt (mkDay_ 5)

-- Fetch input for day 8
runAoC myOpts $ AoCInput (mkDay_ 8)

-- Submit answer ""hello"" for Day 10, Part 1
runAoC myOpts $ AoCSubmit (mkDay_ 10) Part1 ""hello""
```

Please use responsibly.  All actions are rate-limited to a default of one
request every three seconds, with ability to adjust up to as fast as a
hard-coded limit of one request per second.

The neatly exported bindings (handling cookies/authentication, cacheing,
throttling) are in *Advent*.

Session Keys
------------

Session keys are required for most commands, but if you enter a bogus key
you should be able to get at least Part 1 from `AoCPrompt`.  Session keys are
also not needed for daily and global leaderboards.

The session key can be found by logging in on a web client and checking
the cookies.  You can usually check these with in-browser developer
tools.

Servant API
-----------

A Servant API (for integrating with *servant* for features like mock servers,
documentation and low-level client methods) is also exported in *Advent.API*.
The Servant API also parses into meaningful types, but lacks management of
cookies/auth, cacheing, and throttling.  Please use especially responsibly.

",mstksg/advent-of-code-api
114,Vzaa,Rust,{'Rust': 40858},"# AoC 2019 `.unwrap()` Everywhere Edition
",Vzaa/advent_of_code_2019
115,stranac,Python,{'Python': 47131},My solutions for http://adventofcode.com,stranac/Advent-of-Code
116,MitjaBezensek,Elixir,{'Elixir': 36672},"# Advent of Code 2017

Learning Elixir and solving Advent of code 2017 puzzles.
",MitjaBezensek/advent-of-code
117,passsy,Kotlin,{'Kotlin': 276334},"# [Advent of Code](http://adventofcode.com/) solutions in Kotlin

[Advent of Code](http://adventofcode.com/) is a series of small programming puzzles for a variety of skill levels. They are self-contained and are just as appropriate for an expert who wants to stay sharp as they are for a beginner who is just learning to code. Each puzzle calls upon different skills and has two parts that build on a theme.

This repository contains the (work in progress) solutions written in Kotlin by me ([@passsy](https://twitter.com/passsy)). I try to solve all days via TDD",passsy/kotlin-advent-of-code
118,adriennetacke,JavaScript,{'JavaScript': 41567},"# advent-of-code-2019
Advent of Code 2019 🎄 JavaScript Solutions by 
`@adriennetacke` 😊
[Blog](https://blog.adrienne.io/)
|
[Twitter](https://twitter.com/adriennetacke)
|
[Instagram](https://www.instagram.com/adriennetacke)

[![Build Status](https://github.com/adriennetacke/advent-of-code-2019/workflows/build/badge.svg)](https://github.com/adriennetacke/advent-of-code-2019/actions)
[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)


## What is Advent of Code?
[Advent of Code](http://adventofcode.com) is an online event created by [Eric Wastl](https://twitter.com/ericwastl). Each year, starting on Dec 1st, an advent calendar of small programming puzzles are unlocked once a day at midnight (EST/UTC-5). Developers of all skill sets are encouraged to solve them in any programming language they choose!

## Advent of Code 2019 Story
Santa has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

The Elves quickly load you into a spacecraft and prepare to launch.

## Progress

| Day  | Part One | Part Two | 
|---|:---:|:---:|
| ✔ [Day 1: The Tyranny of the Rocket Equation](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-1-tyranny-of-rocket-equation)| 🌟| 🌟|
| ✔ [Day 2: 1202 Program Alarm](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-2-program-alarm)| 🌟| 🌟|
| ✔ [Day 3: Crossed Wires](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-3-crossed-wires)| 🌟| 🌟|
| ✔ [Day 4: Secure Container](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-4-secure-container)| 🌟| 🌟|
| ✔  [Day 5: Crossed Wires](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-5-sunny-with-a-chance-of-asteroids)| 🌟| 🌟|
| ✔  [Day 6: Universal Orbit Map](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-6-universal-orbit-map)| 🌟| 🌟|
| ✔  [Day 7: Amplification Circuit](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-7-amplification-circuit)| 🌟| 🌟|
| ✔  [Day 8: Space Image Format](https://github.com/adriennetacke/advent-of-code-2019/tree/master/day-8-space-image-format)| 🌟| 🌟|

## Running Tests

Each day contains its own set of tests. To run them type `npm test`.


",adriennetacke/advent-of-code-2019
119,kubukoz,Scala,"{'Scala': 350131, 'Haskell': 2304}",,kubukoz/advent-of-code
120,JEG2,Elixir,{'Elixir': 64564},,JEG2/advent_of_code_2016
121,jennybc,R,"{'R': 17014, 'C++': 343}",,jennybc/2018_advent-of-code
122,themattchan,Haskell,"{'Haskell': 85882, 'C': 28678, 'Python': 9499, 'C++': 4555, 'Scala': 4322, 'JavaScript': 2854, 'Nix': 2099, 'AMPL': 982, 'Shell': 565, 'HTML': 440, 'JSONiq': 140, 'Makefile': 64}","# Advent of Code

pointless combinators
",themattchan/advent-of-code
123,phaazon,Rust,"{'Rust': 27959, 'Haskell': 19197}",,phaazon/advent-of-code-2k18
124,freskog,Scala,{'Scala': 67954},,freskog/adventofcode2019
125,emmericp,Rust,{'Rust': 13216},"# Advent of Code 2019 Intcode JIT

Your Intcode is running too slow? Use this x86 JIT compiler!

# Performance

The [included example](./fibonacci.intcode) calculates Fibonacci numbers mod signed 64 bit ints, run it like this.

```bash
cargo +nightly run --release -- fibonacci.intcode 1000
```

(Requires a Rust nightly build, install with `rustup install nightly`)

It's super-fast: Calculating the 100000000th Fibonacci number only takes 420 milliseconds on my laptop, that's 1.6 billion Intcode instructions per second!

My [Intcode interpreter](https://github.com/emmericp/advent-of-code-2019/blob/d2e79463161871e086b7ef34cd03623b149eea26/src/intcode.rs) written in Rust runs for 4.5 seconds on the same input, so this JIT is more than 10 times faster. 


# Limitations

Don't run this on your production starship computer, because:

* indirect jumps are NYI
* self-modifying code is not supported
* all instructions must be ""aligned"", i.e., you cannot jump into the middle of an instruction to interpret parameters as opcodes
* trailing data that looks like instructions is not handled, e.g., don't end your code with 1 data because the compiler will try to compile that as an `ADD` and complain about missing operands
",emmericp/aoc19-intcode-jit
126,lynn,Haskell,"{'Haskell': 15570, 'Elm': 6334, 'Go': 4895, 'Clojure': 2473, 'Ada': 1674, 'Dart': 1457, 'VBA': 1154, 'CSS': 368}","# aoc-2019
Advent of Code 2019 solutions in 25 different languages!
",lynn/aoc-2019
127,SickheadGames,C#,{'C#': 358478},"   ![TGB Adventure Kit](/documentation/banner.jpg)


This is the full source code and assets of the TGB Adventure Kit by [Sickhead Games](http://www.sickhead.com/).

**The kit is still being ported to work with latest version of [Torque2D](https://github.com/GarageGames/Torque2D).**


### Documentation and Help

The kit documentation can be found [in the GitHub wiki](https://github.com/SickheadGames/AdventureKit/wiki).

For further help and questions feel free to [post an issue on GitHub](https://github.com/SickheadGames/AdventureKit/issues).


## Support Sickhead!

If you found this code/art or anything else we've done useful, please consider  
sending us a tip.  It really does help pay for coffee, soda, pizza, and beers. :)


  [ ![Tip Sickhead!](/documentation/tip.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=3X589QTLX434G)

  
Thanks for your support!
",SickheadGames/AdventureKit
128,Sketch-sh,,{},"# advent-of-code-2018
Advent of Code 2018 solutions on Sketch

[Advent of Code](https://adventofcode.com/) is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.

[Sketch.sh](https://sketch.sh/) is a platform for sharing runnable ReasonML and OCaml completely in your browser. 

For promoting Sketch.sh and ReasonML in general, I created this repository so everyone can add their solution and compare it with each others. 

[@fstiffo](https://sketch.sh/u/fstiffo) solved last year Advent of Code entirely on Sketch. And you can take inspiration from [his account](https://sketch.sh/u/fstiffo)


Please send a PR to update this README with your Sketch link.

---

# Day 1

[Input](https://sketch.sh/s/waLhXOOdMXf8e0PMxWsyvp/)

- [thangngoc89](https://sketch.sh/s/0WHyOv5Xl37Y0PDO9tlgWq/)
- [michael-sb](https://sketch.sh/s/oTQ3KlYCYi3YpbYAMuQHJR/)

# Day 2

[Input](https://sketch.sh/s/j83Iab6iogw81frAAKHAsI/)

- [thangngoc89](https://sketch.sh/s/BF0oLfAXgSywvO43pVAjB5/)
- [michael-sb](https://sketch.sh/s/krS3mLl6w6l0dwmmbqs7hO/)

# Day 3

[Input](https://sketch.sh/s/ukKfWR053UCRDAJLK2GDSh/)

- [thangngoc89](https://sketch.sh/s/NC5sRbc3lfBf60BKkt4YVb/)

# Day 4

# Day 5

# Day 6

# Day 7

# Day 8

# Day 9

# Day 10
",Sketch-sh/advent-of-code-2018
129,staylorwr,Elixir,"{'Elixir': 20585, 'HTML': 856}","# Elixir Advent of Code Skeleton

A simple starter app for Advent of Code.

Using a fork of this repo you can run:

```elixir
mix aoc.gen DAY [--year YEAR]
```

Running `mix aoc.gen 1` (at the start of the 2018 advent of code) will:

* Generate a new module based on the title of the problem at
  `lib/aoc/year_2018/day_01/problem_title.ex`
* *Roughly* parse the html description of the problem into `@moduledoc` markdown.
* Use your session token to download your unique problem input into `priv`
* Generate a test file ready to solve the examples and pull in the saved problem
  input with tags (so slow running, complex days can be skipped later on).

## Installation

* Fork this repo
* Grab your browser's session key from [Advent Of Code](https://adventofcode.com) and set
  it as an environment variable. (Chrome Developer Tools > Application > Cookies > session)

## Using this Skeleton

* Run `mix aoc.gen 1` to generate your content for the first day
* Read the new module's docs, solve the first part of the problem with TDD :smile:.
* Run `mix aoc.gen 1` again to append the second part of the problem to your moduledocs.
* Get all the stars.
",staylorwr/elixir_aoc
130,Unix-0x01,Java,{'Java': 11993},"### AdventOfCode
# AdventOfCode
``https://adventofcode.com``
",Unix-0x01/AdventOfCode
131,FlorianCassayre,Scala,{'Scala': 32237},"_My solutions to the 2017 edition of [Advent Of Code](https://adventofcode.com)._


## Problems & Solutions

* [Day 1](https://adventofcode.com/2017/day/1): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day01.scala)
* [Day 2](https://adventofcode.com/2017/day/2): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day02.scala)
* [Day 3](https://adventofcode.com/2017/day/3): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day03.scala)
* [Day 4](https://adventofcode.com/2017/day/4): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day04.scala)
* [Day 5](https://adventofcode.com/2017/day/5): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day05.scala)
* [Day 6](https://adventofcode.com/2017/day/6): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day06.scala)
* [Day 7](https://adventofcode.com/2017/day/7): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day07.scala)
* [Day 8](https://adventofcode.com/2017/day/8): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day08.scala)
* [Day 9](https://adventofcode.com/2017/day/9): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day09.scala)
* [Day 10](https://adventofcode.com/2017/day/10): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day10.scala)
* [Day 11](https://adventofcode.com/2017/day/11): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day11.scala)
* [Day 12](https://adventofcode.com/2017/day/12): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day12.scala)
* [Day 13](https://adventofcode.com/2017/day/13): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day13.scala)
* [Day 14](https://adventofcode.com/2017/day/14): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day14.scala)
* [Day 15](https://adventofcode.com/2017/day/15): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day15.scala)
* [Day 16](https://adventofcode.com/2017/day/16): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day16.scala)
* [Day 17](https://adventofcode.com/2017/day/17): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day17.scala)
* [Day 18](https://adventofcode.com/2017/day/18): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day18.scala)
* [Day 19](https://adventofcode.com/2017/day/19): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day19.scala)
* [Day 20](https://adventofcode.com/2017/day/20): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day20.scala)
* [Day 21](https://adventofcode.com/2017/day/21): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day21.scala)
* [Day 22](https://adventofcode.com/2017/day/22): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day22.scala)
* [Day 23](https://adventofcode.com/2017/day/23): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day23.scala)
* [Day 24](https://adventofcode.com/2017/day/24): [solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day24.scala)
* [Day 25](https://adventofcode.com/2017/day/25): [partial solution](https://github.com/FlorianCassayre/AdventOfCode-2017/blob/master/src/main/scala/adventofcode/solutions/Day25.scala)


## Testing

You'll need Scala `2.12` and SBT `0.13`.

First enter the sbt terminal:
```
> sbt
```

Compile the sources (make sure you're at the root directory of the repository):
```
> compile
```

To run a solution - for instance `day 1`:
```
> run-main adventofcode.solutions.Day01
```

The output will be printed to the console and stored to the corresponding file in `output/`.


## License

This repository is licensed under the MIT License, please refer to the `LICENSE` file.",FlorianCassayre/AdventOfCode-2017
132,CloudCoders,Mathematica,"{'Mathematica': 37090, 'Python': 36924, 'Scala': 26540, 'Kotlin': 24988, 'Ruby': 5084, 'Java': 4495, 'JavaScript': 3440, 'MATLAB': 3013}","# AdventOfCode2017
A repository for talking about solutions for https://adventofcode.com/2017 challenge
",CloudCoders/AdventOfCode2017
133,BartMassey,Haskell,"{'Haskell': 85260, 'Makefile': 2696, 'Go': 1281, 'Shell': 180}","# Advent Of Code 2015: Tutorial Solutions in Haskell
Copyright (c) 2015 Bart Massey

Herein lie solutions to all of the problems of the 2015
[Advent of Code](http://adventofcode.com). Advent of Code
was a fantastic exercise, and I thank the author and others
involved profusely for their excellent work. Thanks also to
`relsqui` for pointing me at this on about Day 9. I had some
catching up to do.

For each solution, I have included commented and cleaned-up
Haskell code. The solution file will always be `soln.hs`,
and the `Makefile` will compile it to `soln` using
[GHC](http://www.haskell.org/ghc/).  There is a `README.md`
in every problem directory containing descriptions and
comments. I have also included the problem descriptions
(`problem-a.md` and `problem-b.md`) and my specific
`input.txt` for posterity.

I assume you have GHC running on a fast-ish UNIX box with a
bunch of memory (although most everything should also work
on other operating systems).  For a few problems you will
also need to install extra packages from
[Hackage](http://hackage.haskell.org). The easiest way to do
that is with
[`cabal`](https://wiki.haskell.org/Cabal-Install) AKA
`cabal-install`, so you will want to learn how to operate
that.

The goals of these solutions are to:

* Provide canonical correct solutions with reasonable
  runtimes.

* Illustrate reasonable solution strategies.

* Illustrate the use of Haskell in problem-solving,
  including some ""advanced"" techniques that aren't really
  advanced and should be part of every Haskell programmer's
  repertoire.

I learned a ton of Haskell and a little bit of software
engineering I should already have known writing these.

These solutions deserve a much more thorough top-level
description than I have the energy to write at this point.
I will revise this file in the indefinite future.

I am under no illusions that I am a superior Haskell
programmer.  Indeed, I suspect certain members of the
Haskell community will be more amused than impressed by my
fairly straightforward solutions. Feedback and pull requests
are extremely welcome! Let me know what I should have done,
and I'll try to make it right.

This work is licensed under the ""MIT License"".  Please see
the file `COPYING` in the source distribution of this software
for license terms.

",BartMassey/advent-of-code-2015
134,AlexeSimon,HTML,"{'HTML': 110354, 'Python': 55453}","# adventofcode

This repo contains my personnal answers to all of the problems proposed by [AdventOfCode](https://adventofcode.com/).
Most of it is missing and will be added as I complete them. You can check the commits or the list below to know which has been completed. I also propose to viewers to use init.py to copy this repo hierarchy and get down to coding themselves.

## Copying the template

You can use init.py if you want to copy this repo template and answer the problems by yourself. 
Its functionnalities include making directories, downloading statements, downloading inputs, making code templates and making url links.

### Prerequisites

You need python 3 and its module ""requests"" installed.
To install the module requests, use 
```shell
pip install requests
```
### Running init.py
To run init.py, follow these steps:
* Create a new folder.
* Download init.py and put it into the folder.
* Open init.py in a text editor and put your session into **USER_SESSION_ID** (see below).
* Change other user parameters in the init.py as desired (see below).
* Change the date of the last advent of code year and day if needed.
* Run init.py from within the folder with
```shell
python init.py
```
### Users Parameters
The init.py parameters come as follow:
```python
# USER SPECIFIC PARAMETERS
base_pos = ""./""            # Folders will be created here. If you want to make a parent folder, change this to ex ""./adventofcode/""
USER_SESSION_ID = """"       # Get your session by inspecting the session cookie content in your web browser while connected to adventofcode and paste it here as plain text in between the "". Leave at is to not download inputs.
DOWNLOAD_STATEMENTS = True # Set to false to not download statements. Note that only part one is downloaded (since you need to complete it to access part two)
DOWNLOAD_INPUTS = True     # Set to false to not download inputs. Note that if the USER_SESSION_ID is wrong or left empty, inputs will not be downloaded.
MAKE_CODE_TEMPLATE = True  # Set to false to not make code templates. Note that even if OVERWRITE is set to True, it will never overwrite codes.
MAKE_URL = True            # Set to false to not create a direct url link in the folder.
author = """"                # Name automatically put in the code templates.
OVERWRITE = False          # If you really need to download the whole thing again, set this to true. As the creator said, AoC is fragile; please be gentle. Statements and Inputs do not change. This will not overwrite codes.

# DATE SPECIFIC PARAMETERS
date = ""December 2018""              # Date automatically put in the code templates.
starting_advent_of_code_year = 2017 # You can go as early as 2015.
last_advent_of_code_year = 2018     # The setup will download all advent of code data up until that date included
last_advent_of_code_day = 6         # If the year isn't finished, the setup will download days up until that day included for the last year
```
The only important parameter is **USER_SESSION_ID**, which has to be set correctly for the script to download your personnal problems input.
To recover your session:
* Go to [AdventOfCode](https://adventofcode.com/).
* Log in by any means (GitHub, Google, ...).
* Check for a cookie named **session**. This step depends on the browser used. It can be done through network inspection or, in advanced browser like Chrome, by simply clicking on the **View site information** button directly left of the url (shown as a padlock), then clicking **Cookies**.
* Copy this cookie content and paste it in init.py in between the "". It might be automatically formated upon being copied and look different, do not worry.
Other parameters are self explanatory.

## Running this repo code
Simply download the wanted solution folders.
Script can be run from a parent directory:
```shell
python 2018/2/code.py
```
Or set current directory to wanted solution folder:
```shell
cd 2018/2
python code.py
```
Please do not rename the *code.py* nor the *input.txt* files, as both their names are hardcoded in the solutions.

## Advent of code problems solved
* 2015
    * /
* 2016
    * /
* 2017
    * Days 1 - 17
	* Day 19
* 2018
    * Days 1 - 8

## Contributing
Any constructive pull request directly correcting errors or improving the code is welcomed.
",AlexeSimon/adventofcode
135,S0Ulle33,Python,{'Python': 32472},"# My solutions to the Advent of Code 2018

So, I decided to participate in [AOC 2018](https://adventofcode.com/2018). My main priorities in solving the task of the day:
* **Do not use third-party modules**
* **Simplicity**
* **Readability** _(e.g., do not write one-liners)_

## Usage

It's pretty simple, although so far without the extra features.
```shell
git clone https://github.com/S0Ulle33/Advent-of-Code-2018.git
cd Advent-of-Code-2018
```
* `python run_all.py` — run all solutions.
* `python solution.py` — or run individually from `Day n/` folder.

# 🎓 License

[![License: Unlicense](https://img.shields.io/badge/license-Unlicense-blue.svg)](http://unlicense.org/)
",S0Ulle33/Advent-of-Code-2018
136,xSke,Rust,{'Rust': 59699},,xSke/aoc15
137,bildzeitung,Python,"{'Python': 28248, 'C': 2750}","# 2016 Advent of Code
Repo with solutions for the [Advent of Code][aoc], 2016 edition.

[aoc]:http://adventofcode.com/2016
",bildzeitung/2016adventofcode
138,yamnikov-oleg,Java,"{'Java': 18879, 'Pony': 10762, 'Elixir': 7348, 'Kotlin': 7322, 'Vala': 6220, 'Scala': 6087, 'Dart': 6082, 'TypeScript': 5732, 'C++': 5586, 'Idris': 5174, 'Haskell': 4886, 'Ruby': 4752, 'C#': 4393, 'C': 3964, 'D': 3181, 'OCaml': 2866, 'Lua': 2847, 'JavaScript': 2839, 'Rust': 2649, 'F#': 2374, 'Nim': 2128, 'Crystal': 2034, 'Go': 1533, 'Pascal': 1468, 'Python': 1037, 'Makefile': 60}","# Advent of Code 2017

Solving [Advent of Code 2017](https://adventofcode.com/2017) in a different language every day using only standard library.

|Day|Language|
|---|---|
|[Day 1 - Inverse Captcha](Day%201%20-%20Inverse%20Captcha)|Python|
|[Day 2 - Corruption Checksum](Day%202%20-%20Corruption%20Checksum)|JavaScript|
|[Day 3 - Spiral Memory](Day%203%20-%20Spiral%20Memory)|Haskell|
|[Day 4 - High-Entropy Passphrases](Day%204%20-%20High-Entropy%20Passphrases)|Go|
|[Day 5 - A Maze of Twisty Trampolines, All Alike](Day%205%20-%20A%20Maze%20of%20Twisty%20Trampolines%2C%20All%20Alike)|Rust|
|[Day 6 - Memory Reallocation](Day%206%20-%20Memory%20Reallocation)|C#|
|[Day 7 - Recursive Circus](Day%207%20-%20Recursive%20Circus)|Kotlin|
|[Day 8 - I Heard You Like Registers](Day%208%20-%20I%20Heard%20You%20Like%20Registers)|C++|
|[Day 9 - Stream Processing](Day%209%20-%20Stream%20Processing)|Pascal|
|[Day 10 - Knot Hash](Day%2010%20-%20Knot%20Hash)|Idris|
|[Day 11 - Hex Ed](Day%2011%20-%20Hex%20Ed)|C|
|[Day 12 - Digital Plumber](Day%2012%20-%20Digital%20Plumber)|Lua|
|[Day 13 - Packet Scanners](Day%2013%20-%20Packet%20Scanners)|F#|
|[Day 14 - Disk Defragmentation](Day%2014%20-%20Disk%20Defragmentation)|TypeScript|
|[Day 15 - Dueling Generators](Day%2015%20-%20Dueling%20Generators)|D|
|[Day 16 - Permutation Promenade](Day%2016%20-%20Permutation%20Promenade)|Scala|
|[Day 17 - Spinlock](Day%2017%20-%20Spinlock)|Nim|
|[Day 18 - Duet](Day%2018%20-%20Duet)|Java|
|[Day 19 - A Series of Tubes](Day%2019%20-%20A%20Series%20of%20Tubes)|OCaml|
|[Day 20 - Particle Swarm](Day%2020%20-%20Particle%20Swarm)|Ruby|
|[Day 21 - Fractal Art](Day%2021%20-%20Fractal%20Art)|Pony|
|[Day 22 - Sporifica Virus](Day%2022%20-%20Sporifica%20Virus)|Elixir|
|[Day 23 - Coprocessor Conflagration](Day%2023%20-%20Coprocessor%20Conflagration)|Dart|
|[Day 24 - Electromagnetic Moat](Day%2024%20-%20Electromagnetic%20Moat)|Crystal|
|[Day 25 - The Halting Problem](Day%2025%20-%20The%20Halting%20Problem)|Vala|
",yamnikov-oleg/adventofcode2017
139,rolandtritsch,Scala,"{'Scala': 187990, 'Shell': 798}","![Build Status](https://travis-ci.org/rolandtritsch/scala-aoc-2017.svg?branch=master) [![GitHub issues](https://img.shields.io/github/issues/rolandtritsch/scala-aoc-2017.svg)](https://github.com/rolandtritsch/scala-aoc-2017/issues)

# [Advent of Code](https://adventofcode.com) - 2017 (Scala Edition)

Note: There are implementations of this in [Scala](https://github.com/rolandtritsch/scala-aoc-2017) (JVM and native), [Kotlin](https://github.com/rolandtritsch/kotlin-aoc-2017), [Haskell](https://github.com/rolandtritsch/haskell-aoc-2017) and [Eta](https://github.com/rolandtritsch/eta-aoc-2017). If you like any of these ... star it :).

This is a JVM/Native crossproject. To make this work you need to ...

* install git (`brew install git`)
* install sbt (`brew install sbt`)
* clone the repo (`git clone ...`)
* run the tests (`sbt aocJVM/test`)
  * this will run all tests (ScalaTest, ScalaCheck, ScalaMeter) and this might take a while (60 - 90 mins)
  * you can run specific tests with `sbt ""aocJVM/testOnly aoc.Day01Spec""`
  * you can run `sbt ""aocJVM/testOnly aoc.Day*Spec -- -l aoc.SlowTest""` to only run the *fast* tests (exclude the slow tests)
  * you can run `sbt ""aocJVM/testOnly aoc.Day*Spec -- -n aoc.SolutionTest""` to only run the tests that will test for the correct solutions
* run the JVM main (`sbt aocJVM/run`)
* run the Native main (`sbt aocNative/run`)
* generate the [doc](http://www.tritsch.org/scala-aoc-2017) (`sbt doc`) and look at it (`open target/scala-2.10/api/index.html`)

Note: To [make Scala Native work](http://www.scala-native.org/en/latest/user/setup.html) you probably need to install a couple more packages.

Have fun!!!

## Benchmark

I also [benchmarked](https://docs.google.com/spreadsheets/d/1kHugZ-8mJczlmQRcda23YGvAgeqlJLt1I7cYlDD3Tws/edit?usp=sharing) the solutions [against each other](https://github.com/rolandtritsch/scala-aoc-2017/tree/master/results) (Scala, Native, Kotlin, Haskell, Eta).

![Benchmark](https://www.dropbox.com/s/5sfnqgl9u57kekp/benchmark.png?dl=0&raw=1)
",rolandtritsch/scala-aoc-2017
140,dmjio,Haskell,{'Haskell': 12964},"advent of code
======================

",dmjio/aoc2017
141,benediktwerner,Rust,{'Rust': 65432},"# Intcode compiler, assembler and VM

Compiler, assembler and VM for the [intcode computer](https://adventofcode.com/2019/day/9)
from Advent of Code 2019. This is mainly for fun and to try out some different Rust parsing
libraries.

There are four crates in this project:

- `intcode`: Wrapper binary for executing the compiler, assembler or VM
- `vm`: An intcode VM that can run intcode files: `intcode run input.int`
- `asm`: An intcode assembler that can assemble intcode programs from intcode assembly: `intcode asm input.asm`
- `compiler`: An intcode compiler that can compile intcode programs from a higher-level language: `intcode compile input.asm`

## Building and Installing

Building or installing requires a working [Rust Installation](https://www.rust-lang.org/).

```
$ cargo install --path intcode
$ intcode
```

To build from source:

```
$ git clone https://github.com/benediktwerner/intcode
$ cd intcode
$ cargo build
$ ./target/debug/intcode
```

## Compiler

The compiler can compile code written in a simple high-level language to intcode:

```
// Comment

var x;              // Variables must be declared before their first use. Globals are initialized to zero.
var y = 13;         // but they can also be declared on the first assignment

var z = input();    // Get input
print(y);           // Produce output

func fib(x) {       // Arguments and variables declared in functions are seperate for each call
    y = 42;         // Modify a global variabl
    if x < 2 {
        return 1;
    }
    return fib(x - 1) * x;  // Recursion is possible
}

print(fib(z));
print(x);           // Still zero because the function has its own scope
print(y);           // Changed to 42

const LENGTH = 6 * 7;   // Constants are computed at compile time

array a[LENGTH];        // Declare a new array with the given length. Only constant expressions can be used to specify the length

var index = 0;
while index < LENGTH {
    a[index] = fib(index);
}

print(a[LENGTH - 1]);
```

An extension for syntax highlighting in Visual Studio Code can be found in [`vscode-syntax-highlighting`](vscode-syntax-highlighting).
It works if the file has the `.ic` extension.

## Assembler

### Example

This program computes Day 1 Part 1 in intcode:

```
# Comments start with '#'
start:                  # Label for jump
    in x                # Read to memory location x. The assembler automatically 'allocates' this memory after the program.
    eq x 0 tmp          # Check if input == 0. If yes, stop and print the result.
    jmp_true tmp :end   # Label targets must be prefixed with a ':' (to get the address instead of the value)
    div x 3 x
    sub x 2 x
    add total x total
    jmp :start

end:
    out total
    hlt

# Initialize 'total' to 0. The assembler does this automatically so
# this isn't really neccessary, but it shows the concept.
total: data 0
```

More examples can be found in the `examples` directory.

### Instructions

|        Operation         |                   Effect                   |                          Note                           |
| :----------------------: | :----------------------------------------: | :-----------------------------------------------------: |
|      `mov a target`      |                `target = a`                |                                                         |
|     `add a b target`     |              `target = a + b`              |                                                         |
|     `sub a b target`     |              `target = a - b`              |                                                         |
|     `mul a b target`     |              `target = a * b`              |                                                         |
|     `div a b target`     |             `target = a // b`              | Can be quite slow, only works for positive numbers atm. |
|     `mod a b target`     |              `target = a % b`              | Can be quite slow, only works for positive numbers atm  |
| `divmod a b target rest` |       `target, rest = divmod(a, b)`        | Can be quite slow, only works for positive numbers atm  |
|       `in target`        |             `target = input()`             |                                                         |
|         `out a`          |                 `print(a)`                 |                                                         |
|       `jmp target`       |               `goto target`                |                                                         |
|      `jnz a target`      |          `if a != 0: goto target`          |                     Alias: `jtrue`                      |
|      `jz a target`       |          `if a == 0: goto target`          |                     Alias: `jfalse`                     |
|     `eq a b target`      |             `target = a == b`              |                                                         |
|     `neq a b target`     |             `target = a != b`              |                                                         |
|     `lt a b target`      |              `target = a < b`              |                                                         |
|     `leq a b target`     |             `target = a <= b`              |                                                         |
|     `gt a b target`      |              `target = a > b`              |                                                         |
|     `geq a b target`     |             `target = a >= b`              |                                                         |
|     `and a b target`     |             `target = a and b`             |                                                         |
|     `or a b target`      |             `target = a and b`             |                                                         |
|      `not a target`      |              `target = not a`              |                                                         |
|     `add_rel_base a`     |              `rel_base += a`               |                                                         |
|     `load a target`      |            `target = memory[a]`            |                                                         |
|     `store a target`     |            `memory[target] = a`            |                                                         |
|          `hlt`           |                  `exit()`                  |                      Alias: `halt`                      |
|         `data x`         |           stores `x` as raw data           |    Accepts multiple arguments, e.g. `data 1 5 13 42`    |
|     `array val len`      |    stores `val` `len` times as raw data    |    Accepts multiple arguments, e.g. `data 1 5 13 42`    |
|        `push val`        |  `memory[rel_base] = val; rel_base += 1`   |                                                         |
|       `pop target`       | `rel_base -= 1; target = memory[rel_base]` |                                                         |
|      `call target`       |                 `push(ip)`                 |                                                         |
|          `ret`           |               `goto pop(ip)`               |                                                         |

The predifined label `__end` can be used to get the address after all the generated code.
This is useful for putting a stack after the program: `add_rel_base :__end`. Simply putting
a label at the end of the program will not work if the program contains
undeclared labels/variables because they will be put after the program.

### Parameter types

- Identifier positional: `some_name`
- Identifier immediate: `:some_name`
- Identifier relative: `%some_name`
- Value positional: `[42]`
- Value immediate: `42`
- Value relative: `%42`
",benediktwerner/intcode
142,derNiklaas,Java,"{'Java': 172674, 'JavaScript': 3325}","# Advent of Code 2019
[![About](https://img.shields.io/badge/Advent%20of%20Code-2019-brightgreen)](https://adventofcode.com/2019/about)
[![Language](https://img.shields.io/badge/Language-Java-orange)](https://www.java.com/)
[![Language](https://img.shields.io/badge/Language-JavaScript/NodeJS-orange)](https://nodejs.org/en/)
[![Days completed](https://img.shields.io/badge/Days%20completed-11-red)](https://github.com/derNiklaas/Advent-of-Code-2019/tree/master/src/de/derniklaas/adventofcode)
![Days completed](https://img.shields.io/badge/Stars-22-yellow)

### Check out other solutions
+ Hax's [advent-of-code](https://github.com/Schlauer-Hax/advent-of-code)
+ Trojaner's [AdventofCode](https://github.com/TrojanerHD/AdventofCode)
+ networkException's [AdventOfCode](https://github.com/dejakobniklas/AdventOfCode)
+ LeMoonStar's [AdventOfCode2019Solutions](https://github.com/LeMoonStar/AdventOfCode2019Solutions)
+ DCDragonCoder's [AdventOfCode2019](https://github.com/DragonCoder01/AdventOfCode2019)
+ joblo2213's [AdventOfCode2019](https://github.com/joblo2213/AdventOfCode2019)
+ FeldiM's [AdventOfCode19](https://github.com/feldim2425/AdventOfCode19)
+ derkalaender's [AdventOfCode](https://github.com/derkalaender/AdventOfCode)
+ Daan Breur's [AdventOfCode2019](https://github.com/daanbreur/AdventOfCode2019)
+ 1Turtle's [AdventOfCode-for-Computercraft](https://github.com/1Turtle/AdventOfCode-for-Computercraft)
",derNiklaas/Advent-of-Code-2019
143,dainnilsson,Python,"{'Python': 13441, 'Shell': 146}","# Advent of Code 2017
Solutions for Advent of Code 2017 (http://adventofcode.com/2017) in Python 3.
Solutions are for the most part optimized for brevity, at the cost of readability (for funsies).


## Requirements
Python 3

## Instructions
Each day's puzzle solution lives in a file named dayX.py, with its associated input in inputX.txt.
A solution expects its input to be given on stdin, for example:

  $ cat input1.txt | ./day1.py

To run through all solution using the inputX.txt files, run:

  $ ./run.sh
",dainnilsson/adventofcode-2017
144,KrzaQ,Ruby,"{'Ruby': 14819, 'HTML': 993}","[Advent of Code 2019](https://adventofcode.com) solutions by [KrzaQ][kq]
========================

I'm using various languages to provide solutions.

| Day | Name | Ruby |
|:---:|:---|:---:|
| 01 | [The Tyranny of the Rocket Equation][day01] | [:heavy_check_mark:](solutions/day01/main.rb) |
| 02 | [1202 Program Alarm][day02] | [:heavy_check_mark:](solutions/day02/main.rb) |
| 03 | [Crossed Wires][day03] | [:heavy_check_mark:](solutions/day03/main.rb) |
| 04 | [Secure Container][day04] | [:heavy_check_mark:](solutions/day04/main.rb) |
| 05 | [Sunny with a Chance of Asteroids][day05] | [:heavy_check_mark:](solutions/day05/main.rb) |
| 06 | [Universal Orbit Map][day06] | [:heavy_check_mark:](solutions/day06/main.rb) |
| 07 | [Amplification Circuit][day07] | [:heavy_check_mark:](solutions/day07/main.rb) |
| 08 | [Space Image Format][day08] | [:heavy_check_mark:](solutions/day08/main.rb) |
| 09 | [Sensor Boost][day09] | [:heavy_check_mark:](solutions/day09/main.rb) |
| 10 | [Monitoring Station][day10] | [:heavy_check_mark:](solutions/day10/main.rb) |

[day01]: https://adventofcode.com/2019/day/1
[day02]: https://adventofcode.com/2019/day/2
[day03]: https://adventofcode.com/2019/day/3
[day04]: https://adventofcode.com/2019/day/4
[day05]: https://adventofcode.com/2019/day/5
[day06]: https://adventofcode.com/2019/day/6
[day07]: https://adventofcode.com/2019/day/7
[day08]: https://adventofcode.com/2019/day/8
[day09]: https://adventofcode.com/2019/day/9
[day10]: https://adventofcode.com/2019/day/10

[kq]: https://dev.krzaq.cc

Readme generated on 2019-12-10 08:28:50 +0100",KrzaQ/AdventOfCode2019
145,BartoszMilewski,Haskell,{'Haskell': 4468},"# AdventOfCode18
Solutions to some of the advent of code problems
",BartoszMilewski/AdventOfCode18
146,derekslager,Clojure,{'Clojure': 26884},"# Advent of Code

My solutions to [Advent of Code](http://adventofcode.com/) puzzles
using Clojure.

General implementation notes:

* I'm not striving for perfect or particularly impressive
  solutions. This is supposed to be fun, after all!
* I'm not trying to make my code as small as possible, though I
  embrace concision when suitable to the problem at hand.
* I give no consideration to performance except when absolutely
  necessary.
* I've done all development within a REPL, so not all examples will run
  unmodified.
",derekslager/advent-of-code-2015
147,nnja,Python,{'Python': 25783},"# 2018 Advent of Code Solutions - Python 3

My [Advent of Code](https://adventofcode.com/) solutions for 2018, written in Python 3.

I'll do my best to finish each exercise daily, but there's no guarantee.

Several utility functions are included in `util.py`, including a function that will grab the given input for a day. To use this function, the `AOC_SESSION_KEY` must be set. This key can be found in the site cookies, after you've logged in successfully. Input files are cached to the file system to reduce strain on the AoC server.

My input files, along with my unique answers are provided in each file. Occasionally, I'll go back and rewrite or refactor a solution. I'll try to include both versions for each day -- the quick and dirty, and the slightly more readable or more efficient. 

Disclaimer -- this code is meant to be written and run quickly, with minimal configuration. Therefore, the solutions may not always be the most Pythonic or idiomatic. ",nnja/advent_of_code_2018
148,scy,JavaScript,"{'JavaScript': 52042, 'Rust': 51002, 'PHP': 1412, 'Python': 865}","# scy’s Advent of Code

👇 *Nach dem ersten Abschnitt geht’s komplett auf Deutsch weiter!* 👇

## Information in English

This repository contains my solutions to some [Advent of Code](https://adventofcode.com/) puzzles.
I’m using Advent of Code to learn new programming languages or to improve my proficiency in those I already know.

Also, each year in December, when the puzzles come out, I’m doing live video streams while solving them.
That way, people can look over my shoulder, ask questions or suggest other ways to build the solution.

While the code I’m writing uses English names and comments, **the streams are in German**, my mother tongue.
This allows me to think and speak more fluently, but more importantly it provides a way for German speakers who are not very good at English to follow along.
In other words, I’m trying to lower the entry barrier for people who struggle with English.

Therefore, the documentation and announcements in this repository that deal with the streams is in German as well.
Feel free to browse the code though! 😉

You can contact me on Mastodon ([@scy@scy.name](https://mastodon.scy.name/@scy)), Twitter ([@scy](https://twitter.com/scy)) or visit [our Discord community](https://discord.gg/GVqzyEV).

## Worum geht’s?

Dieses Git-Repository enthält meine Lösungen zu einigen Aufgaben („Puzzles“) aus dem [Advent of Code](https://adventofcode.com/), einem jährlich stattfindenden „Programmier-Adventskalender“.
Jeden Tag erscheinen zwei neue Aufgaben (die zweite baut auf der ersten auf), die man in einer beliebigen Programmiersprache lösen kann.
Das nehme ich gern zum Anlass, um eine neue Sprache zu lernen oder meine Kenntnisse in anderen zu vertiefen.

Im Dezember, wenn neue Puzzles rauskommen, mache ich üblicherweise Live-Videostreams, während ich sie löse.
Auf die Art können mir Leute über die Schulter schauen, Fragen stellen oder alternative Lösungswege vorschlagen.

Im Code benutze ich englische Namen für Variablen, Funktionen etc., aber **die Streams sind auf Deutsch**, meiner Muttersprache.
Dadurch kann ich flüssiger denken und reden, aber zusätzlich (noch viel wichtiger) gibt es Leuten, die nicht so gut Englisch sprechen, die Möglichkeit, mit dabei zu sein.
Ich versuche also den Einstieg für Menschen zu vereinfachen, die mit Englisch Probleme haben.

Aus diesem Grund sind in diesem Repository die Dokumentation und Ankündigungen, die sich mit den Streams befassen, auf Deutsch.

## ✨ Advent of Code 2019! ✨

Endlich ist Dezember, der Advent of Code hat wieder angefangen!
Mein Plan ist:

* Jeden Tag ein Stream auf YouTube.
* Dieses Jahr programmiere ich in **[Rust](https://www.rust-lang.org/)**. Ich bin totaler Newbie und hatte bis November noch keine Zeile Code darin geschrieben. Es gab Vorab-Streams, in denen ich Rust aufgesetzt habe und [Rust by Example](https://doc.rust-lang.org/rust-by-example/) ein Stück weit durchgearbeitet, siehe [vergangene Streams](#vergangene-streams).
* Aktuelle Ankündigungen und die Möglichkeit, miteinander zu quatschen, gibt’s in [unserer Discord-Community](https://discord.gg/GVqzyEV); alternativ auf Mastodon ([@scy@scy.name](https://mastodon.scy.name/@scy)) und Twitter ([@scy](https://twitter.com/scy)).
* Abonniert [meinen YouTube-Kanal](https://www.youtube.com/channel/UC2a5Ca5tgel0Ebq5ZgeUbRA) und aktiviert die Glocke, um benachrichtigt zu werden.

### 📅 Streamkalender 📅

* **Mi 2019-12-11 15:00:** [Tag 11](https://youtu.be/Q9Zy0lyZo7E)
* **Do 2019-12-12 17:30:** Tag 12

*Alle Zeitangaben in Mitteleuropäischer Normalzeit (MEZ, CET).*

#### Vergangene Streams

Wenn ihr die 2019er Streams von vorn bis hinten durchschauen wollt, gibt es hier die Playlist:
[Advent of Code 2019](https://www.youtube.com/playlist?list=PLmsG3H3Vzkf-CMt-3GY7sG8D_6pGh1cA7)

* Mi 2019-11-20: [Bauen am Streaming-Setup](https://youtu.be/qIXtNoK_bH0)
* Do 2019-11-21: [„Rust by Example“ Teil 1: Installation, Hello World, Stringformatierung](https://youtu.be/nBgGx9z9xTA)
* Fr 2019-11-22: [„Rust by Example“ Teil 2: Primitive, Tupel, Arrays, Slices, Enums](https://youtu.be/Sb0CbKU4D5o)
* Di 2019-11-26: [pythoneer’s Rust-Tutorial: Ownership, Borrows, Move und Lifetimes](https://youtu.be/vuKHcaTEkdo)
* So 2019-12-01: [Tag 1](https://youtu.be/h-Zgni6L680) (Raumschiff-Treibstoff)
* Mo 2019-12-02: [Tag 2](https://youtu.be/_DnboNZCm0s) (erstes Intcode-Programm: Addition/Multiplikation)
* Di 2019-12-03: [Tag 3](https://youtu.be/wteaJdGEu1I) (Schnittpunkte zwischen zwei Drähten)
* Mi 2019-12-04: [Tag 4](https://youtu.be/-llJ5Cq_PQM) („Passwörter“ aus Ziffern mit Gültigkeitsregeln)
* Do 2019-12-05: [Tag 5](https://youtu.be/-ISgDEmrbLs) (Intcode-Erweiterungen: Parameter-Modus „Immediate“, Jump, Compare)
* Fr 2019-12-06: [Tag 6](https://youtu.be/6JJ8ZTOlPCI) (Graphtraversierung bzw. „Orbitaltransfers“)
* Sa 2019-12-07: [Tag 7](https://youtu.be/AuqY50f1rAU) (Verkettung von Intcode-Maschinen, Warten auf Input)
* So 2019-12-08: [Tag 8](https://youtu.be/3pbzOg2QCTc) (Passwort-Bild aus teils transparenten Layern)
* Mo 2019-12-09: [Tag 9](https://youtu.be/L_rm1t1ZtOI) (Relative Adressierung und mehrere Outputs im Intcode)
* Di 2019-12-10: [Tag 10](https://youtu.be/TjcIJJKWxKU) (Asteroiden: Sichtbarkeit und Abschuss im Uhrzeigersinn)

## Advent of Code 2018

2018 lag mein Fokus auf modernem JavaScript, sprich ≥ ES6.
Dafür habe ich mich mit dem hervorragenden [JavaScript.info](https://javascript.info/) eingearbeitet und dort auch immer wieder nachgeschlagen.

Leider ist am 13.12. (wann auch sonst) meine Platte abgeraucht und ich habe die Streams nicht fortgesetzt.

Die Streams der ersten zwölf Tage findet ihr in dieser YouTube-Playlist: [Advent of Code 2018](https://www.youtube.com/playlist?list=PLmsG3H3Vzkf_HZppROt70VbflbSEJtj1K), den Code natürlich hier im Repo im Ordner [2018](2018).

## FAQ

### Warum streamst du nicht auf Twitch?

Ich versuche seit ca. nem Jahr, so wenig mit Amazon (denen ja Twitch gehört) zu tun zu haben wie möglich.
Die Arbeitsbedingungen dort sind ausbeuterisch, deren CEO Jeff Bezos hordet sein Geld lieber, anstatt damit Gutes zu tun und generell sind sie mir einfach unsympathisch.
Google ist jetzt aus antikapitalistischer Sicht nur marginal besser, aber freie oder dezentrale Streamingplattformen gibt’s eben noch nicht so wirklich.
Vielleicht wird das 2020 besser…?

### Warum benutzt du nicht den YouTube-Chat, sondern Discord?

Erstens heißt du im YouTube-Chat so wie dein „Kanal“, was üblicherweise deinem Google-Namen und damit oft deinem Passnamen entspricht.
Sich einen Nickname auszusuchen, ist nicht so einfach, außer du benennst deinen „Kanal“ um.
Und wenn du dich mit deinem Nickname identifizierst, fühlt sich der Passname einfach blöd an.
Abgesehen davon fällt’s mir schwer, dich zuzuordnen, wenn ich dich nur unter deinem Nick kenne.

Zweitens möchte ich aber auch eine Community abseits von den paar Stunden Stream hochziehen, von daher macht’s eben einfach Sinn, nen Dienst zu benutzen, der auch abseits der Streams genutzt werden kann.

Und drittens hätte ich Bock, Stammgäste auch mal in den Stream dazu zu holen, das geht halt mit Discord auch direkt.
",scy/advent-of-code
149,def-,Nimrod,{'Nim': 10724},,def-/nim-advent-of-code-2015
150,ejhobbs,Elixir,{'Elixir': 12325},"# Advent of Code Helper [![Build Status](https://travis-ci.org/ejhobbs/Advent-Of-Code.svg?branch=master)](https://travis-ci.org/ejhobbs/Advent-Of-Code) [![codecov](https://codecov.io/gh/ejhobbs/Advent-Of-Code/branch/master/graph/badge.svg)](https://codecov.io/gh/ejhobbs/Advent-Of-Code) [![Hex.pm](https://img.shields.io/hexpm/v/advent_of_code_helper.svg?style=plastic)](https://hex.pm/packages/advent_of_code_helper)

This elixir package allows you to quickly grab inputs for advent of code puzzles, and not have to worry about manually pasting them in! After you've got a puzzle input for the first time, the result is stored on disk so every subsequent request bypasses the need to download it from the server again.

## Usage

There are only two functions you need to use this module:

```elixir
AdventOfCodeHelper.get_input(year,day) # Specify year and day for puzzle

AdventOfCodeHelper.get_input(day) # Automatically gets puzzle from most recent year

```
Both of these functions will simply return a tuple `{:ok, value}` if they succeed, where `value` is the puzzle input in the form of a `BitString`, or `{:fail, message}` if there was something wrong.

There are two configuration directives that are also needed to make this package work correctly. Simply add the following to your `config/config.exs`

```elixir
config :advent_of_code_helper,
session: ""<session string>"",
cache_dir: "".cache/"" # this is a sensible default, but feel free to put it wherever you have write access
```

The session string will need to be taken from [adventofcode.com](https://adventofcode.com), it will be under cookies as `session`. You can extract the value using the inspector in your browser of choice.


## Installation

This package can be installed by adding `advent_of_code_helper` to your list of dependencies in `mix.exs`:

```elixir
def deps do
  [
    {:advent_of_code_helper, ""~> 0.1.0""}
  ]
end
```
",ejhobbs/Advent-Of-Code
151,nickbclifford,Crystal,{'Crystal': 16081},"# Advent of Code 2018 Solutions
Written in Crystal. Build each file with `crystal build --release dayN.cr` and run with `./dayN` for optimal execution time.",nickbclifford/advent-of-code-2018
152,1Computer1,Haskell,"{'Haskell': 42391, 'Python': 503}","# Advent of Code Solutions

I'm probably not gonna do all the problems, but I'm gonna pretend like I'm gonna.  

This workspace is convenient, kinda:  

- `generate.py <year> <start> <end>` makes all the files between two days for a year.
- `Boilerplate` generates a `run` function that runs the solution given the year, day, and subproblem (A or B).
- `Advent.Types` has a `Solution` type that encapsulates a solution.

Feel free to use this as a template for yourself, maybe add tests and benchmarks or something.  
Checkout the `no-solutions` branch for the workspace with no spoilers that you can use right away.  
",1Computer1/advent
153,danthedaniel,Java,"{'Java': 4204, 'Assembly': 2365, 'C': 1895, 'Rust': 1893, 'Python': 1735, 'Elixir': 1573, 'JavaScript': 1466, 'Ruby': 814, 'Makefile': 332}","Advent of Code 2017
===

>*On the first day of Christmas, my true love gave to me*
>
>*A checksum script in Ruby*

[Official site](http://adventofcode.com/).

### Personal Rules

* Every day's problems must be completed in a unique programming language.
* Problems need not be completed on the day they are assigned.
* Problems can be completed in any order.

### Languages Used

* Day 1 - Ruby
* Day 2 - Python
* Day 3 - C
* Day 4 - Rust
* Day 5 - 32 bit MIPS Assembly
* Day 6 - Elixir
* Day 7 - JavaScript
* Day 8 - Java
",danthedaniel/Advent-of-Code-2017
154,JEG2,Elixir,{'Elixir': 60467},,JEG2/advent_of_code_2018
155,armstnp,Clojure,{'Clojure': 69827},,armstnp/advent-of-code-2019
156,rosa,Elixir,"{'Elixir': 182215, 'Ruby': 44657, 'Lua': 7471, 'Kotlin': 5100, 'C': 4866, 'Swift': 3278, 'Prolog': 3123, 'Haskell': 3044, 'Scala': 2070, 'Common Lisp': 1911, 'Perl': 1795, 'Shell': 449, 'Awk': 443}","# Advent of Code

Advent of Code is an Advent calendar of small programming puzzles that can be solved in any language. It's been happening every December since 2015, and it's a lot of fun. Every day from 1st December to 25th December, a new puzzle with 2 parts gets unblocked. The goal is to solve all of them to save Christmas. The big story linking the problems together is great too. I've used AoC to learn some Elixir, it's a nice way to get some practice in a new language or to even try several ones!

Learn more and sign up for next edition at the [official website](https://adventofcode.com/).
",rosa/advent-of-code
157,orez-,Python,{'Python': 189865},"# Advent of Code 2017

My solutions for [Advent of Code 2017](http://adventofcode.com/2017).

`original.py` on each day is my as-fast-as-possible solution to the problem, with only minor cleanup.

Some interesting notes:
- I ended up golfing [Day 1: Inverse Captcha](day01/golf.py) ([?](https://adventofcode.com/2017/day/1))
- I'm fond of my solution for [Day 21: Fractal Art](day21/original.py) ([?](https://adventofcode.com/2017/day/21))

I placed [ninth overall](https://adventofcode.com/2017/leaderboard), missing eighth by _one point_ 😩

- [Advent of Code 2019](https://github.com/orez-/Advent-of-Code-2019)
- [Advent of Code 2018](https://github.com/orez-/Advent-of-Code-2018)
- Advent of Code 2017
- [Advent of Code 2016](https://github.com/orez-/Advent-of-Code-2016)
- [Advent of Code 2015](https://github.com/orez-/Advent-of-Code-2015)
",orez-/Advent-of-Code-2017
158,katemihalikova,JavaScript,"{'JavaScript': 213558, 'F#': 5268, 'PHP': 5041, 'Ruby': 795}","# *Advent of Code* 
> Solutions of [*Advent of Code*](http://adventofcode.com/) puzzles

Jump to: [2015](https://github.com/katemihalikova/advent-of-code/tree/latest/2015), [2016](https://github.com/katemihalikova/advent-of-code/tree/latest/2016), [2017](https://github.com/katemihalikova/advent-of-code/tree/latest/2017), [2018](https://github.com/katemihalikova/advent-of-code/tree/latest/2018), [2019](https://github.com/katemihalikova/advent-of-code/tree/latest/2019)
",katemihalikova/advent-of-code
159,shekhargulati,Java,{'Java': 88305},"# adventofcode-2016
Advent Of Code 2016 Java 8 Solutions http://adventofcode.com/
",shekhargulati/adventofcode-2016
160,leebyron,JavaScript,{'JavaScript': 82454},"Spoiler alert!
--------------

These are my solutions to the [Advent of Code 2016](http://adventofcode.com/2016). I've saved them here for posterity. You should really just go play along though!
",leebyron/advent-of-code-2016
161,adventofcode,C,"{'C': 104592, 'Java': 70741, 'Rust': 70646, 'Haskell': 34934, 'Elixir': 28367, 'JavaScript': 17162, 'Python': 7261, 'Ruby': 3438, 'Go': 867}","### Advent Of Code solutions

Got a solution? Put it in a pull request! I'll accept it so long as it's
possibly a solution.

Got a code critique? Same deal. Make your edits in a pull request and see what
happens.

Happy coding.

##### Naming convention
The 1 or 2 in the name depends on part 1 or part 2.
- p[1-2][a-z].[ext] - the code file. ext is c for C, cpp for C++, sh for POSIX sh...
	[a-z] are to differentiate between different solutions in the same 
	language.
- input[a-z]? - the input provided by the problem. Not all the inputs are the 
  same.
- p[1-2] - compiled binary. Not to be included in the repo, as per gitignore.

##### Disclaimer
This repository and this organization are not in any way linked to 
[adventofcode.com](http://adventofcode.com/) except through sharing of a name.
",adventofcode/2015solutions
162,wimglenn,Python,{'Python': 186089},"```
                                   *                              
                                   |                              
                                 +-|---+                          
                                /  |  /|                          
                               +-----+ |                          
                               |:::::| |                          
                       +----+  |:::::| |---+      +-----------+   
                      /    / \ |:::::| |  /|     / \\\\\\ [] /|   
                     /    / / \|:::::| | / |    / \\\\\\ [] / |   
                    /    / / / \:::::|/ /  |   +-----------+  |   
                   +----+ / / / \------+ ------|:::::::::::|  |   
                   |-----\ / / / \=====| ------|:::::::::::|  |   
                   |------\ / / / \====|   |   |:::::::::::|  |   
                   |-------\ / / / +===|   |   |:::::::::::|  |   
                   |--------\ / / /|===|   |   |:::::::::::|  |   
                   |---------\ / / |===|   |  /|:::::::::::|  |   
                   |----------\ /  |===|  /  //|:::::::::::| /    
                   +-----------+   |===| /  //||:::::::::::|/     
                   |:::::::::::|   |===|/__//___________________  
                   |:::::::::::|   |______//|_____...._________   
                   |:::::::::::|   |     //| ____/ /_/___         
                ---|:::::::::::|   |--------|[][]|_|[][]_\------  
               ----|:::::::::::|   |---------------------------   
                || |:::::::::::|   |  //| ||  / / / ||      ||    
                || |:::::::::::|   | //|  || /   /  ||      ||    
                   |:::::::::::|   |//|     / / /                 
                   |:::::::::::|   //|     /   /   ____________   
                   |:::::::::::|  //|     / / /___/ /#/ /#/#/ /   
                   ==============//======+...+====================
                   - - - - - - -// - - -/   / - - - - - - - - - - 
                 ==============//|==============================  
                              //|                                 
```
",wimglenn/advent-of-code-wim
163,dejakobniklas,Java,{'Java': 129889},"# AdventOfCode

[![About](https://img.shields.io/badge/Advent%20of%20Code-2019-brightgreen)](https://adventofcode.com/2019/about)
[![Language](https://img.shields.io/badge/Language-Java-orange)](https://www.java.com/)
[![Days completed](https://img.shields.io/badge/Days%20completed-9-red)](https://github.com/dejakobniklas/AdventOfCode/)
[![Stars](https://img.shields.io/badge/Stars-18-yellow)](https://github.com/dejakobniklas/AdventOfCode/)

networkException's Advent of Code challenges

### Check out other solutions :D
+ Hax's [advent-of-code](https://github.com/Schlauer-Hax/advent-of-code)
+ Trojaner's [AdventofCode](https://github.com/TrojanerHD/AdventofCode)
+ derNiklaas' [Advent-of-Code-2019](https://github.com/derNiklaas/Advent-of-Code-2019)
+ LeMoonStar's [AdventOfCode2019Solutions](https://github.com/LeMoonStar/AdventOfCode2019Solutions)
+ DCDragonCoder's [AdventOfCode2019](https://github.com/DragonCoder01/AdventOfCode2019)
+ joblo2213's [AdventOfCode2019](https://github.com/joblo2213/AdventOfCode2019)
+ FeldiM's [AdventOfCode19](https://github.com/feldim2425/AdventOfCode19)
+ derkalaender's [AdventOfCode](https://github.com/derkalaender/AdventOfCode)
+ Daan Breur's [AdventodCode2019](https://github.com/daanbreur/AdventofCode2019)
+ 1Turtle's [AdventOfCode-for-Computercraft](https://github.com/1Turtle/AdventOfCode-for-Computercraft)
",dejakobniklas/AdventOfCode
164,KrzaQ,Ruby,"{'Ruby': 11181, 'D': 4529, 'Haskell': 1274, 'Python': 763, 'Makefile': 641}","[Advent of Code 2015](http://adventofcode.com/2015) solutions by [KrzaQ][kq]
=======================

I'm using various languages to provide solutions.

| Day | Name                                           | D    | Haskell | Python | Ruby | Shakespeare |
|:---:|:-----------------------------------------------|:----:|:----:|:------:|:-------:|:-----------:|
| 01  | [Not Quite Lisp][day1]                         |[✓](./day01/main.d)|[✓](./day01/main.hs)|[✓](./day01/main.py)|[✓](./day01/main.rb)|[✓](./day01/shakespeare)|
| 02  | [I Was Told There Would Be No Math][day2]      |[✓](./day02/main.d)|[✓](./day02/main.hs)|[✓](./day02/main.py)|[✓](./day02/main.rb)||
| 03  | [Perfectly Spherical Houses in a Vacuum][day3] |[✓](./day03/main.d)|||[✓](./day03/main.rb)||
| 04  | [The Ideal Stocking Stuffer][day4]             |[✓](./day04/main.d)||[✓](./day04/main.py)|[✓](./day04/main.rb)||
| 05  | [Doesn't He Have Intern-Elves For This?][day5] |[✓](./day05/main.d)|||[✓](./day05/main.rb)||
| 06  | [Probably a Fire Hazard][day6]                 ||||[✓](./day06/main.rb)||
| 07  | [Some Assembly Required][day7]                 |[✓](./day07/main.d)|||[✓](./day07/main.rb)||
| 08  | [Matchsticks][day8]                            ||||[✓](./day08/main.rb)||
| 09  | [All in a Single Night][day9]                  ||||[✓](./day09/main.rb)||
| 10  | [Elves Look, Elves Say][day10]                 ||||[✓](./day10/main.rb)||
| 11  | [Corporate Policy][day11]                      ||||[✓](./day11/main.rb)||
| 12  | [JSAbacusFramework.io][day12]                  ||||[✓](./day12/main.rb)||
| 13  | [Knights of the Dinner Table][day13]           ||||[✓](./day13/main.rb)||
| 14  | [Reindeer Olympics][day14]                     ||||[✓](./day14/main.rb)||
| 15  | [Science for Hungry People][day15]             ||||[✓](./day15/main.rb)||
| 16  | [Aunt Sue][day16]                              ||||[✓](./day16/main.rb)||
| 17  | [No Such Thing as Too Much][day17]             ||||[✓](./day17/main.rb)||
| 18  | [Like a GIF For Your Yard][day18]              ||||[✓](./day18/main.rb)||

[day1]:  http://adventofcode.com/2015/day/1
[day2]:  http://adventofcode.com/2015/day/2
[day3]:  http://adventofcode.com/2015/day/3
[day4]:  http://adventofcode.com/2015/day/4
[day5]:  http://adventofcode.com/2015/day/5
[day6]:  http://adventofcode.com/2015/day/6
[day7]:  http://adventofcode.com/2015/day/7
[day8]:  http://adventofcode.com/2015/day/8
[day9]:  http://adventofcode.com/2015/day/9
[day10]: http://adventofcode.com/2015/day/10
[day11]: http://adventofcode.com/2015/day/11
[day12]: http://adventofcode.com/2015/day/12
[day13]: http://adventofcode.com/2015/day/13
[day14]: http://adventofcode.com/2015/day/14
[day15]: http://adventofcode.com/2015/day/15
[day16]: http://adventofcode.com/2015/day/16
[day17]: http://adventofcode.com/2015/day/17
[day18]: http://adventofcode.com/2015/day/18

[kq]: https://dev.krzaq.cc
",KrzaQ/AdventOfCode2015
165,taylorwood,Clojure,{'Clojure': 107114},"<img src=""doc/img/santa.jpg"" align=""right"" width=""450"" />

# Advent of Code

Solutions to [Advent of Code](https://adventofcode.com) challenges.

## 2019

- [Day One](src/advent_of_code/2019/1.clj)
- [Day Two](src/advent_of_code/2019/2.clj)
- [Day Three](src/advent_of_code/2019/3.clj)
- [Day Four](src/advent_of_code/2019/4.clj)

## 2018

This year I'm visualizing some of the solutions with [Quil](http://quil.info).

- [Day One](src/advent_of_code/2018/1.clj)
- [Day Two](src/advent_of_code/2018/2.clj) ([visualized](https://youtu.be/Y_UuASYf6bM))
- [Day Three](src/advent_of_code/2018/3.clj) ([visualized](doc/img/2018/3.png))
- [Day Four](src/advent_of_code/2018/4.clj) ([visualized](https://youtu.be/9OfLNCWM_yA))
- [Day Five](src/advent_of_code/2018/5.clj)
- [Day Six](src/advent_of_code/2018/6.clj) ([visualized](doc/img/2018/6.png))
- [Day Seven](src/advent_of_code/2018/7.clj)
- [Day Eight](src/advent_of_code/2018/8.clj)
- [Day Nine](src/advent_of_code/2018/9.clj)
- [Day Ten](src/advent_of_code/2018/10.clj) ([visualized](https://youtu.be/4YtCXEalgTw))
- [Day Eleven](src/advent_of_code/2018/11.clj)
- [Day Twelve](src/advent_of_code/2018/12.clj)
- [Day Thirteen](src/advent_of_code/2018/13.clj) ([visualized](https://youtu.be/hnDNNvy8gww))
- [Day Fourteen](src/advent_of_code/2018/14.clj)

## 2017

- [Day One](src/advent_of_code/2017/1.clj)
- [Day Two](src/advent_of_code/2017/2.clj)
- [Day Three](src/advent_of_code/2017/3.clj)
- [Day Four](src/advent_of_code/2017/4.clj)
- [Day Five](src/advent_of_code/2017/5.clj)
- [Day Six](src/advent_of_code/2017/6.clj)
- [Day Seven](src/advent_of_code/2017/7.clj)
- [Day Eight](src/advent_of_code/2017/8.clj)
- [Day Nine](src/advent_of_code/2017/9.clj)
- [Day Ten](src/advent_of_code/2017/10.clj)
- [Day Eleven](src/advent_of_code/2017/11.clj)
- [Day Twelve](src/advent_of_code/2017/12.clj)
- [Day Thirteen](src/advent_of_code/2017/13.clj)
- [Day Fourteen](src/advent_of_code/2017/14.clj)
- [Day Fifteen](src/advent_of_code/2017/15.clj)
- [Day Sixteen](src/advent_of_code/2017/16.clj)
- [Day Seventeen](src/advent_of_code/2017/17.clj)
- [Day Eighteen](src/advent_of_code/2017/18.clj)
- [Day Nineteen](src/advent_of_code/2017/19.clj)
- [Day Twenty](src/advent_of_code/2017/20.clj)
- [Day Twenty One](src/advent_of_code/2017/21.clj)
- [Day Twenty Two](src/advent_of_code/2017/22.clj)
- [Day Twenty Three](src/advent_of_code/2017/23.clj)

## 2016

- [Day One](src/advent_of_code/2016/1.clj)
- [Day Two](src/advent_of_code/2016/2.clj)
- [Day Three](src/advent_of_code/2016/3.clj)
- [Day Four](src/advent_of_code/2016/4.clj)
- [Day Five](src/advent_of_code/2016/5.clj)
- [Day Six](src/advent_of_code/2016/6.clj)
- [Day Seven](src/advent_of_code/2016/7.clj)
- [Day Eight](src/advent_of_code/2016/8.clj)
- [Day Nine](src/advent_of_code/2016/9.clj)
- [Day Ten](src/advent_of_code/2016/10.clj)
",taylorwood/advent-of-code
166,jennybc,R,"{'R': 23499, 'C++': 545}",,jennybc/2017_advent-of-code
167,dstockto,PHP,{'PHP': 58107},"#Advent of Code 2015 - TDD in PHP
---------------------------------

This repo contains (or will contain) examples of how to solve each of the 2015 Advent of Code challenges using PHP by following a TDD methodology using phpspec. You are welcome to use the code in any way you see fit, but the intention is for learning. 

To see each of the examples developed live, please see my youtube channel at https://www.youtube.com/user/dstockto

Due to the time required to record each video and since I didn't know about the project until day 7, it is likely this repo and the videos will be at least a few days behind.

To log in and try the Advent of Code, please go to [http://adventofcode.com/](http://adventofcode.com/). Thank you to Eric Wastl [@ericwastl](https://twitter.com/ericwastl) for creating this challenge.

## Design Decisions

The purpose of this repo and the examples is to help people learn TDD with PHP. That means that for each of the Advent days, the design of the code may not be the fastest, most efficient or the most clever. If the description of the problem sounds like a simulation of some sort, I'll likely be building a simulation even though it may take more memory or more time than an optimized procedural solution. For instance, the first puzzle for day 1 could be solved with a text editor's find functionality or with a couple of regular expressions.

## Initial Repository Contents

To start, the repo contains only composer.json, composer.lock and `runner.php`. The composer files are used to install phpspec and set up an autoloader so I don't need to write a bunch of `require_once` bits. The `runner.php` script will load a puzzle for a specific day and execute it. The solutions will output on the command line. Each day's classes will be namespaced with the day and the Puzzle1 and Puzzle2 classes will set up the classes and input and __invoke will result in the output. The runner script will execute this. Other than phpspec, I'm not planning on using any other frameworks or components, so the solutions will be plain PHP. 

If you end up following along and have any questions or comments, please feel free to open issues on github. I'll try to respond as quickly as I can.

## Videos

Playlist of All of these [https://www.youtube.com/playlist?list=PLHVWnS588z7rEjzg7QojrUS04gT2jCp1K](https://www.youtube.com/playlist?list=PLHVWnS588z7rEjzg7QojrUS04gT2jCp1K)

Day 1 Puzzle 1 - [https://www.youtube.com/watch?v=JzUnN_J3DVI](https://www.youtube.com/watch?v=JzUnN_J3DVI)  
Day 1 Puzzle 2 - [https://www.youtube.com/watch?v=7GEE781hCkk](https://www.youtube.com/watch?v=7GEE781hCkk)  
Day 2 Puzzle 1 - [https://www.youtube.com/watch?v=JrbVR3qrj0Y](https://www.youtube.com/watch?v=JrbVR3qrj0Y)  
Day 2 Puzzle 2 - [https://www.youtube.com/watch?v=h14wi9l6yvk](https://www.youtube.com/watch?v=h14wi9l6yvk)  
Day 3 Puzzle 1 - [https://www.youtube.com/watch?v=2HOCmEPXC68](https://www.youtube.com/watch?v=2HOCmEPXC68)  
Day 3 Puzzle 2 - [https://www.youtube.com/watch?v=CnSgCLgAcPU](https://www.youtube.com/watch?v=CnSgCLgAcPU)  
Day 4 Puzzle 1 & 2 - [https://www.youtube.com/watch?v=O3ySnkTr9DI](https://www.youtube.com/watch?v=O3ySnkTr9DI)  
Day 5 Puzzle 1 & 2 - [https://www.youtube.com/watch?v=RT0NwGxMjWA](https://www.youtube.com/watch?v=RT0NwGxMjWA&feature=youtu.be)  
Day 6 Puzzle 1 - [https://www.youtube.com/watch?v=h_xGqkntntc](https://www.youtube.com/watch?v=h_xGqkntntc)  
Day 6 Puzzle 2 - [https://www.youtube.com/watch?v=5iz12ZnOnw8](https://www.youtube.com/watch?v=5iz12ZnOnw8)  
Day 7 Puzzle 1 - [https://www.youtube.com/watch?v=qLkNhFe30GA](https://www.youtube.com/watch?v=qLkNhFe30GA)  
Day 7 Puzzle 2 - [https://www.youtube.com/watch?v=QL5hELorW3w](https://www.youtube.com/watch?v=QL5hELorW3w)  
Day 8 Puzzle 1 - [https://www.youtube.com/watch?v=4GQy3bTAfeA](https://www.youtube.com/watch?v=4GQy3bTAfeA)  
Day 8 Puzzle 2 - [https://www.youtube.com/watch?v=V1vQjLs-nfg](https://www.youtube.com/watch?v=V1vQjLs-nfg) 



",dstockto/AdventOfCode2015
168,Larkenx,C#,"{'C#': 6255, 'Ruby': 5352, 'Lua': 4331, 'Perl': 3779, 'PowerShell': 3019, 'Racket': 2815, 'Java': 2410, 'Clojure': 2299, 'Swift': 2239, 'Go': 1868, 'Kotlin': 740}","# AdventOfCode2018
These are all of my solutions for [Advent of Code 2018](https://adventofcode.com/2018)! I'm trying to do each challenge in a different programming language everday. So far, here is the the master list of languages I've used:

1. [Kotlin Script](https://github.com/Larkenx/AdventOfCode2018/tree/master/1)
2. [Racket](https://github.com/Larkenx/AdventOfCode2018/blob/master/2/solution.rkt)
3. [Java](https://github.com/Larkenx/AdventOfCode2018/blob/master/3/Solution.java)
4. [Perl 6](https://github.com/Larkenx/AdventOfCode2018/blob/master/4/solution.p6)<sup>1</sup>
5. [Swift](https://github.com/Larkenx/AdventOfCode2018/blob/master/5/AdventofCode2018/main.swift)
6. [~~Powershell~~](https://github.com/Larkenx/AdventOfCode2018/blob/master/6/failed-solution.ps1) [Lua](https://github.com/Larkenx/AdventOfCode2018/blob/master/6/solution.lua)
7. [Ruby](https://github.com/Larkenx/AdventOfCode2018/tree/master/7)
8. [Go](https://github.com/Larkenx/AdventOfCode2018/blob/master/8/solution.go)
9. [C#](https://github.com/Larkenx/AdventOfCode2018/blob/master/9/Solution/ConsoleApp1/Program.cs)

<sup>1</sup>I wrote a Perl 6 [crash course guide here](https://gist.github.com/Larkenx/de8738aab358ca6f62931d91ae499982)!
",Larkenx/AdventOfCode2018
169,believer,Reason,"{'Reason': 241865, 'C++': 12273, 'JavaScript': 234, 'Shell': 99}","# Advent of Code

## What is Advent of Code?

Advent of Code is an online event created by Eric Wastl. Each year, starting on Dec 1st, an advent calendar of small programming puzzles are unlocked once a day at midnight (EST/UTC-5). Developers of all skill sets are encouraged to solve them in any programming language they choose!

## Years

- [2019](/2019)
- [2019 (ReasonML Native)](/advent-of-native)
- [2018](/2018)
- [2015](/2015)

",believer/advent-of-code
170,malmers,Haskell,{'Haskell': 6873},"# Malm's Advent of Code 2017

Written in Haskell for some reason. No guarantees for efficient or good looking code
",malmers/AdventOfCode-2017
171,mrgoodrich,JavaScript,{'JavaScript': 713732},"# AdventOfCode2018

* [Private leaderboard tool](https://github.com/simmonmt/advent-of-code/blob/master/utils/dump_leaderboard.go)
* [AoC 2018](https://adventofcode.com/2018)
* [Google Boulder 2018 leaderboard](https://adventofcode.com/2018/leaderboard/private/view/275172)
* [Catawiki leaderboard](https://adventofcode.com/2018/leaderboard/private/view/370453)

![global_2018_final](https://github.com/mrgoodrich/AdventOfCode2018/blob/master/global_stats.png?raw=true)
",mrgoodrich/AdventOfCode2018
172,ChrisPenner,Haskell,{'Haskell': 47961},"# Advent of Code Haskell

Advent of code solutions in Haskell
",ChrisPenner/advent-of-code-haskell
173,M0nica,JavaScript,{'JavaScript': 17044},"# Advent of Code 
>  Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.

This repository contains my solutions to Advent of Code 2019

https://adventofcode.com/

Previous years: 
- [http://adventofcode.com/2018](http://adventofcode.com/2018)
- [http://adventofcode.com/2017](http://adventofcode.com/2017)
- [http://adventofcode.com/2016](http://adventofcode.com/2016)
- [http://adventofcode.com/2015](http://adventofcode.com/2015)


### 2019
| Challenge                                                                        | Status |
| -------------------------------------------------------------------------------- | :----: |
| Day 01: [The Tyranny of the Rocket Equation](http://adventofcode.com/2019/day/1) |  \*\*  |
| Day 02: [1202 Program Alarm](https://adventofcode.com/2019/day/2)                |   \*   |
| Day 04: [Secure Container](http://adventofcode.com/2019/day/1)                   |  \*\*  |",M0nica/advent-of-code
174,nicuveo,Haskell,"{'Haskell': 283234, 'Rust': 7068, 'Shell': 1459, 'Emacs Lisp': 413}","# Advent of Code

Sorted by year and language.
",nicuveo/advent-of-code
175,christofhaerens,Python,{'Python': 182912},"# advent_of_code
puzzles and solutions from http://adventofcode.com

",christofhaerens/advent_of_code
176,maislinger,Rust,"{'Rust': 159859, 'Kotlin': 8423, 'Shell': 207}",,maislinger/advent_of_code
177,Harleqin,Common Lisp,{'Common Lisp': 69390},,Harleqin/advent-of-code-2017
178,roman01la,Clojure,{'Clojure': 8146},"# [Advent of Code 2018](https://adventofcode.com/2018)
",roman01la/advent-of-code-2018
179,ksmithut,JavaScript,{'JavaScript': 23409},"# advent-of-code

A cli to help initialize/run JavaScript advent-of-code challenges.

# Installation

```sh
yarn add advent-of-code
# or install globally
yarn global add advent-of-code
```

# Configuration

You can configure the `advent` cli using the command line arguments (documented
below) or some of the arguments can be configured via a `package.json` file.

Below are the available configuration options. If you pass in command-line
arguments, they will override your `package.json` configuration.

```js
{
  ""adventConfig"": {
    ""year"": ""2016"",
    ""nameTemplate"": ""day{{num}}.js"",
    ""templateFile"": ""node_modules/advent-of-code/src/templates/day.js""
  }
}
```

| `package.json` key          | CLI argument                     | Default                                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                            |
| --------------------------- | -------------------------------- | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `adventConfig.year`         | `-y, --year [year]`              | currentMonth === December ? currentYear : currentYear - 1 | When pulling input from adventofcode.com, this year will be used.                                                                                                                                                                                                                                                                                                                                                                      |
| -                           | `-s, --session [cookie]`         | `process.env.ADVENT_SESSION`                              | The session cookie to use when making requests to adventofcode.com. You can get this by logging into adventofcode.com and inspecting the request in your devtools and see what your cookie value is. Should start with `session=`.                                                                                                                                                                                                     |
| `adventConfig.nameTemplate` | `-n, --name-template [template]` | `'day{{num}}.js'`                                         | The filename template to use when running and creating new day files. Wherever `{{num}}` is in the string, it will be replaced with a two digit (leading `0`s) representation of the number will be input. So if the day is `1`, using the default template, the filename will be `day01.js`.                                                                                                                                          |
| `adventConfig.templateFile` | `-t, --template-file [filepath]` | `'node_modules/advent-of-code/src/templates/day.js'`      | The template file to use when initializing a new day file. It is recommended that you have your own that fits your style. The only requirement is that you export 2 functions: `exports.part1` and `exports.part2`, or just `module.exports = { part1, part2 }`. You may also export an `options` object to configure how input is parsed. `options.noTrim` lets you choose whether or not the input gets trimmed. Default is `false`. |
| -                           | `-f, --force`                    | `false`                                                   | A flag used if you want to override an existing file with the template when calling `advent init`                                                                                                                                                                                                                                                                                                                                      |

# Usage

## Display help

```sh
advent help
```

## Initialize a day

```sh
advent init <day>
```

### Options

* `<day>` - The day to initialize. Will create a file using your `nameTemplate`
  configuration. You can run `advent init <day>` again and it won't do anything
  unless you pass the `--force` flag.
* `--name-template [template]` - See configuration above
* `--template-file [filepath]` - See configuration above
* `--force` - See configuration above

## Run a day's code

```sh
$ advent run <day> <part> <input>
```

### Options

* `<day>` - The day to initialize. Will use the file in the configuration you
  set for `nameTemplate`
* `<part>` - The part to run. The day file should export a property called
  `part1` and `part2`.
* `<input>` - The input to give the function. If `-` is passed, stdin will be
  used as the input. If `+` is passed, and you have a session set, then it will
  pull the input from adventofcode.com, or the cached value once it pulls from
  adventofcode.com the first time.
* `--year [year]` - See configuration above
* `--session [session]` - See configuration above
* `--name-template [template]` - See configuration above

# Notes

* This module leverages the [debug](https://www.npmjs.com/package/debug) module.
  Setting `DEBUG=advent` will print out debug information, such as when this
  module is pulling from local cache, which days it's trying to run/initialize,
  and so forth. When reporting bugs, please have the output from this handy so
  that I can more quickly determine the issue.

* One thing I liked to do with my local stuff was to store my answers locally
  along with example inputs (from the descriptions). The goal for this project
  was to make it easy for someone to upload their solutions to github, and
  others could pull it down and have it work with their inputs, but if there is
  interest in providing a ""test suite"" to test against example inputs and such,
  then I will do so.

# Disclaimer

I am not affiliated with [adventofcode.com](http://adventofcode.com) or any of
their sponsors, employees, pets, or anything relating to them. I am an active
participant, and I wanted to make a tool to make it easier to setup and run
advent of code things. Please don't abuse adventofcode.com. This tool could be
used to make a lot of automated requests to their site, which is why this tool
leverages caching. If you find that you're making too many requests to
adventofcode.com because of this module, please let me know so I can resolve any
issues. If this module is used to abuse adventofcode.com, I will unpublish it
from npm and remove this code from github.
",ksmithut/advent-of-code
180,Harleqin,Common Lisp,{'Common Lisp': 69390},,Harleqin/advent-of-code-2017
181,roman01la,Clojure,{'Clojure': 8146},"# [Advent of Code 2018](https://adventofcode.com/2018)
",roman01la/advent-of-code-2018
182,ksmithut,JavaScript,{'JavaScript': 23409},"# advent-of-code

A cli to help initialize/run JavaScript advent-of-code challenges.

# Installation

```sh
yarn add advent-of-code
# or install globally
yarn global add advent-of-code
```

# Configuration

You can configure the `advent` cli using the command line arguments (documented
below) or some of the arguments can be configured via a `package.json` file.

Below are the available configuration options. If you pass in command-line
arguments, they will override your `package.json` configuration.

```js
{
  ""adventConfig"": {
    ""year"": ""2016"",
    ""nameTemplate"": ""day{{num}}.js"",
    ""templateFile"": ""node_modules/advent-of-code/src/templates/day.js""
  }
}
```

| `package.json` key          | CLI argument                     | Default                                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                            |
| --------------------------- | -------------------------------- | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `adventConfig.year`         | `-y, --year [year]`              | currentMonth === December ? currentYear : currentYear - 1 | When pulling input from adventofcode.com, this year will be used.                                                                                                                                                                                                                                                                                                                                                                      |
| -                           | `-s, --session [cookie]`         | `process.env.ADVENT_SESSION`                              | The session cookie to use when making requests to adventofcode.com. You can get this by logging into adventofcode.com and inspecting the request in your devtools and see what your cookie value is. Should start with `session=`.                                                                                                                                                                                                     |
| `adventConfig.nameTemplate` | `-n, --name-template [template]` | `'day{{num}}.js'`                                         | The filename template to use when running and creating new day files. Wherever `{{num}}` is in the string, it will be replaced with a two digit (leading `0`s) representation of the number will be input. So if the day is `1`, using the default template, the filename will be `day01.js`.                                                                                                                                          |
| `adventConfig.templateFile` | `-t, --template-file [filepath]` | `'node_modules/advent-of-code/src/templates/day.js'`      | The template file to use when initializing a new day file. It is recommended that you have your own that fits your style. The only requirement is that you export 2 functions: `exports.part1` and `exports.part2`, or just `module.exports = { part1, part2 }`. You may also export an `options` object to configure how input is parsed. `options.noTrim` lets you choose whether or not the input gets trimmed. Default is `false`. |
| -                           | `-f, --force`                    | `false`                                                   | A flag used if you want to override an existing file with the template when calling `advent init`                                                                                                                                                                                                                                                                                                                                      |

# Usage

## Display help

```sh
advent help
```

## Initialize a day

```sh
advent init <day>
```

### Options

* `<day>` - The day to initialize. Will create a file using your `nameTemplate`
  configuration. You can run `advent init <day>` again and it won't do anything
  unless you pass the `--force` flag.
* `--name-template [template]` - See configuration above
* `--template-file [filepath]` - See configuration above
* `--force` - See configuration above

## Run a day's code

```sh
$ advent run <day> <part> <input>
```

### Options

* `<day>` - The day to initialize. Will use the file in the configuration you
  set for `nameTemplate`
* `<part>` - The part to run. The day file should export a property called
  `part1` and `part2`.
* `<input>` - The input to give the function. If `-` is passed, stdin will be
  used as the input. If `+` is passed, and you have a session set, then it will
  pull the input from adventofcode.com, or the cached value once it pulls from
  adventofcode.com the first time.
* `--year [year]` - See configuration above
* `--session [session]` - See configuration above
* `--name-template [template]` - See configuration above

# Notes

* This module leverages the [debug](https://www.npmjs.com/package/debug) module.
  Setting `DEBUG=advent` will print out debug information, such as when this
  module is pulling from local cache, which days it's trying to run/initialize,
  and so forth. When reporting bugs, please have the output from this handy so
  that I can more quickly determine the issue.

* One thing I liked to do with my local stuff was to store my answers locally
  along with example inputs (from the descriptions). The goal for this project
  was to make it easy for someone to upload their solutions to github, and
  others could pull it down and have it work with their inputs, but if there is
  interest in providing a ""test suite"" to test against example inputs and such,
  then I will do so.

# Disclaimer

I am not affiliated with [adventofcode.com](http://adventofcode.com) or any of
their sponsors, employees, pets, or anything relating to them. I am an active
participant, and I wanted to make a tool to make it easier to setup and run
advent of code things. Please don't abuse adventofcode.com. This tool could be
used to make a lot of automated requests to their site, which is why this tool
leverages caching. If you find that you're making too many requests to
adventofcode.com because of this module, please let me know so I can resolve any
issues. If this module is used to abuse adventofcode.com, I will unpublish it
from npm and remove this code from github.
",ksmithut/advent-of-code
183,lisa,Go,"{'Go': 190381, 'Shell': 148}","# Advent of Code

Advent of Code adventures and solutions for [adventofcode.com](https://adventofcode.com/)
",lisa/adventofcode
184,joelgrus,Python,{'Python': 73575},"# advent2017

Livecoding my way through [Advent of Code 2017](http://adventofcode.com/)

All of the videos [are on YouTube](https://www.youtube.com/playlist?list=PLeDtc0GP5IClpoQ6ZnsIk8nzNHaoR76hh).
",joelgrus/advent2017
185,Lokeh,Clojure,{'Clojure': 20812},"* Advent of Code 2019

The past two years of Advent of Code, I have used it as an opportunity to learn
new programming languages. The first one I did, I [[https://codeburst.io/25-days-of-reasonml-a4b20a7e8c6][learned ReasonML/OCaml]] and 
used the bucklescript toolchain. Last year, I attempted to do dual Clojure
(which I already knew) and Rust solutions, but didn't get very far due to time.

This year I want to try something different. This year, I will be attempting
Advent of Code in a literate programming fashion using Clojure and Emacs' org-
mode.

This means that I will be writing my Code within .org files alongside my
thoughts and docs, evaluating code blocks and untangling them into the final
source.

For instance, this is a source block which I can run in a live CIDER session:

#+begin_src clojure :results pp
(+ 1 1)
#+end_src

#+RESULTS:
: 2


I can also pipe STDOUT to the results in org-mode as well:

#+begin_src clojure :results output
(prn *ns*)
#+end_src

#+RESULTS:
: #namespace[user]
",Lokeh/advent-2019
186,thatlegoguy,,{},"# AoC2016
Advent of Code Solutions 2016
AoC Solutions..in Excel!
Enjoy!
",thatlegoguy/AoC2016
187,mikasjp,Python,"{'Python': 30297, 'C': 893}","# My [Advent of Code 2017](http://adventofcode.com/2017) solutions
Just for practice and fun. Thank You [Eric](http://was.tl/)!

---

| Day     | Name                                                    | Python                         | C                            |
|:-------:|:--------------------------------------------------------|:------------------------------:|:----------------------------:|
| 01      | [Inverse Captcha][day01]                                | [:heavy_check_mark:][py01]     |                              |
| 02      | [Corruption Checksum][day02]                            | [:heavy_check_mark:][py02]     |                              |
| 03      | [Spiral Memory][day03]                                  | [:heavy_check_mark:][py03]     |                              |
| 04      | [High-Entropy Passphrases][day04]                       | [:heavy_check_mark:][py04]     |                              |
| 05      | [A Maze of Twisty Trampolines, All Alike][day05]        | [:heavy_check_mark:][py05]     |                              |
| 06      | [Memory Reallocation][day06]                            | [:heavy_check_mark:][py06]     |                              |
| 07      | [Recursive Circus][day07]                               | [:heavy_check_mark:][py07]     |                              |
| 08      | [I Heard You Like Registers][day08]                     | [:heavy_check_mark:][py08]     |                              |
| 09      | [Stream Processing][day09]                              | [:heavy_check_mark:][py09]     |                              |
| 10      | [Knot Hash][day10]                                      | [:heavy_check_mark:][py10]     |                              |
| 11      | [Hex Ed][day11]                                         | [:heavy_check_mark:][py11]     |                              |
| 12      | [Digital Plumber][day12]                                | [:heavy_check_mark:][py12]     |                              |
| 13      | [Packet Scanners][day13]                                | [:heavy_check_mark:][py13]     |                              |
| 14      | [Disk Defragmentation][day14]                           | [:heavy_check_mark:][py14]     |                              |
| 15      | [Dueling Generators][day15]                             | [:heavy_check_mark:][py15]     | [:heavy_check_mark:][c15]    |
| 16      | [Permutation Promenade][day16]                          | [:heavy_check_mark:][py16]     |                              |
| 17      | [Spinlock][day17]                                       | [:heavy_check_mark:][py17]     |                              |
| 18      | [Duet][day18]                                           | [:heavy_check_mark:][py18]     |                              |
| 19      | [A Series of Tubes][day19]                              | [:heavy_check_mark:][py19]     |                              |
| 20      | [Particle Swarm][day20]                                 | [:heavy_check_mark:][py20]     |                              |
| 21      | [Fractal Art][day21]                                    | [:heavy_check_mark:][py21]     |                              |
| 22      | [Sporifica Virus][day22]                                | [:heavy_check_mark:][py22]     |                              |
| 23      | [Coprocessor Conflagration][day23]                      | [:heavy_check_mark:][py23]     |                              |
| 24      | [Electromagnetic Moat][day24]                           | [:heavy_check_mark:][py24]     |                              |
| 25      | [The Halting Problem][day25]                            | [:heavy_check_mark:][py25]     |                              |

[day01]: https://adventofcode.com/2017/day/1
[day02]: https://adventofcode.com/2017/day/2
[day03]: https://adventofcode.com/2017/day/3
[day04]: https://adventofcode.com/2017/day/4
[day05]: https://adventofcode.com/2017/day/5
[day06]: https://adventofcode.com/2017/day/6
[day07]: https://adventofcode.com/2017/day/7
[day08]: https://adventofcode.com/2017/day/8
[day09]: https://adventofcode.com/2017/day/9
[day10]: https://adventofcode.com/2017/day/10
[day11]: https://adventofcode.com/2017/day/11
[day12]: https://adventofcode.com/2017/day/12
[day13]: https://adventofcode.com/2017/day/13
[day14]: https://adventofcode.com/2017/day/14
[day15]: https://adventofcode.com/2017/day/15
[day16]: https://adventofcode.com/2017/day/16
[day17]: https://adventofcode.com/2017/day/17
[day18]: https://adventofcode.com/2017/day/18
[day19]: https://adventofcode.com/2017/day/19
[day20]: https://adventofcode.com/2017/day/20
[day21]: https://adventofcode.com/2017/day/21
[day22]: https://adventofcode.com/2017/day/22
[day23]: https://adventofcode.com/2017/day/23
[day24]: https://adventofcode.com/2017/day/24
[day25]: https://adventofcode.com/2017/day/25

[py01]: ./01/solution.py
[py02]: ./02/solution.py
[py03]: ./03/solution.py
[py04]: ./04/solution.py
[py05]: ./05/solution.py
[py06]: ./06/solution.py
[py07]: ./07/solution.py
[py08]: ./08/solution.py
[py09]: ./09/solution.py
[py10]: ./10/solution.py
[py11]: ./11/solution.py
[py12]: ./12/solution.py
[py13]: ./13/solution.py
[py14]: ./14/solution.py
[py15]: ./15/solution.py
[py16]: ./16/solution.py
[py17]: ./17/solution.py
[py18]: ./18/solution.py
[py19]: ./19/solution.py
[py20]: ./20/solution.py
[py21]: ./21/solution.py
[py22]: ./22/solution.py
[py23]: ./23/solution.py
[py24]: ./24/solution.py
[py25]: ./25/solution.py

[c15]: ./15/solution.c 
",mikasjp/adventofcode2017
188,natemago,Python,"{'Python': 93627, 'Shell': 80}",,natemago/adventofcode2016
189,kodsnack,Python,"{'Python': 156690, 'Rust': 104235, 'C++': 71484, 'F#': 68551, 'Nim': 30557, 'Haskell': 25641, 'Kotlin': 14600, 'REXX': 13854, 'OCaml': 12448, 'Go': 11995, 'C': 9751, 'Swift': 8043, 'C#': 2978, 'JavaScript': 1750, 'PowerShell': 866, 'CMake': 659, 'AppleScript': 493, 'Shell': 255}","# Advent of code 2019
Contribute your solutions to [Advent of Code 2019](https://adventofcode.com) and be inspired by others.

Bidra med dina lösningar på problemen i Advent of code, i vilket språk du vill. Välj ett du kan, eller ett du vill lära dig! Vi har också en ledarbräda (leaderboard) på Advent of code: koden till ledarbrädan är 194162-e06e748d.

Vi har också en Slackkanal dit alla är välkomna att snacka Advent of code, eller egentligen allt mellan himmel och jord med lite koppling till kod. Maila info@kodsnack.se eller twittra din epost till @kodsnack så släpper vi in er.

Dina lösningar får gärna checkas in i en mapp med namn på formen #användarnamn-språk#, så blir det lite lättare för alla att få överblick.

Lösningarna kan komma att diskuteras i avsnitt av Kodsnack, så lägg med en readme.md med en notis om du inte vill riskera att bli omnämnd.
",kodsnack/advent_of_code_2019
190,kodsnack,C#,"{'C#': 81750, 'Haskell': 79080, 'OCaml': 69300, 'Python': 9654, 'PHP': 9060, 'Kotlin': 8722, 'Elixir': 8472, 'Swift': 8410, 'Rust': 8364, 'Java': 7720, 'JavaScript': 7626, 'Scala': 4448, 'Prolog': 4284, 'Pascal': 1594, 'Shell': 85}","# advent_of_code_2015
Lösningar på [Advent of code 2015](http://adventofcode.com) - en adventskalender med problem som kan lösas i vilket programmeringsspråk man vill.

Alla är varmt välkomna att diskutera, fråga, och göra pull requests med såväl lösningar i nya språk som fler och andra lösningar i de språk som redan finns representerade.
",kodsnack/advent_of_code_2015
191,jkoenig134,Java,"{'Java': 15283, 'Haskell': 8986, 'Go': 8252, 'Clojure': 7434, 'JavaScript': 6474, 'Scala': 2360, 'Kotlin': 2327, 'Batchfile': 932, 'Shell': 709, 'Smarty': 151}","# AdventOfCode-2019

A repository of solutions for the [AdventOfCode](https://adventofcode.com/) challenges, implemented in different languages.

## Use

In your terminal, run `solve <language> <day> <path-to-input-file>`. The following languages are available so far:

-   Clojure
-   Go
-   Haskell
-   Scala
-   Java
-   Kotlin
-   NodeJS

For `day`, input `Day01`, `Day02` etc.

The input file is the one you receive from the challenge website. If no value is given, it is assumed to be located in `./input/<day>.txt`, where `<day>` is the second parameter.

## How to contribute

-   Click ""Fork"" in this repository and fork it into your account

-   In your terminal, run `git clone https://github.com/<yourname>/AdventOfCode-2019.git`

-   Choose your language and make a directory with its name - if there already is a directory for the language, name it differently (for example ""java2"" if ""java"" already exists)

-   Place a ""run.bat"" and ""run.sh"" file in the newly created directory and write a script that takes the day that ought to be solved and the input file as a command parameter input and executes whatever action is required to run your solutions. For example, this is what this script for java might look like (batch):

```java
:: %1 is the first argument, e.g. ""Day01""
set file_name=%1.java
:: compile the code
javac %file_name%
:: run the code - %2 is the input file
java %1 %2
```

-   Add a readme to your directory depicting the requirements to run your script.

-   Write your script in a way that is compatible with the naming convention (""Day01"", ""Day02"", ...)

-   To keep it structured, use a different file for each day.

-   Open a Pull Request whenever you want; make sure [your fork is up to date](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork)
",jkoenig134/AdventOfCode-2019
192,juliendelplanque,,{},"# Advent Of Code 2017 with Pharo
The repository in which Pharo community will store their solutions to the [Advent of Code 2017'](http://adventofcode.com)s programming puzzles.

The main goal is to centralize solutions of Pharo community for learning purpose. People will then be able to check how AOC puzzles can be solved in Pharo with different styles.

Another goal of this repository is to get a feedback on Pharo's Collection framework. If you find a missing method in one of the Pharo's collection during the implementation of a solution, please say it in your solution file

## How to participate
1. Fork this repository
2. Create a directory named according to your name (for example mine is `juliendelplanque`)
3. You can use this directory to store your puzzles solutions. 
4. Each time you solved a puzzle, commit your solution's markdown file into your personal fork of this repository and create a pull request.

### Pharo version
If you participate, please use Pharo 6.1 that you can get using the following command:
```
wget -O- get.pharo.org/61+vm | bash
```

Once the download is complete, launch Pharo using:
```
./pharo Pharo.image
```

### Structure of a solution
The solutions to AOC puzzles will take the form of Markdowns files. For each solution, use the `template.md` file as a basis.

An example of solution (which is a solution of AOC 2016 first puzzle) is available at `example/aoc2016-1.md`. Your solutions should be formatted similarly.

",juliendelplanque/AdventOfCode2017WithPharo
193,albertobastos,JavaScript,{'JavaScript': 65478},"# Advent of Code 2018  Node.js
Node.js solutions for [Advent of Code 2018](https://adventofcode.com/2018)

# How to run
Execute each example using ""npm run day XX"" at the root folder.

# Example
$ npm run day XX

```
Running day at ./src/d02.js...

Answer (part II): answer_for_part_II
Answer (part I): answer_for_part_I
d02: 24.605ms
```",albertobastos/advent-of-code-2018-nodejs
194,narnolddd,Python,"{'Python': 125649, 'Go': 118011, 'Rust': 82411, 'Scala': 20775, 'C': 1634, 'Shell': 791, 'Smarty': 166}","# adventOfCode
",narnolddd/adventOfCode
195,hsz,JavaScript,"{'JavaScript': 12925, 'PHP': 4973, 'Perl': 1783, 'Python': 951}","Advent of Code 2015 <sub>hsz 36<sup>:star:</sup></sub>
=================================================

Here are presented my solutions for the [Advent of Code](http://adventofcode.com/2015) programming puzzles.

For every day I present the solutions in various languages: `NodeJS`,`PHP`, `Python` and `Perl`.

To run specified solution, just call:

    npm run TYPE DAY
    
where `TYPE` is the type of the solution and `DAY` is numeric value in range `1-25`, i.e:

    npm run node 3

Available types are the language's name in the lowercase:

- `nodejs`
- `php`
- `python`
- `perl`


Below there is a quick list of all available solutions:

 
| Day | Name                                        | NodeJS                     | PHP                         | Python                        | Perl                       |
|:---:| ------------------------------------------- |:--------------------------:|:---------------------------:|:-----------------------------:|:--------------------------:|
| 01  | [Not Quite Lisp][1]                         | [:star:](./day01/index.js) | [:star:](./day01/index.php) | [:star:](./day01/__init__.py) | [:star:](./day01/index.pl) |
| 02  | [I Was Told There Would Be No Math][2]      | [:star:](./day02/index.js) | [:star:](./day02/index.php) |                               | [:star:](./day02/index.pl) |
| 03  | [Perfectly Spherical Houses in a Vacuum][3] | [:star:](./day03/index.js) | [:star:](./day03/index.php) |                               |                            |
| 04  | [The Ideal Stocking Stuffer][4]             | [:star:](./day04/index.js) | [:star:](./day04/index.php) |                               |                            |
| 05  | [Doesn't He Have Intern-Elves For This?][5] | [:star:](./day05/index.js) | [:star:](./day05/index.php) |                               |                            |
| 06  | [Probably a Fire Hazard][6]                 | [:star:](./day06/index.js) | [:star:](./day06/index.php) |                               |                            |
| 07  | [Some Assembly Required][7]                 | [:star:](./day07/index.js) | [:star:](./day07/index.php) |                               |                            |
| 08  | [Matchsticks][8]                            | [:star:](./day08/index.js) |                             |                               | [:star:](./day08/index.pl) |
| 09  | [All in a Single Night][9]                  | [:star:](./day09/index.js) |                             |                               |                            |
| 10  | [Elves Look, Elves Say][10]                 | [:star:](./day10/index.js) |                             |                               |                            |
| 11  | [Corporate Policy][11]                      | [:star:](./day11/index.js) |                             |                               | [:star:](./day11/index.pl) |
| 12  | [JSAbacusFramework.io][12]                  | [:star:](./day12/index.js) |                             |                               |                            |
| 13  | [Knights of the Dinner Table][13]           | [:star:](./day13/index.js) |                             |                               |                            |
| 14  | [Reindeer Olympics][14]                     | [:star:](./day14/index.js) |                             |                               |                            |
| 15  | [Science for Hungry People][15]             | [:star:](./day15/index.js) |                             |                               |                            |
| 16  | [Aunt Sue][16]                              | [:star:](./day16/index.js) |                             |                               |                            |
| 17  | [No Such Thing as Too Much][17]             | [:star:](./day17/index.js) |                             |                               |                            |
| 18  | [Like a GIF For Your Yard][17]              | [:star:](./day18/index.js) |                             |                               |                            |

[1]: http://adventofcode.com/2015/day/1
[2]: http://adventofcode.com/2015/day/2
[3]: http://adventofcode.com/2015/day/3
[4]: http://adventofcode.com/2015/day/4
[5]: http://adventofcode.com/2015/day/5
[6]: http://adventofcode.com/2015/day/6
[7]: http://adventofcode.com/2015/day/7
[8]: http://adventofcode.com/2015/day/8
[9]: http://adventofcode.com/2015/day/9
[10]: http://adventofcode.com/2015/day/10
[11]: http://adventofcode.com/2015/day/11
[12]: http://adventofcode.com/2015/day/12
[13]: http://adventofcode.com/2015/day/13
[14]: http://adventofcode.com/2015/day/14
[15]: http://adventofcode.com/2015/day/15
[16]: http://adventofcode.com/2015/day/16
[17]: http://adventofcode.com/2015/day/17
[18]: http://adventofcode.com/2015/day/18
",hsz/AdventOfCode2015
196,unleashed-coding,Ruby,"{'Ruby': 6418, 'Haskell': 6307, 'Python': 5033, 'Rust': 2800, 'Idris': 645, 'C': 344}","# Solving puzzles from [Advent of Code](http://adventofcode.com)

Click [here](https://github.com/unleashed-coding/advent-of-code/blob/master/CONTRIBUTING.md) to see how to contribute.
",unleashed-coding/advent-of-code
197,liuyubobobo,C++,"{'C++': 128524, 'CMake': 7467, 'Java': 5913}","## My solutions to Advent of Code

I will put my solutions to [Advent of Code](http://adventofcode.com/) in this repo. Every problem will be solved in C++; part of the problems will be solved in Java and Python or other languages also. I will try my best to support more language in the future :)

Please feel free to contact me if you have any problems with this repo:)

email: [liuyubobobo@gmail.com](mailto:liuyubobobo@gmail.com)

---

如果有任何问题，欢迎联系我：）

**个人网站**：[liuyubobobo.com](http://liuyubobobo.com)

**电子邮件**：[liuyubobobo@gmail.com](mailto:liuyubobobo@gmail.com)

**微博**: [刘宇波bobo http://weibo.com/liuyubobobo](http://weibo.com/liuyubobobo)

**知乎**: [刘宇波 http://www.zhihu.com/people/liuyubobobo](http://www.zhihu.com/people/liuyubobobo)

**知乎专栏：**[是不是很酷 https://zhuanlan.zhihu.com/liuyubobobo](https://zhuanlan.zhihu.com/liuyubobobo)

**个人公众号：是不是很酷**：）

![QRCode](qrcode.jpg)

---

| Year | Codes | Status 
| --- | :---: | :---: |
| **Advent of Code 2018** | [codes](2018/) | in Progresssing |
| **Advent of Code 2017** | [codes](2017/) | Completed |
| **Advent of Code 2017** | [codes](2016/) | in Progressing |
| **Advent of Code 2017** | codes | Not Started |
",liuyubobobo/Play-Advent-of-Code
198,rrdelaney,OCaml,"{'OCaml': 12288, 'C++': 924}","# Advent of Code 2017

> Solutions for the [Advent of Code 2017](http://adventofcode.com/2017) written
> in native Reason

Each day has a solution file (`<day>.re`) and a test file (`<day>_test.re`). To
run all the tests run

```
$ jbuilder runtest
```

And for a specific day use

```
$ jbuilder runtest <day>
```

To set up a watcher while writing code use
[Watchman](https://facebook.github.io/watchman)

```
$ watchman-make -p ""*.re"" --run ""jbuilder runtest""
```
",rrdelaney/advent-of-code-2017
199,aturley,Pony,{'Pony': 56208},"# Advent of Code 2018

This is a repository of my solutions to
the [2018 Advent of Code](https://adventofcode.com/2018/) problems. I
will be doing these in [Pony](https://ponylang.io).

## About the Code

I created [some helper code](https://github.com/aturley/aoc-tools)
based on my experience with last year's AoC. My solutions to this
years problems will probably all use this library.

## Building the Solution

Each day's solution lives in a directory that is named for the day
(`day1`, `day2`, etc). You will need to have
the [Pony compiler](https://github.com/ponylang/ponyc)
and [Stable](https://github.com/ponylang/pony-stable) (the Pony dependency
manager installed) in order to build the solutions. To build a
solution, go into its directory and run the following commands:

```
stable fetch
stable env ponyc
```

This will create an executable with the same name as the directory
that you are in.

## Running the Solution

The solution executables take two arguments:

1. the name of the input file
2. the part that you want to run (`1` or `2`)

For example, if you wanted to run part 2 of the day 7 solution on the
file `ex7-4.txt` you would run the following command:

```
./day7 ex7-4.txt 2
```
",aturley/advent-of-code-2018
